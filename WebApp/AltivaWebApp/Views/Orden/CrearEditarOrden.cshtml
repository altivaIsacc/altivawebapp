@model AltivaWebApp.ViewModels.OrdenViewModel
@inject IStringLocalizer<SharedResources> SharedLocalizer
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "CrearEditarOrden";
    var usuario = ViewData["usuario"] as TbSeUsuario;

    var estado = "";

    if (Model.Anulado)
    {
        estado = "disabled";
    }

}

@if (Model.Id != 0)
{
    <h3>@SharedLocalizer["editarOrden"]</h3>
}
else
{
    <h3>@SharedLocalizer["nuevaOrden"]</h3>
}


<hr />

<div class="row text-left">
    @if (Model.Id != 0)
    {
        <button class="btn btn-danger btn-sm" onclick="anularOrden()">@SharedLocalizer["Anular"]</button>
    }
    else if (Model.Id != 0)
    {
        <h5 class="text-danger">@SharedLocalizer["OrdenAnulado"]</h5>
    }
</div>



<div class="row well">
    <div>
        <form id="frmOrden">

            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.Anulado)
            @Html.HiddenFor(x => x.TipoCambioDolar)
            @Html.HiddenFor(x => x.TipoCambioEuro)
            @Html.HiddenFor(x => x.IdUsuario)

            <div class="form-group col-md-3 col-sm-6 col-xs-12">
                <label asp-for="IdProveedor" class="control-label">@SharedLocalizer["Proveedor"]</label>
                <select class="form-control selectItems" id="proveedores">
                    @foreach (var item in ViewData["proveedores"] as IList<TbCrContacto>)
                    {
                        <option value="@item.IdContacto">@item.Nombre</option>
                    }

                </select>
            </div>
            <div class="form-group col-md-2 col-sm-6 col-xs-12">
                <fieldset disabled>
                    <div class="form-group">
                        <label for="fecha">@SharedLocalizer["Fecha"]:</label>
                        <div class='input-group date' id='fechaPicker'>
                            <input readonly type='text' class="form-control" id="fecha" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="form-group col-md-2 col-sm-6 col-xs-12">
                <label asp-for="IdMoneda" class="control-label">@SharedLocalizer["Moneda"]</label>
                <select onchange="recalcularPrecio()" asp-for="IdMoneda" id="moneda" class="form-control tipoMoneda">
                    <option value="1">@SharedLocalizer["CRC"]</option>
                    <option value="2">@SharedLocalizer["USD"]</option>
                    <option value="3">@SharedLocalizer["EUR"]</option>
                </select>
            </div>
            <div class="form-group col-md-5 col-sm-6 col-xs-12">
                <label asp-for="Observacion" class="control-label">@SharedLocalizer["Observación"]</label>
                <textarea asp-for="Observacion" rows="6" maxlength="500" class="form-control"></textarea>
                <span hidden id="observacionValid" class="text-danger">@SharedLocalizer["observacionValid"]</span>
            </div>

        </form>
    </div>

    <br />

    <div class="col-md-12 table-responsive">

        <table class="table table-bordered table-striped" style="min-width:900px">
            <thead>
                <tr>
                    <th><span>@SharedLocalizer["Item"]</span></th>
                    <th><span>@SharedLocalizer["Descripción"]</span></th>
                    <th><span>@SharedLocalizer["Cantidad"]</span></th>
                    <th><span>@SharedLocalizer["PrecioUnitario"]</span></th>
                    <th><span class="col-md-1">@SharedLocalizer["Descuento"]</span></th>
                    <th><span>@SharedLocalizer["IVA"]</span></th>
                    <th><span>@SharedLocalizer["SubTotal"]</span></th>
                    <th hidden><span>@SharedLocalizer["Total"]</span></th>
                    <th style="width:4rem;"><span>@SharedLocalizer["Acción"]</span></th>
                </tr>
            </thead>
            <tbody>
                <tr class="lineaForm">
                    <td>
                        <select class="form-control selectItems" id="item"></select>
                    </td>
                    <td>
                        <input readonly class="form-control" id="descripcion" />
                    </td>
                    <td><input class="form-control" type="number" min="0" id="cantidad" /></td>
                    <td><input class="form-control moneda" type="number" min="1" id="precio" /></td>
                    <td><input class="form-control" type="number" id="desc" /></td>
                    <td><input class="form-control" readonly type="number" id="iva" /></td>
                    <td><input class="form-control moneda" readonly type="text" id="subtotal" /></td>
                    <td hidden><input class="form-control moneda" readonly type="text" id="totalLinea" /></td>
                    <td><button class="btn btn-link btnAccion" onclick="guardarLinea()"><i class="fas fa-save"></i></button></td>
                </tr>
            </tbody>
        </table>

    </div>
    <div class="col-md-offset-9">
        <form id="frmOrden2">

            <div class="form-group">
                <label class="control-label">@SharedLocalizer["SubTotal"]</label>
                <input readonly id="subTotalExcento" class="form-control currency" />
            </div>
            <div class="form-group">
                <label class="control-label">@SharedLocalizer["Impuesto"]</label>
                <input readonly id="totalImpuesto" class="form-control currency" />
            </div>
            <div class="form-group" hidden>
                <label class="control-label">@SharedLocalizer["SubTotal"]</label>
                <input readonly id="subTotalGrabado" class="form-control currency" />
            </div>

            <div class="form-group">
                <label class="control-label">@SharedLocalizer["Total"]</label>
                <input readonly id="total" class="form-control currency" />
            </div>


        </form>
    </div>

</div>
<div class="row">
    <div class="form-group col-md-3">
        <button class="btn btn-success btnAccion" onclick="guardarCambios()">@SharedLocalizer["Guardar"] <i class="fas fa-save"></i></button>
        <a onclick="cancelar()" class="btn btn-default">@SharedLocalizer["Cancelar"]</a>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div id="comentarios">

        </div>
    </div>
</div>

<script src="~/js/comentario.js"></script>


<script>

    var $item = $('#item');
    var $descripcion = $('#descripcion');
    var $subtotal = $('#subtotal');
    var $precio = $('#precio');
    var $iva = $('#iva');
    var $totalLinea = $('#totalLinea');
    var $moneda = $('#moneda');
    var $cantidad = $('#cantidad');

    var $proveedores = $('#proveedores');
    var $fecha = $('#fecha');
    var $subTotalExcento = $('#subTotalExcento');
    var $totalImpuesto = $('#totalImpuesto');
    var $subTotalGrabado = $('#subTotalGrabado');
    var $total = $('#total');

    var subTotal = 0;
    var totalImpuesto = 0;
    var subTotalGravado = 0;
    var totalOrden = 0;

    var ordenDetalleBD = [];
    var lineas = [];
    var items = [];
    var lineasAgregadas = [];
    var lineasEliminadas = [];


    $(document).ready(function () {

        var date = new Date();
        if (@Model.Id != 0) {  
            $proveedores.val(@Model.IdProveedor);
            GetComentarios("Orden", @Model.Id);
            date = new Date('@Model.Fecha'.replace(/\//g, "-"));

        }
            


        $('#fechaPicker').datetimepicker({
            defaultDate: date,
            locale: localStorage.getItem("idioma")
        });

        $(".moneda").inputmask({
            'alias': 'decimal',
            rightAlign: true,
        });

        getInventario();


        $('.selectItems').select2({ width: null, language: localStorage.getItem("idioma") });

        $('#item').on('change.select2', function () {

            var itemInfo = getItem($(this).val());

            $descripcion.val(itemInfo.descripcion);
            $precio.val(getPrecioAlCambio(itemInfo));
            $cantidad.val(1);
            $iva.val(itemInfo.impuestoVenta);
            calcularSubTotalLinea();
        });

    });



    $cantidad.on('keyup, change, focusout', function () {
        if ($(this).val() < 0)
            $(this).val(0);
        calcularSubTotalLinea();
    });

    $precio.on('keyup, change, focusout', function () {
        if ($(this).val() < 0)
            $(this).val(0);
        calcularSubTotalLinea();

    });

    function calcularSubTotalLinea() {

        var precio = parseFloat($precio.val());
        var cantidad = parseFloat($cantidad.val());

        $subtotal.val(cantidad * precio);

        calcularTotalLinea();

    }

    function calcularTotalLinea() {

        $totalLinea.val(calcularSubtotalGrabadoLinea());
    }



    function getOrdenDetalle() {
        if(@Model.Id != 0)
        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetOrdenDetalle")',

            success: function (data) {
                ordenDetalleBD = JSON.parse(JSON.stringify(data));
                cargarLineas(data);
                console.log(data);
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function cargarLineas(data) {

        for (var i = 0; i < data.length; i++) {
            var model = {
                id: data[i].id,
                idOrden: @Model.Id,
                idInventario: data[i].idInventario,
                nombreInventario: data[i].nombreInventario,
                idMonedaOD: @Model.IdMoneda,
                cantidad: data[i].cantidad,
                precio: recuperarPrecio(data[i]),
                subTotalGrabado: recuperarSubTotal(data[i]),
                subTotalExcento: recuperarSubTotal(data[i]),
                porcIva: data[i].porcIva,
                porcIs: 0,
                totalIs: 0,
                totalIva: recuperarIva(data[i]),
                total: recuperarTotal(data[i])

            };
            lineas.push(model);
        }

        cargarTabla(lineas);

    }

    function guardarLinea() {

        console.log($subtotal.val());


        var model = {
            id: 0,
            idOrden: @Model.Id,
            idInventario: $item.val(),
            nombreInventario: $descripcion.val(),
            idMonedaOD: parseInt($('.tipoMoneda').val()),
            cantidad: parseFloat($cantidad.val()),
            precio: parseFloat($precio.val()),
            subTotalGrabado: calcularSubtotalGrabadoLinea(),
            subTotalExcento: parseFloat($subtotal.val()),
            porcIva: parseFloat($iva.val()),
            porcIs: 0,
            totalIs: 0,
            totalIva: calcularTotalIvaLinea(),
            total: parseFloat($totalLinea.val())

        };


        lineasAgregadas.push(model);
        lineas.push(model);

        cargarTabla(lineas);

    }

    function eliminarLinea(_id, idLinea) {

        bootbox.confirm("@SharedLocalizer["confirmEliminarLinea"]", function (result) {

            if (result) {

                var id = _id - 1;


                if (idLinea != 0)
                    lineasEliminadas.push(lineas[id].id);
                else
                    lineasAgregadas.splice($.inArray(lineas[id], lineasAgregadas), 1);

                lineas.splice(id, 1);

                console.log(lineasAgregadas);

                cargarTabla(lineas);


            }

        });


    }

    function calcularTotales() {

        console.log(lineas);

        subTotal = 0;
        totalImpuesto = 0;
        subTotalGravado = 0;
        totalOrden = 0;

        for (var i = 0; i < lineas.length; i++) {
            subTotal += parseFloat(lineas[i].subTotalExcento);
            totalImpuesto += parseFloat(lineas[i].totalIva);
            subTotalGravado += parseFloat(lineas[i].subTotalGrabado);
            totalOrden += parseFloat(lineas[i].total);
        }

        $subTotalExcento.val(subTotal);
        $totalImpuesto.val(totalImpuesto);
        $subTotalGrabado.val(subTotalGravado);
        $total.val(totalOrden);
    }

    function calcularSubtotalGrabadoLinea() {
        var iva = parseFloat($iva.val());
        var subtotal = parseFloat($subtotal.val());
        return ((iva / 100) * subtotal) + subtotal;
    }

    function calcularTotalIvaLinea() {
        var iva = parseFloat($iva.val());
        var subtotal = parseFloat($subtotal.val());
        return (iva / 100) * subtotal;
    }

    function cargarTabla(data) {

        $('.filasCargadas').remove();

        contadorFila = 0;

        for (var i = 0; i < data.length; i++) {
            contadorFila++;
            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '"><td style="padding-top:2rem;">' + getItem(data[i].idInventario).codigo + '</td>'
                + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" value="' + data[i].nombreInventario + '"/></td>'
                + '<td style="padding-top:2rem;">' + data[i].cantidad + ' </td>'
                + '<td style="padding-top:2rem; width:12rem;"><input  style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].precio + '"/></td>'
                + '<td style="padding-top:2rem; width:12rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].subTotalExcento + '"/></td>'
                + '<td style="padding-top:2rem; "><input style="width:6rem; border:0; background-color : #F7F7F7"  value="' + data[i].porcIva + '%"/></td>'
                + '<td style="padding-top:2rem; width:12rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].total + '"/></td>'
                + '<td><button @estado class="btn btn-link" value="' + contadorFila + '" onclick="eliminarLinea(value, ' + data[i].id + ')" ><i class="fas fa-trash"></i></button></td></tr>';

            $('.lineaForm').before(body);

        }

        calcularTotales();
        var simbolo = "₡";
        if (parseInt($('.tipoMoneda').val()) === 2)
            simbolo = "$";
        else if (parseInt($('.tipoMoneda').val()) === 3)
            simbolo = "€";

        $(".currency").inputmask('currency', {
            prefix: simbolo,
            rightAlign: true
        });



    }

    function getInventario() {

         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetAllInventario", "Inventario")',
             success: function (data) {
                 items = data;
                 cargarItems(data);
                 getOrdenDetalle();
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function getItem(id) {
        for (var i = 0; i < items.length; i++) {
            if (items[i].idInventario == parseInt(id))
                return items[i];
        }
    }

    function cargarItems(data) {
        for (var i = 0; i < data.length; i++) {
            var o = new Option(data[i].codigo, data[i].idInventario);
            $("#item").append(o);

        }

        $("#item").trigger('change');
    }

    function cancelar() {
        bootbox.confirm("@SharedLocalizer["confirmCancelar"]", function (result) {
            if (result)
                window.location.href = "@Url.Action("ListarOrdenes")";

        });
    }

    function guardarCambios() {

        if(validarForm())
            guardarOrden();
    }

    function guardarOrden() {

        $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CrearEditarOrden")',
            data: crearModelo(),
            success: function (data) {
                if (lineasEliminadas.length > 0)
                    eliminarOrdenDetalle();
                window.location.href = "@Url.Action("ListarOrdenes")";
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
        });

    }

    function eliminarOrdenDetalle() {


        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("EliminarOrdenDetalle", new { id = Model.Id })',
            data: { viewModel: lineasEliminadas },
            success: function (data) {
               // console.log(data);
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function crearModelo() {
        var frmOrden = $('#frmOrden').serializeArray();

        var ordenModel = {
            id: @Model.Id,
            idProveedor: $proveedores.val(),
            fecha: $fecha.val(),
            idUsuario: 1,
            Anulado: frmOrden[1].value,
            IdMoneda: parseInt(frmOrden[4].value),
            observacion: frmOrden[5].value,
            subTotalGrabado: subTotalGravado.toString().replace(".", ","),
            subTotalExcento: subTotal.toString().replace(".", ","),
            totalIva: totalImpuesto.toString().replace(".", ","),
            total: totalOrden.toString().replace(".", ","),
            tipoCambioDolar: '@Model.TipoCambioDolar',
            tipoCambioEuro: '@Model.TipoCambioEuro',
            ordenDetalle: crearModeloDetalle(lineasAgregadas)

        };

        console.log(ordenModel);
        return ordenModel;
    }

    function crearModeloDetalle(model) {

        for (var i = 0; i < model.length; i++) {
            model[i].cantidad = model[i].cantidad.toString().replace(".", ",");
            model[i].precio = model[i].precio.toString().replace(".", ",");
            model[i].subTotalGrabado = model[i].subTotalGrabado.toString().replace(".", ",");
            model[i].subTotalExcento = model[i].subTotalExcento.toString().replace(".", ",");
            model[i].porcIva = model[i].porcIva.toString().replace(".", ",");
            model[i].totalIva = model[i].totalIva.toString().replace(".", ",");
            model[i].total = model[i].total.toString().replace(".", ",");

        }

        return model;
    }

    function validarForm() {
        var frmOrden = $('#frmOrden').serializeArray();

        if (frmOrden[5].value.replace(/ /g, "") === "") {
            $('#observacionValid').attr("hidden", false);
            return false;
        }
        else if (lineas.length <= 0) {
            cargarAlert('@SharedLocalizer["ordenSinDetalle"]');
            return false;
        }

        return true;
    }

    function recuperarPrecio(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.precioBase;
        else if (moneda === 2)
            return data.precioDolar;
        else if (moneda === 3)
            return data.precioEuro;
    }

    function recuperarSubTotal(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.subTotalExcentoBase;
        else if (moneda === 2)
            return data.subTotalExcentoDolar;
        else if (moneda === 3)
            return data.subTotalExcentoEuro;
    }

    function recuperarTotal(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.totalBase;
        else if (moneda === 2)
            return data.totalDolar;
        else if (moneda === 3)
            return data.totalEuro;
    }

    function recuperarIva(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.totalIvabase;
        else if (moneda === 2)
            return data.totalIvadolar;
        else if (moneda === 3)
            return data.totalIvauro;
    }
    function recuperarIs(data) {
        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.totalIsbase;
        else if (moneda === 2)
            return data.totalIsdolar;
        else if (moneda === 3)
            return data.totalIseuro;
    }

    function recalcularPrecio() {

        for (var i = 0; i < lineas.length; i++) {

            lineas[i].precio = getPrecioAlCambioLocal(lineas[i]);
            lineas[i].idMonedaOD = parseInt($('.tipoMoneda').val());
            lineas[i].subTotalExcento = lineas[i].precio * lineas[i].cantidad;
            lineas[i].totalIva = (lineas[i].porcIva / 100) * lineas[i].subTotalExcento;
            lineas[i].total = lineas[i].subTotalExcento + lineas[i].totalIva;
            lineas[i].subTotalGrabado = lineas[i].total;
        }

        if (lineasAgregadas.length > 0)
            for (var i = 0; i < lineasAgregadas.length; i++) {

                lineasAgregadas[i].precio = getPrecioAlCambioLocal(lineasAgregadas[i]);
                lineasAgregadas[i].idMonedaOD = parseInt($('.tipoMoneda').val());
                lineasAgregadas[i].subTotalExcento = lineasAgregadas[i].precio * lineasAgregadas[i].cantidad;
                lineasAgregadas[i].totalIva = (lineasAgregadas[i].porcIva / 100) * lineasAgregadas[i].subTotalExcento;
                lineasAgregadas[i].total = lineasAgregadas[i].subTotalExcento + lineasAgregadas[i].totalIva;
                lineasAgregadas[i].subTotalGrabado = lineasAgregadas[i].total;
            }

        $('#item').trigger('change.select2');
        cargarTabla(lineas);

    }

    function getPrecioAlCambio(item) {

        var moneda = parseInt($('.tipoMoneda').val());

        var dolar = '@Model.TipoCambioDolar';
        dolar = dolar.replace(",", ".");
        dolar = parseFloat(dolar);

        var euro = '@Model.TipoCambioEuro';
        euro = euro.replace(",", ".");
        euro = parseFloat(euro);


        if (moneda === 1 && item.codigoMoneda === 1)
            return item.costoPromedioGeneral;
        else if (moneda === 1 && item.codigoMoneda === 2)
            return item.costoPromedioGeneral * dolar;
        else if (moneda === 1 && item.codigoMoneda === 3)
            return item.costoPromedioGeneral * euro;
        else if (moneda === 2 && item.codigoMoneda === 1)
            return item.costoPromedioGeneral / dolar;
        else if (moneda === 2 && item.codigoMoneda === 2)
            return item.costoPromedioGeneral;
        else if (moneda === 2 && item.codigoMoneda === 3)
            return (item.costoPromedioGeneral * euro) / dolar;
        else if (moneda === 3 && item.codigoMoneda === 1)
            return item.costoPromedioGeneral / euro;
        else if (moneda === 3 && item.codigoMoneda === 2)
            return (item.costoPromedioGeneral * dolar) / euro;
        else if (moneda === 3 && item.codigoMoneda === 3)
            return item.costoPromedioGeneral;

    }

    function getPrecioAlCambioLocal(item) {

        var moneda = parseInt($('.tipoMoneda').val());

        var dolar = '@Model.TipoCambioDolar';
        dolar = dolar.replace(",", ".");
        dolar = parseFloat(dolar);

        var euro = '@Model.TipoCambioEuro';
        euro = euro.replace(",", ".");
        euro = parseFloat(euro);



        if (moneda === 1 && item.idMonedaOD === 1)
            return item.precio;
        else if (moneda === 1 && item.idMonedaOD === 2)
            return item.precio * dolar;
        else if (moneda === 1 && item.idMonedaOD === 3)
            return item.precio * euro;
        else if (moneda === 2 && item.idMonedaOD === 1)
            return item.precio / dolar;
        else if (moneda === 2 && item.idMonedaOD === 2)
            return item.precio;
        else if (moneda === 2 && item.idMonedaOD === 3)
            return (item.precio * euro) / dolar;
        else if (moneda === 3 && item.idMonedaOD === 1)
            return item.precio / euro;
        else if (moneda === 3 && item.idMonedaOD === 2)
            return (item.precio * dolar) / euro;
        else if (moneda === 3 && item.idMonedaOD === 3)
            return item.precio;

    }


</script> 

<style>
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        /* display: none; <- Crashes Chrome on hover */
        -webkit-appearance: none;
        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */
    }

    input[type=number] {
        -moz-appearance: textfield; /* Firefox */
    }
</style>