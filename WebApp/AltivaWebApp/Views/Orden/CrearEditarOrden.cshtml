@model AltivaWebApp.ViewModels.OrdenViewModel
@inject IStringLocalizer<SharedResources> Lb
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "CrearEditarOrden";
    var usuario = ViewData["usuario"] as TbSeUsuario;

    var estado = "";

    if (Model.Anulado)
    {
        estado = "disabled";

    }


    var generarOrden = "";
    if (Model.Id != 0)
    {
        generarOrden = "disabled";
    }

}


@if (Model.Id != 0)
{
    <div class="row">
        <div class="col-md-3"><h3>@Lb["editarOrden"]</h3></div>
        <div class="col-md-offset-8 col-md-1"><button style="font-size:2rem; padding-top:1rem" onclick="crearPdf()" class="btn btn-link"><i class="fas fa-file-pdf"></i>PDF</button></div>
    </div>

}
else
{
    <h3>@Lb["nuevaOrden"]</h3>
}


<hr />

<div class="row">
    @if (Model.Id != 0 && !Model.Anulado)
    {
        <div class="col-md-12 text-right"><button class="btn btn-danger btn-sm" onclick="cambiarEstadoOrden()">@Lb["Anular"]</button></div>
    }
    else if (Model.Id != 0)
    {
        <div class="col-md-12 text-left"> <h4 class="text-danger">@Lb["OrdenAnulada"]</h4></div>
    }
</div>

<div class="row well">
    <div>
        <form id="frmOrden">

            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.Anulado)
            @Html.HiddenFor(x => x.TipoCambioDolar)
            @Html.HiddenFor(x => x.TipoCambioEuro)
            @Html.HiddenFor(x => x.IdUsuario)

            <div class="form-group col-md-2 col-sm-6 col-xs-12">
                <fieldset disabled>
                    <div class="form-group">
                        <label for="fecha">@Lb["Fecha"]:</label>
                        <div class='input-group date' id='fechaPicker'>
                            <input type='text' class="form-control" id="fecha" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="form-group col-md-3 col-sm-6 col-xs-12">
                <label asp-for="IdProveedor" class="control-label">@Lb["Proveedor"]:</label>
                <select class="selectItems form-control" data-live-search="true" id="proveedores">
                    @if (Model.Id == 0)
                    {
                        foreach (var prove in ViewBag.Proveedores)
                        {
                            var nombre = @prove.Nombre + " " + @prove.Apellidos;
                            if (@prove.Nombre == "")
                            {
                                nombre = prove.NombreComercial;
                            }
                            <option value="@prove.IdContacto">@nombre</option>
                        }
                    }
                    else
                    {


                        <option value="@ViewBag.IdContacto">@ViewBag.NombreCompleto</option>


                    }
                </select>
            </div>
            <input hidden id="proveedor" value="@ViewBag.IdContacto" />

            <div class="col-md-2 col-sm-6 col-xs-12">
                <div class="form-group ">
                    <label asp-for="IdMoneda" class="control-label">@Lb["Moneda"]:</label>
                    <select @estado onchange="recalcularPrecio(), deshabilitaTipoCambio()" asp-for="IdMoneda" id="moneda" class="form-control tipoMoneda">
                        <option value="1">@Lb["CRC"]</option>
                        <option value="2">@Lb["USD"]</option>
                        <option value="3">@Lb["EUR"]</option>
                    </select>
                </div>
                <div class="form-group ">
                    <label class="control-label" for="dolar">@Lb["TipoCambio"]</label>
                    <label class="control-label" for="dolar">@Lb["Dolar"]:</label>
                    <input @estado class="form-control moneda" id="dolar" />
                </div>
                <div class="form-group ">
                    <label class="control-label" for="euro">@Lb["Euro"]:</label>
                    <input @estado class="form-control moneda" id="euro" />
                </div>
            </div>
            <div class="form-group col-md-5 col-sm-6 col-xs-12">
                <label asp-for="Observacion" class="control-label">@Lb["Observación"]:</label>
                <textarea @estado asp-for="Observacion" id="txtObservacion" rows="8" maxlength="500" class="form-control">@Model.Observacion</textarea>
                <span hidden id="observacionValid" class="text-danger">@Lb["observacionValid"]</span>
            </div>
        </form>
    </div>

    <br />


    <div class="form-group col-md-4">
        <button @generarOrden class="btn btn-success btnAccion" onclick="validarCompraAutomatica()">@Lb["ordenAutomatica"]</button>
    </div>
    <hr />
    <div class="row">

        <div class="form-group col-md-3 col-sm-3 col-xs-12">
            <label id="lblItem" class="control-label">@Lb["Item"]: <span style="font-size:1.1rem" class="text-info"><a id="lblInfoItem"></a></span></label>
            <select @estado class="form-control selectItems" autofocus id="item"></select>
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-6">
            <label class="control-label">@Lb["Descripción"]:</label>
            <input readonly class="form-control" id="descripcion" />
        </div>

        <div class="form-group col-md-1 col-sm-1 col-xs-6">
            <label class="control-label">@Lb["Cantidad"]:</label>
            <input @estado class="form-control numerico" onkeyup="pasarSigCampo(event,'precio')" type="text" min="0" id="cantidad" />

        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-12">
            <label class="control-label">@Lb["PrecioUnitario"]:</label>
            <input @estado class="form-control moneda" type="text"  onkeyup="pasarSigCampo(event,'descuento')" min="1" id="precio" />
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-12">
            <label class="control-label">@Lb["Descuento"]:</label>
            <input @estado class="form-control numerico" type="text"  onkeyup="pasarSigCampo(event,'guardar')" id="descuento" />
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-12">
            <label class="control-label">@Lb["IVA"]:</label>
            <input class="form-control" readonly type="number" id="iva" />
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-10">
            <label class="control-label">@Lb["SubTotal"]:</label>
            <input class="form-control moneda" readonly type="text" id="subtotal" />
        </div>

        <input class="form-control moneda" readonly type="hidden"  id="totalLinea" />
        <div class="form-group col-md-1 col-sm-1 col-xs-2" style="padding-top: 2.3rem;">
            <button onkeyup="pasarSigCampo(event,'item')" onclick="guardarLinea()" id="guardar" class="btn btn-success"><span><i class="fas fa-save"></i></span></button>
        </div>
    </div>
    <div class="col-md-12 table-responsive">

        <table class="table table-bordered table-striped" id="tblOrdenCompra" style="min-width:900px">
            <thead>
                <tr>
                    <th style="width:15%"><span>@Lb["Item"]</span></th>
                    <th><span>@Lb["Descripción"]</span></th>
                    <th><span>@Lb["Cantidad"]</span></th>
                    <th><span>@Lb["PrecioUnitario"]</span></th>
                    <th><span style="width:2%">@Lb["Descuento"]</span></th>
                    <th><span>@Lb["IVA"]</span></th>
                    <th><span>@Lb["SubTotal"]</span></th>
                    <th hidden><span>@Lb["Total"]</span></th>
                    <th style="width:15%"><span>@Lb["Acción"]</span></th>
                </tr>
            </thead>
            <tbody>
                <tr class="lineaForm">
                  
                </tr>
            </tbody>
        </table>

    </div>
    <div class="col-md-offset-9 col-md-3">
        <form id="frmOrden2">

            <div class="form-group">
                <label class="control-label">@Lb["SubTotal"]</label>
                <input readonly id="subTotal" class="form-control currency" />
            </div>
            <div class="form-group">
                <label class="control-label">@Lb["Descuento"]</label>
                <input readonly id="totalDescuento" class="form-control currency" />
            </div>
            <div class="form-group">
                <label class="control-label">@Lb["Impuesto"]</label>
                <input readonly id="totalImpuesto" class="form-control currency" />
            </div>
            <div class="form-group">
                <label class="control-label">@Lb["Total"]</label>
                <input readonly id="total" class="form-control currency" />
            </div>

        </form>
    </div>

    <br />

</div>
    <div class="row">
        <div class="form-group col-md-3">
            <button @estado class="btn btn-success btnAccion" onclick="guardarCambios()">@Lb["Guardar"]<i class="fas fa-save"></i></button>
            <a onclick="cancelar()" class="btn btn-default">@Lb["Cancelar"]</a>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div id="comentarios">

            </div>
        </div>
    </div>

    <div hidden><input hidden id="formater" class="currency" type="text" /></div>

    <div>
        <!-- Modal Editar -->
        <div class="modal fade" id="modalEditarOrden" aria-labelledby="bodegaIventarioLabel" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">

                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <div class="col-md-6"> <h5 data-translate="editarOrden" class="modal-title" id="bodegaIventarioLabel">@Lb["editarOrden"]</h5></div>
                    </div>
                    <div class="modal-body" id="editar" style="height:300px;">
                        <div class="row">
                            <div class="form-group col-sm-7">
                                <input id="editId" type="hidden" class="form-control" />
                                <input id="editIva" type="hidden" class="form-control" />
                                <input id="nSubTotal" type="hidden" class="form-control" />
                                <div class="form-group col-sm-7">
                                    <label class="control-label">@Lb["Cantidad"]</label>
                                    <input id="editCantidad" class="form-control numerico" style="text-align:right;" onkeyup="pasar(event,'editPrecio')" />
                                    <span hidden id="editCantidadValid" class="text-danger">@Lb["AlertCompraCantidad"]</span>
                                </div>
                                <div class="form-group col-sm-7">
                                    <label class="control-label ">@Lb["PrecioUnitario"]</label>
                                    <input id="editPrecio" class="form-control moneda" onkeyup="pasar(event,'editDescuento')" />
                                    <span hidden id="editPrecioValid" class="text-danger">@Lb["AlertCompraPrecio"]</span>
                                </div>
                                <div class="form-group col-sm-7">
                                    <label class="control-label ">@Lb["Descuento"]</label>
                                    <input id="editDescuento" class="form-control numerico" style="text-align:right;" onkeyup="pasar(event,'btnEditOrden')" />
                                </div>
                            </div>

                        </div>                      
                            <div class="form-group col-sm-7">

                                <button id="btnEditOrden" onclick="editOrden()" class="btn btn-success"><span>@Lb["Guardar"] </span><span><i class="fas fa-save"></i></span></button>

                                <button class="btn btn-default" data-dismiss="modal"><span>@Lb["Cancelar"]</span></button>

                            </div>
                            
                        </div>
                    </div>
            </div>
        </div>
    </div>

    <script src="~/js/comentario.js"></script>
    <script src="~/js/base64ImageCreator.js"></script>

    <script>
    var $anulado = $('#Anulado');
    ///linea
    var $item = $('#item');
    var $descripcion = $('#descripcion');
   // var $('#subtotal') = $('#subtotal');
    //var $("#precio") = $('#precio');
    var $iva = $('#iva');
    var $totalLinea = $('#totalLinea');
    var $cantidad = $('#cantidad');
    var $descuento = $('#descuento');
    var $estado = $('#estado');
    ///general
    var $moneda = $('#moneda');
    var $dolar = $('#dolar');
    var $euro = $('#euro');
    var $proveedores = $('#proveedores');
    var $fecha = $('#fecha');
    var $subTotal = $('#subTotal');
    var $totalImpuesto = $('#totalImpuesto');
    var $totalDescuento = $('#totalDescuento');
    var $total = $('#total');
    var $nSubTotal =$('#nSubTotal');
    //resumen
    var subTotalExcento = 0;
    var subTotalGravado = 0;
    var subTotalNeto = 0;
    var subTotalOrden = 0;
    var totalDescuento = 0;
    var totalImpuesto = 0;
    var totalOrden = 0;
    var editDescuento = 0;
    var editPrecio = 0;

    var ordenDetalleBD = [];
    var lineas = [];
    var items = [];
    var lineasAgregadas = [];
    var lineasEliminadas = [];
    var lineasActualizadas = [];

    var editProveedor = $('#proveedor').val();

    $(document).ready(function () {
          var date = new Date();
        if (@Model.Id != 0) {
            GetComentarios("Orden", @Model.Id);
            date = new Date(formatearFecha());
            $('.tipoMoneda').val('@Model.IdMoneda');
        }
        deshabilitaTipoCambio();
        $descuento.val(0);
        var d = parseFloat('@Model.TipoCambioDolar'.replace(',', '.'));
        var e = parseFloat('@Model.TipoCambioEuro'.replace(',', '.'));
        $dolar.val(d);
        $euro.val(e);

        $('#fechaPicker').datetimepicker({
            defaultDate: date,
            locale: localStorage.getItem("idioma")
        });

        $(".moneda").inputmask('currency', {
            prefix: '',
            rightAlign: true,
            min: 0
        });

        $(".numerico").inputmask({
            'alias': 'decimal',
            rightAlign: false,
        });

        getInventario();


        $('.selectItems').select2({ width: null, language: localStorage.getItem("idioma") });

        $('#item').on('change.select2', function () {

            var itemInfo = getItem($(this).val());
            var monto = getPrecioAlCambio(itemInfo);
            var monto1 = parseFloat(monto);

            $descripcion.val(itemInfo.descripcion);
            $("#precio").val(monto1);
            $cantidad.val(1);
            $iva.val(itemInfo.impuestoVenta);
            setSubTotalLinea();
        });

        $('textarea[data-limit-rows=true]')
            .on('keypress', function (event) {
                var textarea = $(this),
                    text = textarea.val(),
                    numberOfLines = (text.match(/\n/g) || []).length + 1,
                    maxRows = parseInt(textarea.attr('rows'));

                if (event.which === 13 && numberOfLines === maxRows) {
                    return false;
                }
            });

    });

    $('#editCantidad').on('keyup, change, focusout', function () {
        if ($(this).val() < 0 || $(this).val() === "")
            $(this).val(0);

        setSubTotalLinea();
    });

    $('#editPrecio').on('keyup, change, focusout', function () {
        if ($(this).val() < 0 || $(this).val() === "")
            $(this).val(0);

        setSubTotalLinea();

    });

    $('#editDescuento').on('keyup, change, focusout', function () {

        if ($(this).val() < 0 || $(this).val() === "")
            $(this).val(0)

    });

    $cantidad.on('keyup, change, focusout', function () {
        if ($(this).val() < 0 || $(this).val() === "")
            $(this).val(0);

        setSubTotalLinea();
    });

    $("#precio").on('keyup, change, focusout', function () {
        if ($(this).val() < 0 || $(this).val() === "")
            $(this).val(0);

        setSubTotalLinea();

    });

    $descuento.on('keyup, change, focusout', function () {

        if ($(this).val() < 0 || $(this).val() === "")
            $(this).val(0)

    });

    function deshabilitaTipoCambio() {
        if ($('.tipoMoneda').val() != "1") {
            $dolar.attr('disabled', true);
            $euro.attr('disabled', true);
        }
        else {
            $dolar.attr('disabled', false);
            $euro.attr('disabled', false);
        }
    }

    function formatearFecha() {

        return '@Model.Fecha.Month' + "-" + '@Model.Fecha.Day' + "-" + '@Model.Fecha.Year' + " " + '@Model.Fecha.TimeOfDay';

    }
    function cargarModalEditOrden(j)
   {
        $('#editCantidadValid').attr('hidden', true);
        $('#editPrecioValid').attr('hidden', true);
       var arreglo = [];
       if (@Model.Id  === 0)
           arreglo = lineasAgregadas;
       else
           arreglo = lineas;
       
       $('#modalEditarOrden').modal('show');
       for (var i = 0; i < arreglo.length; i++) {
           if (arreglo[i].idInventario == arreglo[j].idInventario && arreglo[i].precio == arreglo[j].precio && arreglo[i].porcDesc == arreglo[j].porcDesc) {

               $('#editId').val(arreglo[i].idInventario);
               $('#editCantidad').val(arreglo[i].cantidad);
               $('#editPrecio').val(parseFloat((arreglo[i].precio)));
               $('#editDescuento').val(arreglo[i].porcDesc);
               $('#editIva').val(arreglo[i].porcIva);
               editDescuento = $('#editDescuento').val();
               editPrecio = $('#editPrecio').inputmask('unmaskedvalue');



           }
       }

    }

    

    function pasarSigCampo(e,id)
    {

	    (e.keyCode)?k=e.keyCode:k=e.which;

	      if(k==13)
	      {
		      if(id=="guardar")
		      {
                 guardarLinea();
              }
              else
              {
                 document.getElementById(id).focus();

		      }
	      }
    }
    function pasar(e,id)
  {

	    (e.keyCode)?k=e.keyCode:k=e.which;

	      if(k==13)
	      {
		      if(id=="btnEditOrden")
		      {
                 editOrden();
              }
              else
              {
                 document.getElementById(id).focus();

		      }
	      }
  }
      function validarmodalEditar() {

        var cantidad = parseFloat($('#editCantidad').val());
        var precio = parseFloat($('#editPrecio').inputmask('unmaskedvalue'));
        var flag = true;
        $('#editCantidadValid').attr('hidden', true);
        $('#editPrecioValid').attr('hidden', true);
        if (cantidad <= 0) {
            $('#editCantidadValid').attr('hidden', false);
            flag = false;
        }
        if (precio <= 0) {
           $('#editPrecioValid').attr('hidden', false);
            flag = false;
        }
       
        return flag;
      }
   function editOrden()
   {
      
       if (validarmodalEditar()) {
           console.log(lineasActualizadas);
           var flag = true;
           for (var i = 0; i < lineas.length; i++) {
               if (lineas[i].idInventario == $('#editId').val() &&
                   parseFloat(lineas[i].precio) == parseFloat(editPrecio) && lineas[i].porcDesc == editDescuento) {
                   setSubTotalLinea();
                   lineas[i].cantidad = parseFloat($("#editCantidad").val());
                   lineas[i].precio = parseFloat($('#editPrecio').inputmask('unmaskedvalue'));
                   lineas[i].subTotalGrabado = calcularSubtotalGrabadoLinea();
                   lineas[i].subTotalExcento = calcularSubtotalExcentoLinea();
                   lineas[i].subTotalNeto = calcularSubtotalNetoLinea();
                   lineas[i].porcIs = 0;
                   lineas[i].totalIs = 0;
                   lineas[i].porcDesc = parseFloat($('#editDescuento').val());                  
                   lineas[i].totalDescuento = calcularTotalDescuentoLinea();
                   lineas[i].totalIva = calcularTotalIvaLinea();
                   lineas[i].total = calcularTotalLinea();
                   if (@Model.Id!= 0)
                   {
                       for (var j = 0; j < lineasActualizadas.length; j++)
                       {
                           if (lineas[i].id == lineasActualizadas[j].id) {
                               lineas[i] = lineasActualizadas[j];
                               flag = false;
                           }
                       }
                       if(flag)
                      lineasActualizadas.push(lineas[i]);

                   }

               }

           }
                      console.log(lineasActualizadas);

           cargarTabla(lineas);
           $('#modalEditarOrden').modal('hide');
       }
   }

    ///calculos de línea
    function setSubTotalLinea() {
        if ($('#modalEditarOrden').hasClass('in')) {
            var precio = parseFloat($('#editPrecio').inputmask('unmaskedvalue'));
            var cantidad = parseFloat($('#editCantidad').val());
        } else {
            var precio = parseFloat($("#precio").inputmask('unmaskedvalue'));
            var cantidad = parseFloat($cantidad.val());
        }
        $('#subtotal').val(cantidad * precio);


    }

    function calcularSubtotalGrabadoLinea() {
        if ($('#modalEditarOrden').hasClass('in')) {
            var iva = parseFloat($('#editIva').val());
        } else
           var iva = parseFloat($iva.val());

        if (iva > 0)
            return parseFloat($('#subtotal').inputmask('unmaskedvalue'));
        else
            return 0;
    }

    function calcularSubtotalExcentoLinea() {
        if ($('#modalEditarOrden').hasClass('in')) {
            var iva = parseFloat($('#editIva').val());
        } else
            var iva = parseFloat($iva.val());

        if (iva === 0)
            return parseFloat($('#subtotal').inputmask('unmaskedvalue'));
        else
            return 0;
    }

    function calcularSubtotalNetoLinea() {

        return parseFloat($('#subtotal').inputmask('unmaskedvalue')) - calcularTotalDescuentoLinea()

    }


    function calcularTotalIvaLinea() {

        if ($('#modalEditarOrden').hasClass('in')) {
            var iva = parseFloat($('#editIva').val());
        } else
            var iva = parseFloat($('#iva').val());
       

        var subTotal = parseFloat($('#subtotal').inputmask('unmaskedvalue')) - calcularTotalDescuentoLinea();
        return (iva / 100) * subTotal;
    }

    function calcularTotalDescuentoLinea() {
          if ($('#modalEditarOrden').hasClass('in')) {
            var desc = parseFloat($('#editDescuento').val());
        } else
            var desc = parseFloat($descuento.val());

        var subTotal = parseFloat($('#subtotal').inputmask('unmaskedvalue'));
        return (desc / 100) * subTotal;

    }
    function calcularTotalLinea() {

        return calcularSubtotalNetoLinea() + calcularTotalIvaLinea();

    }


    function getOrdenDetalle() {
        if(@Model.Id != 0)
        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetOrdenDetalle")',

            success: function (data) {
                
                ordenDetalleBD = JSON.parse(JSON.stringify(data));
                cargarLineas(data);

               },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function cargarLineas(data) {

        for (var i = 0; i < data.length; i++) {
            var model = {
                id: data[i].id,
                idOrden: @Model.Id,
                idInventario: data[i].idInventario,
                nombreInventario: data[i].nombreInventario,
                idMonedaOD: @Model.IdMoneda,
                cantidad: data[i].cantidad,
                precio: recuperarPrecio(data[i]),
                subTotalGrabado: recuperarSubTotalGrabado(data[i]),
                subTotalExcento: recuperarSubTotalExcento(data[i]),
                subTotalNeto: recuperarSubTotalNeto(data[i]),
                porcIva: data[i].porcIva,
                porcDesc: data[i].porcDesc,
                totalDescuento: recuperarTotalDesc(data[i]),
                porcIs: 0,
                totalIs: 0,
                totalIva: recuperarIva(data[i]),
                total: recuperarTotal(data[i])

            };
            lineas.push(model);
        }

        cargarTabla(lineas);

    }
    function guardarLineaAutomatico(data) {

        var cero = true;
        for (var i = 0; i < data.length; i++) {
            $('#item').val(data[i].idInventario);
            $('#item').trigger('change.select2');
            $cantidad.val(data[i].etotal);
            setSubTotalLinea();
            if ($("#precio").inputmask('unmaskedvalue') != 0) {
                cero = false;
                guardarLinea();
            }

           $cantidad.val(1);

        }
        if (cero)
          cargarAlert('@Lb["AlertPreciosCero"]');






    }
    function generarLinea() {
        var model = {
           id: 0,
         idOrden: @Model.Id,
         idInventario: $item.val(),
         nombreInventario: $descripcion.val(),
         idMonedaOD: parseInt($('.tipoMoneda').val()),
         cantidad: parseFloat($cantidad.val()),
         precio: parseFloat($("#precio").inputmask('unmaskedvalue')),
         subTotalGrabado: calcularSubtotalGrabadoLinea(),
         subTotalExcento: calcularSubtotalExcentoLinea(),
         subTotalNeto: calcularSubtotalNetoLinea(),
         porcIva: parseFloat($iva.val()),
         porcIs: 0,
         totalIs: 0,
         porcDesc: parseFloat($descuento.val()),
         totalDescuento: calcularTotalDescuentoLinea(),
         totalIva: calcularTotalIvaLinea(),
         total: calcularTotalLinea()
        };
       lineasAgregadas.push(model);
       lineas.push(model);
       $cantidad.val(1);
       cargarTabla(lineas);
    }
    function guardarLinea() {
        var flag2 = false;
        var pos = 0;

        if ($cantidad.val() <= 0) {
            cargarAlert('@Lb["AlertCompraCantidad"]');
            return;
        }
        if ($("#precio").inputmask('unmaskedvalue') <= 0) {
            cargarAlert('@Lb["AlertCompraPrecio"]');
            return;

        }
        else
        {
          for (var i = 0; i < lineas.length; i++)
          {
            if ($item.val() == lineas[i].idInventario)
            {

                if (lineas[i].precio == parseFloat($("#precio").inputmask('unmaskedvalue')) && lineas[i].porcDesc == parseFloat($descuento.val()) && lineas[i].porcIva == parseFloat($iva.val()))
                {
                    flag2 = true;   
                    pos = i;
                }
            }

            }
            if (flag2) {
                  bootbox.confirm("@Lb["sumarDetalleOrdenValid"]", function (resultado) {
                           if (resultado) {
                               $cantidad.val(parseFloat(lineas[pos].cantidad) + parseFloat($cantidad.val()));
                               lineas[pos].cantidad = $cantidad.val();
                               setSubTotalLinea();
                               lineas[pos].subTotalGrabado = calcularSubtotalGrabadoLinea();
                               lineas[pos].subTotalExcento = calcularSubtotalExcentoLinea();
                               lineas[pos].subTotalNeto = calcularSubtotalNetoLinea();
                               lineas[pos].totalDescuento = calcularTotalDescuentoLinea();
                               lineas[pos].totalIva = calcularTotalIvaLinea();
                               lineas[pos].total = calcularTotalLinea();
                               cargarTabla(lineas);
                               $cantidad.val(1);

                           } 
                     

                  });
            } else {
                generarLinea();
            }
            
        }





    }

    function validarCompraAutomatica() {

        if (lineas.length != 0) {
            bootbox.confirm("@Lb["confirmCompraAutomatica"]", function (resultado) {
                if (resultado) {
                    lineas = [];
                    lineasAgregadas = [];
                    cargarTabla(lineas);

                    generarCompraAutomatica();
                }

            });
        }
        else {

            generarCompraAutomatica();
        }
    }
    function generarCompraAutomatica() {

         var idProveedor = $("#proveedores").val();
          var url = "@Url.Action("GenerarCompraAutomatica", "Orden", new { idProveedor = "__id__" })".replace("__id__", idProveedor);
        lineas[""];

            $.ajax({
            type: "get",
        headers: {
        "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
        },
            url: url,
            dataType:'json',
                success: function (data) {
            guardarLineaAutomatico(data);
            }

            });





    }

    /*El precio de los items debe ser mayor a cero*/

   /* function modificarLinea(id) {
       var pos = id - 1;
      $('#item').val(lineas[pos].idInventario);
      $('#item').trigger('change.select2');
      $cantidad.val(lineas[pos].cantidad);
      lineas[id].porcIva = parseFloat($iva.val());
      $("#precio").val(lineas[pos].precio);
        $estado.val(lineas[pos].id);

    }*/

    function eliminarLinea(_id, idLinea) {

        bootbox.confirm("@Lb["confirmEliminarLinea"]", function (result) {

            if (result) {

                var id = _id - 1;


                if (idLinea != 0)
                    lineasEliminadas.push(lineas[id].id);
                else
                    lineasAgregadas.splice($.inArray(lineas[id], lineasAgregadas), 1);

                lineas.splice(id, 1);


                cargarTabla(lineas);


            }

        });


    }

    function calcularTotales() {

        subTotalExcento = 0;
        subTotalGravado = 0;
        subTotalNeto = 0;
        subTotalOrden = 0;
        totalDescuento = 0;
        totalImpuesto = 0;
        totalOrden = 0;



        for (var i = 0; i < lineas.length; i++) {
            subTotalExcento += parseFloat(lineas[i].subTotalExcento);
            subTotalGravado += parseFloat(lineas[i].subTotalGrabado);
            subTotalNeto += parseFloat(lineas[i].subTotalNeto);
            subTotalOrden += parseFloat(lineas[i].subTotalExcento) + parseFloat(lineas[i].subTotalGrabado);
            totalImpuesto += parseFloat(lineas[i].totalIva);
            totalDescuento += parseFloat(lineas[i].totalDescuento);
            totalOrden += parseFloat(lineas[i].total);
        }
        $subTotal.val(subTotalOrden);
        $totalImpuesto.val(totalImpuesto);
        $totalDescuento.val(totalDescuento);
        $total.val(totalOrden);
    }



    function cargarTabla(data) {
        $('.filasCargadas').remove();

        contadorFila = 0;
        var subtotal = 0;

        for (var i = 0; i < data.length; i++) {
            contadorFila++;

            if (data[i].porcIva > 0)
                subtotal = data[i].subTotalGrabado;
            else
                subtotal = data[i].subTotalExcento;

            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '"><td style="padding-top:2rem;">' + getItem(data[i].idInventario).codigo + '</td>'
                + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" value="' + data[i].nombreInventario + '"/></td>'
                + '<td style="padding-top:2rem;">' + data[i].cantidad + ' </td>'
                + '<td style="padding-top:2rem; width:12rem;"><input  style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].precio + '"/></td>'
                + '<td style="padding-top:2rem;"><input  style=" width:5rem;border:0; background-color : #F7F7F7"  value="' + data[i].porcDesc + '"/></td>'
                + '<td style="padding-top:2rem; "><input style="width:6rem; border:0; background-color : #F7F7F7"  value="' + data[i].porcIva + '%"/></td>'
                + '<td style="padding-top:2rem; width:12rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + subtotal + '"/></td>'
                + '<td><button @estado class="btn btn-link" value="' + contadorFila + '" onclick="cargarModalEditOrden('+i+')" ><i class="fas fa-edit"></i></button><button @estado class="btn btn-link" value="' + contadorFila + '" onclick="eliminarLinea(value, ' + data[i].id + ')" ><i class="fas fa-trash"></i></button></td></tr>';




            $('.lineaForm').before(body);

        }

        calcularTotales();
        var simbolo = "₡";
        if (parseInt($('.tipoMoneda').val()) === 2)
            simbolo = "$";
        else if (parseInt($('.tipoMoneda').val()) === 3)
            simbolo = "€";

        $(".currency").inputmask('currency', {
            prefix: simbolo,
            rightAlign: true
        });



    }

    function getInventario() {

         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetAllInventario", "Inventario")',
             success: function (data) {

                 //for (var i = 0; i < data.length; i++) {
                 //    if (!data[i].inactiva)
                 //        items.push(data[i]);
                 //}
                 items = data;

                 cargarItems(items);
                 getOrdenDetalle();
               },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function getItem(id) {
        for (var i = 0; i < items.length; i++) {
            if (items[i].idInventario == parseInt(id))
                return items[i];
        }
    }

    function cargarItems(data) {
        for (var i = 0; i < data.length; i++) {
            var o = new Option(data[i].codigo, data[i].idInventario);
            $("#item").append(o);


        }

        $("#item").trigger('change');
    }

    function cancelar() {
        bootbox.confirm("@Lb["confirmCancelar"]", function (result) {
            if (result)
                window.location.href = "@Url.Action("ListarOrdenes")";

        });
    }



    function guardarCambios() {

        if(validarForm())
            guardarOrden();
    }

    function guardarOrden() {
   
        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("CrearEditarOrden")',
            data: { viewModel: crearModelo(), model2: crearModelo2() },
            success: function (data) {
                if (lineasEliminadas.length > 0)
                    eliminarOrdenDetalle();
                window.location.href = "@Url.Action("ListarOrdenes")";
               },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
        });

    }

    function cambiarEstadoOrden() {
        bootbox.prompt({
            title: "@Lb["confirmAnularOrden"]",
            message: '<p>@Lb["Justificación"]</p>',
            inputType: 'textarea',
            callback: function (result) {
                if (result != null) {

                    if (result.replace(/ /g, "") != "") {


                    $.ajax({
                        type: "get",
                        headers: {
                            "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                        },
                        dataType: "json",
                        url: '@Url.Action("CambiarEstadoOrden", new { id = Model.Id })',
                        success: function (data) {
                            setMensajeFromOut(result);
                            cargarAlert('@Lb["OrdenAnulada"]');
                            window.location.href = "@Url.Action("ListarOrdenes")";

                        },
                        error: function (err, scnd) {
                            cargarAlert('@Lb["errorGeneral"]');
                            console.log(err.statusText);
                        }
                    });

                }
                else
                    cargarAlert('@Lb["JustificacionInvalida"]');
                }

            }
        });
    }

    function eliminarOrdenDetalle() {


        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("EliminarOrdenDetalle", new { id = Model.Id })',
            data: { viewModel: lineasEliminadas },
            success: function (data) {
               },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function crearModelo() {

        var ordenModel = {
            id: @Model.Id,
            idProveedor: $proveedores.val(),
            fecha: $('#fecha').val(),
            idUsuario: 1,
            Anulado: '@Model.Anulado',
            IdMoneda: parseInt($('.tipoMoneda').val()),
            observacion: $('#txtObservacion').val(),
            subTotalGrabado: subTotalGravado.toString().replace(".", ","),
            subTotalExcento: subTotalExcento.toString().replace(".", ","),
            subTotalNeto: subTotalNeto.toString().replace(".", ","),
            totalIva: totalImpuesto.toString().replace(".", ","),
            totalDescuento: totalDescuento.toString().replace(".", ","),
            total: totalOrden.toString().replace(".", ","),
            tipoCambioDolar: $('#dolar').val().replace(".", ","),
            tipoCambioEuro: $('#euro').val().replace(".", ","),
            ordenDetalle: crearModeloDetalle(lineasAgregadas)

        };

      
        return ordenModel;
    }


    function crearModeloDetalle(model) {

        for (var i = 0; i < model.length; i++) {
            model[i].cantidad = model[i].cantidad.toString().replace(".", ",");
            model[i].precio = model[i].precio.toString().replace(".", ",");
            model[i].subTotalGrabado = model[i].subTotalGrabado.toString().replace(".", ",");
            model[i].subTotalExcento = model[i].subTotalExcento.toString().replace(".", ",");
            model[i].subTotalNeto = model[i].subTotalNeto.toString().replace(".", ",");
            model[i].porcIva = model[i].porcIva.toString().replace(".", ",");
            model[i].totalIva = model[i].totalIva.toString().replace(".", ",");
            model[i].porcDesc = model[i].porcDesc.toString().replace(".", ",");
            model[i].totalDescuento = model[i].totalDescuento.toString().replace(".", ",");
            model[i].total = model[i].total.toString().replace(".", ",");

        }

        return model;
    }
     function crearModelo2() {
         var model = lineasActualizadas;
         for (var i = 0; i < lineasActualizadas.length; i++) {
            model[i].cantidad = lineasActualizadas[i].cantidad.toString().replace(".", ",");
            model[i].precio = lineasActualizadas[i].precio.toString().replace(".", ",");
            model[i].subTotalGrabado = lineasActualizadas[i].subTotalGrabado.toString().replace(".", ",");
            model[i].subTotalExcento = lineasActualizadas[i].subTotalExcento.toString().replace(".", ",");
            model[i].subTotalNeto = lineasActualizadas[i].subTotalNeto.toString().replace(".", ",");
            model[i].totalIva = lineasActualizadas[i].totalIva.toString().replace(".", ",");
            model[i].totalDescuento = lineasActualizadas[i].totalDescuento.toString().replace(".", ",");
            model[i].total = lineasActualizadas[i].total.toString().replace(".", ",");

        }

        return model;
    }

    function validarForm() {
        //var frmOrden = $('#frmOrden').serializeArray();

        if ($('#txtObservacion').val().replace(/ /g, "") === "") {
            $('#observacionValid').attr("hidden", false);
            return false;
        }
        else if (lineas.length <= 0) {
            cargarAlert('@Lb["ordenSinDetalle"]');
            return false;
        }

        return true;
    }

    function recuperarPrecio(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.precioBase;
        else if (moneda === 2)
            return data.precioDolar;
        else if (moneda === 3)
            return data.precioEuro;
    }

    function recuperarSubTotalExcento(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.subTotalExcentoBase;
        else if (moneda === 2)
            return data.subTotalExcentoDolar;
        else if (moneda === 3)
            return data.subTotalExcentoEuro;
    }

    function recuperarSubTotalGrabado(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.subTotalGrabadoBase;
        else if (moneda === 2)
            return data.subTotalGrabadoDolar;
        else if (moneda === 3)
            return data.subTotalGrabadoEuro;
    }

    function recuperarSubTotalNeto(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.subTotalNetoBase;
        else if (moneda === 2)
            return data.subTotalNetoDolar;
        else if (moneda === 3)
            return data.subTotalNetoEuro;
    }

    function recuperarTotal(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.totalBase;
        else if (moneda === 2)
            return data.totalDolar;
        else if (moneda === 3)
            return data.totalEuro;
    }

    function recuperarIva(data) {

        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.totalIvabase;
        else if (moneda === 2)
            return data.totalIvadolar;
        else if (moneda === 3)
            return data.totalIvaeuro;
    }
    function recuperarIs(data) {
        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.totalIsbase;
        else if (moneda === 2)
            return data.totalIsdolar;
        else if (moneda === 3)
            return data.totalIseuro;
    }

    function recuperarTotalDesc(data) {
        var moneda = parseInt($('.tipoMoneda').val());

        if (moneda === 1)
            return data.totalDescuentoBase;
        else if (moneda === 2)
            return data.totalDescuentoDolar;
        else if (moneda === 3)
            return data.totalDescuentoEuro;
    }

    function recalcularPrecio() {

        var subtotal = 0;

        for (var i = 0; i < lineas.length; i++) {

            lineas[i].precio = getPrecioAlCambioLocal(lineas[i]);
            lineas[i].idMonedaOD = parseInt($('.tipoMoneda').val());

            subtotal = lineas[i].precio * lineas[i].cantidad;



            if (lineas[i].porcIva > 0) {
                lineas[i].subTotalExcento = 0;
                lineas[i].subTotalGrabado = subtotal;
            }
            else {
                lineas[i].subTotalExcento = subtotal;
                lineas[i].subTotalGrabado = 0;
            }
            lineas[i].totalDescuento = (lineas[i].porcDesc / 100) * subtotal;
            lineas[i].subTotalNeto = subtotal - lineas[i].totalDescuento
            lineas[i].totalIva = (lineas[i].porcIva / 100) * lineas[i].subTotalNeto;
            lineas[i].total = lineas[i].subTotalNeto + lineas[i].totalIva;
        }

        if (lineasAgregadas.length > 0)
            for (var i = 0; i < lineasAgregadas.length; i++) {

                lineasAgregadas[i].precio = getPrecioAlCambioLocal(lineasAgregadas[i]);
                lineasAgregadas[i].idMonedaOD = parseInt($('.tipoMoneda').val());
                subtotal = lineasAgregadas[i].precio * lineasAgregadas[i].cantidad;

                if (lineasAgregadas[i].porcIva > 0) {
                    lineasAgregadas[i].subTotalExcento = 0;
                    lineasAgregadas[i].subTotalGrabado = subtotal;
                }
                else {
                    lineasAgregadas[i].subTotalExcento = subtotal;
                    lineasAgregadas[i].subTotalGrabado = 0;
                }
                lineasAgregadas[i].totalDescuento = (lineasAgregadas[i].porcDesc / 100) * subtotal;
                lineasAgregadas[i].subTotalNeto = subtotal - lineasAgregadas[i].totalDescuento
                lineasAgregadas[i].totalIva = (lineasAgregadas[i].porcIva / 100) * lineasAgregadas[i].subTotalNeto;
                lineasAgregadas[i].total = lineasAgregadas[i].subTotalNeto + lineasAgregadas[i].totalIva;
            }

        $('#item').trigger('change.select2');
        cargarTabla(lineas);

    }

    function getPrecioAlCambio(item) {

        var moneda = parseInt($('.tipoMoneda').val());

        var dolar = parseFloat($dolar.val());

        var euro = parseFloat($euro.val());




        if (moneda === 1 && item.codigoMoneda === 1)
            return item.costoPromedioGeneral;
        else if (moneda === 1 && item.codigoMoneda === 2)
            return item.costoPromedioGeneral * dolar;
        else if (moneda === 1 && item.codigoMoneda === 3)
            return item.costoPromedioGeneral * euro;
        else if (moneda === 2 && item.codigoMoneda === 1)
            return item.costoPromedioGeneral / dolar;
        else if (moneda === 2 && item.codigoMoneda === 2)
            return item.costoPromedioGeneral;
        else if (moneda === 2 && item.codigoMoneda === 3)
            return (item.costoPromedioGeneral * euro) / dolar;
        else if (moneda === 3 && item.codigoMoneda === 1)
            return item.costoPromedioGeneral / euro;
        else if (moneda === 3 && item.codigoMoneda === 2)
            return (item.costoPromedioGeneral * dolar) / euro;
        else if (moneda === 3 && item.codigoMoneda === 3)
            return item.costoPromedioGeneral;

    }

    function getPrecioAlCambioLocal(item) {

        var moneda = parseInt($('.tipoMoneda').val());

        var dolar = parseFloat($dolar.val());

        var euro = parseFloat($euro.val());



        if (moneda === 1 && item.idMonedaOD === 1)
            return item.precio;
        else if (moneda === 1 && item.idMonedaOD === 2)
            return item.precio * dolar;
        else if (moneda === 1 && item.idMonedaOD === 3)
            return item.precio * euro;
        else if (moneda === 2 && item.idMonedaOD === 1)
            return item.precio / dolar;
        else if (moneda === 2 && item.idMonedaOD === 2)
            return item.precio;
        else if (moneda === 2 && item.idMonedaOD === 3)
            return (item.precio * euro) / dolar;
        else if (moneda === 3 && item.idMonedaOD === 1)
            return item.precio / euro;
        else if (moneda === 3 && item.idMonedaOD === 2)
            return (item.precio * dolar) / euro;
        else if (moneda === 3 && item.idMonedaOD === 3)
            return item.precio;

    }


    function crearPdf() {

        generate_cutomPDF(crearModeloPDF());

    }

    function crearModeloPDF() {

        var empresaModel = JSON.parse(localStorage.getItem("empresaInfo"));

        var modelo = {
            empresa: {
                nombre: localStorage.getItem("empresa"),
                telefono: empresaModel.tel,
                correo: empresaModel.correo,
                cedJuridica: empresaModel.ced,
                logo: getImgFromUrl(localStorage.getItem("fotoEmpresa")),
                nombreTitulo: "@Lb["Nombre"]:",
                telTitulo: "@Lb["Telefonos"]:",
                correoTitulo: "@Lb["Correo"]:",
                cedTitulo: getTittulos().cedJuridica
            },
            subtotal: formatTotales().subtotal,
            descuento: formatTotales().desc,
            impuesto: formatTotales().imp,
            total: formatTotales().total,
            nombreDoc: '@Lb["OrdenCompra"] ' + '#@Model.Id',
            nombreDescarga: '@Lb["orden_compra"]_' + @Model.Id + '.pdf',
            columnas: {
                item: "Item",
                descripcion: getTittulos().desc,
                cantidad: "@Lb["Cantidad"]",
                precioUnid: "@Lb["PrecioUnid"]",
                descuento: "@Lb["Descuento"]",
                iva: "@Lb["IVA"]",
                subtotal: "@Lb["SubTotal"]"
            },
            filas: crearFilasPdf(),
            resumen: {
                subtotal: "@Lb["SubTotal"]",
                descuento: "@Lb["Descuento"]",
                impuesto: "@Lb["Impuesto"]",
                total: "@Lb["Total"]",
                autorizado: "@Lb["Autorizado por"]:______________________"
            },
            proveedor: $('#proveedores option:selected').text(),
            fecha: $('#fecha').val(),
            descripcion: getDescripcion(),
            proveedorTitulo: "@Lb["Proveedor"]:",
            observacionTitulo: "@Lb["Observaciones"]:",
            fechaTitulo: "@Lb["Fecha"]:",
            estado: getEstado(),
            tipoCambio: '@Lb["Tipo de cambio"]',
            dolarTitulo: '@Lb["Dolar"]',
            euroTitulo: '@Lb["Euro"]',
            dolar: $('#dolar').val().toString(),
            euro: $('#euro').val().toString(),
            monedaTitulo: '@Lb["Moneda"]',
            moneda: $('#moneda option:selected').text()
        };

        return modelo;

    }

    function getEstado() {
        if ('@Model.Anulado' === "True")
            return "@Lb["OrdenAnulada"]";
        else
            return "";
    }

    function getTittulos() {
        var idioma = localStorage.getItem("idioma");
        if (idioma === "es")
            return {
                desc: "Descripción:",
                cedJuridica: "Cédula Jurídica:"
            };
        else
            return {
                desc: "Description:",
                cedJuridica: "Legal Number:"
            };
    }

    function getDescripcion() {
        var d = $('#txtObservacion').val();
        var desc = d.match(/.{1,125}/g).join("\n");
        return desc;

    }

    function crearFilasPdf() {

        var row = [];
        for (var i = 0; i < lineas.length; i++) {

            var subtotal = 0;

            if (lineas[i].porcIva > 0)
                subtotal = lineas[i].subTotalGrabado;
            else
                subtotal = lineas[i].subTotalExcento;

            var model = {
                item: getItem(lineas[i].idInventario).codigo,
                descripcion: lineas[i].nombreInventario,
                cantidad: lineas[i].cantidad,
                precioUnid: formatearMoneda(lineas[i].precio),
                descuento: lineas[i].porcDesc,
                iva: lineas[i].porcIva,
                subtotal: formatearMoneda(subtotal)
            };

            row.push(model);
        }
        return row;
    }

    function formatearMoneda(val) {
        $('#formater').val(val);
        return $('#formater').val().replace("₡", "");
    }


    //var $subTotal = $('#subTotal');
    //var $totalImpuesto = $('#totalImpuesto');
    //var $totalDescuento = $('#totalDescuento');
    //var $total = $('#total');

    function formatTotales() {
        var tam = 0;

        var subtotal = "";
        var imp = "";
        var desc = "";


        tam = $total.val().length;

        for (var i = $subTotal.val().length; i < tam; i++) {
            subtotal += "\ \ ";
        }
        for (var i = $totalImpuesto.val().length; i < tam; i++) {
            imp += "\ \ ";
        }
        for (var i = $totalDescuento.val().length; i < tam; i++) {
            desc += "\ \ ";
        }




        return {
            subtotal: subtotal + $subTotal.val().replace("₡", ""),
            imp: imp + $totalImpuesto.val().replace("₡", ""),
            desc: desc + $totalDescuento.val().replace("₡", ""),
            total: $total.val().replace("₡", "")
        }

    }


    </script>

    <script src="~/lib/vendors/jsPDF/OC.js"></script>

    <style>
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            /* display: none; <- Crashes Chrome on hover */
            -webkit-appearance: none;
            margin: 0; /* <-- Apparently some margin are still there even though it's hidden */
        }

        input[type=number] {
            -moz-appearance: textfield; /* Firefox */
        }
    </style>
