@model TipoClienteViewModel

@inject IStringLocalizer<SharedResources> Lb


@{
    var edita = "";

    if (Model.Id != 0)
    {
        edita = "hidden";
    }
}
<div class="enter">
<div class="row">
    <div class="col-md-6">
        @if (Model.Id != 0)
        {
            <h4 class="modal-title" id="familiaModallabel">@Lb["Editar"] @Lb["TipoCliente"]</h4>
        }
        else
        {
            <h4 class="modal-title" id="familiaModallabel">@Lb["Nuevo"] @Lb["TipoCliente"]</h4>
        }

    </div>
    <div class="col-md-6">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
</div>

<hr />

<div class="row">
    @if (Model.Id == 0)
    {
        <div class="form-group col-md-12 col-sm-12 col-xs-12">
            <label class="radio-inline" for="tipoC"><input type="radio" name="radioTipoC" onchange="ocultarCamposTipoC(1)" checked="checked" value="1" id="tipoC" />@Lb["tipo"]</label>
            <label class="radio-inline" for="familiaC"><input type="radio" name="radioTipoC" onchange="ocultarCamposTipoC(2)" value="2" id="familiaC" />@Lb["familia"]</label>
            <label class="radio-inline" for="subFamiliaC"><input type="radio" name="radioTipoC" onchange="ocultarCamposTipoC(3)" value="3" id="subFamiliaC" />@Lb["subFamilias"]</label>
        </div>
    }

    <div class="col-md-12 col-sm-12 col-xs-12">
        <form id="frmTipoCliente">
            @Html.HiddenFor(x => x.Id, new { @id = "tcId" })
            @Html.HiddenFor(x => x.IdUsuario, new { @id = "tcIdUsuario" })
            @Html.HiddenFor(x => x.FechaCreacion, new { @id = "tcFechaCreacion" })


            <div @edita>
                <div hidden id="tipoCContainer" class="form-group">
                    <label class="control-label">@Lb["tipo"]:</label>
                    <select id="tipoCSelect" class="form-control"></select>
                </div>

                <div hidden id="familiaCContainer" class="form-group">
                    <label id="idPadreLabel" for="IdPadre" class="control-label"></label>
                    <select asp-for="IdPadre" class="form-control"><option value=""></option></select>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="Nombre" class="control-label">@Lb["Nombre"]:</label>
                <input asp-for="Nombre" id="tcNombre" class="form-control" />
                <input type="hidden" asp-for="Id" id="tcIdTipoCliente" class="form-control" />
                <span hidden id="tcNombreValid" class="text-danger">@Lb["nombreValid"]</span>
                <span hidden id="nombreExiste" class="text-danger">@Lb["repetidoValid"]</span>
            </div>
            <div class="form-group">

                <label asp-for="Inactivo" id="tcInactivo" class="form-check-label">
                    @Lb["inactivo"] <input type="checkbox" class="form-check-input" asp-for="Inactivo" />
                </label>

            </div>

        </form>
    </div>
</div>

<div class="form-group row">
    <div class="col-md-2 col-sm-2 col-xs-4">
        <button onclick="validarForm()" class="btn btn-success"><span>@Lb["Guardar"]</span> <span><i class="fas fa-save"></i></span></button>
    </div>
    <div class="col-md-2 col-sm-2 col-xs-4">
        <button class="btn btn-default" data-dismiss="modal">@Lb["Cancelar"]</button>
    </div>
</div>
</div>
<script>

    var tipoClientesCrear = [];

    $(document).ready(function () {

        getTipoClientesCrear();

    });
 
      $(".enter").keypress(function(e) {
       if(e.which == 13) {
           validarForm();
            return false;
       }
    });

    function ocultarCamposTipoC(key) {

        $('#IdPadre')
            .find('option')
            .remove();


        if (key === 1) {
            $("#tipoC").prop("checked", true);
            $('#tipoCContainer').prop('hidden', true);
            $('#familiaCContainer').prop('hidden', true);
        }
        else if (key === 2) {
            $("#familiaC").prop("checked", true);
            $('#familiaCContainer').prop('hidden', false);
            $('#tipoCContainer').prop('hidden', true);
            $('#idPadreLabel').text('@Lb["Tipo"]:');


            cargarPadreItems(0, @ViewBag.idTipo);

        } else {

            $("#subFamiliaC").prop("checked", true);
            $('#tipoCContainer').prop('hidden', false);
            $('#familiaCContainer').prop('hidden', false);
            $('#idPadreLabel').text('@Lb["Familia"]:');

            cargarPadreItems(@ViewBag.idTipo, @ViewBag.idFamilia);
        }
    }





    /////////Tipos de Clientes

    function guardarTipoCliente(flag) {

            if (flag) {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("CrearEditarTipoCliente", "TipoCliente")',
                    data: $('#frmTipoCliente').serialize(),
                    success: function (data) {
                        var tipo = $("input[name='radioTipoC']:checked").val();
                        var idDato = data.tipoC.id;
                        window.location.href = "@Url.Action("ListarTipoCLientes", "TipoCliente")";
                        $('#modalTipoCliente').modal('hide');

                    },
                    error: function (err, scnd) {
                        cargarAlert('@Lb["errorGeneral"]');
                    }

                });
            }

    }


    function getTipoClientesCrear() {

         $.ajax({
            type: "get",
            dataType: "json",
            url: '@Url.Action("GetTiposClientesCrear", "TipoCliente")',
            success: function (data) {


                tipoClientesCrear = data;
                setTipoClientesSelect(@ViewBag.idTipo);
                ocultarCamposTipoC(@ViewBag.tipoC);
                //cargarTipoCLientes(data);

            },
            error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
            }
         });
    }

    function setTipoClientesSelect(id) {

        $('#tipoCSelect')
            .find('option')
            .remove();

        for (var i = 0; i < tipoClientesCrear.length; i++) {
            if (tipoClientesCrear[i].idPadre === 0) {
                var o = new Option(tipoClientesCrear[i].nombre, tipoClientesCrear[i].id);
                if (tipoClientesCrear[i].id === id) {
                    $(o).attr('selected', true);
                }
                $("#tipoCSelect").append(o);
            }
        }

        //cargarPadreItems(parseInt($('#tipoCSelect').val()));

    }

    $('#tipoCSelect').change(function () {

        cargarPadreItems(parseInt(this.value), 0);

    });

    function cargarPadreItems(idTipo, id) {


        for (var i = 0; i < tipoClientesCrear.length; i++) {
            if (tipoClientesCrear[i].idPadre === idTipo) {
                var o = new Option(tipoClientesCrear[i].nombre, tipoClientesCrear[i].id);

                if (tipoClientesCrear[i].id === id) {
                    $(o).attr('selected', true);
                }

                $("#IdPadre").append(o);
            }
        }

        }
     function validarForm() {

      
                $.ajax({
                    type: "GET",
                    dataType: "json",
                    url: '@Url.Action("GetTipoClientes")',
                    data: { nombre: $("#tcNombre").val() , id: $("#tcIdTipoCliente").val()},
                    success: function (data) {

                        if (data.data == true) {
                            $('#tcNombreValid').attr('hidden', true);
                            $('#nombreExiste').attr('hidden', false);
                            guardarTipoCliente(false);
                        }
                        else
                        {    var flag = true;
                             if ($('#tcNombre').val().replace(/ /g, "") === "") {
                                 $('#nombreExiste').attr('hidden', true);
                                    flag = false;
                                  $('#tcNombreValid').prop('hidden', false);
                             }
                             guardarTipoCliente(flag);
                        }

                    },
                    error: function (err, scnd) {
                        cargarAlert('@Lb["errorGeneral"]');
                        console.log(err.statusText);
                    }
                });


        }

</script>

