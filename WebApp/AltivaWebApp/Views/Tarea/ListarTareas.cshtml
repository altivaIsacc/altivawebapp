@model AltivaWebApp.Domains.TbFdConfiguracionFiltros
@inject IStringLocalizer<SharedResources> Lb
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }

}

<style>

    .red {
        background: red;
    }
</style>

<div class="row">
    <div class="col-md-2 col-sm-4 col-xs-4">
        <h3>@Lb["Tareas"]</h3>
    </div>
    <div class="col-md-2 col-sm-6 col-xs-6" style="margin-left:1rem; padding-top:0.7rem">
        <button class=" btn btn-primary " id="btnNuevaTarea"><span>@Lb["Agregar"] <i class="fas fa-plus-circle "></i></span></button>
    </div>
    <div class="col-md-2 col-sm-12 col-xs-12" style="float:right; ">
        <label for="reportes">@Lb["Reportes"]:</label>
        <select class="form-control" id="reportes">
            <option selected="selected" value="0">@Lb["seleccione"]</option>
            <option value="1">@Lb["Costo"]*</option>
            <option value="2">@Lb["Rendimiento"]*</option>
        </select>
    </div>
</div>
<hr />
<div class="row">

    <div class="form-group col-md-4 col-sm-6 col-xs-12">
        <label>@Lb["buscarPorTitulo"]:</label>
        <input type="text" id="filtroByTitulo" class="form-control" value="" />
    </div>

</div>



<div class="row">

    <div class="col-md-1 col-sm-4 col-xs-12">
        <label>@Lb["Filtros"]:</label>
        <input type="checkbox" id="fijar" asp-for="Estado" />
    </div>


    <div class="col-md-2 col-sm-6 col-xs-12">
        <label style="padding-top: 0.2rem">@Lb["asignados"]:</label>
        <select class="selectpicker form-control selectFiltro" data-live-search="true" id="filtroAsignado" asp-for="IdUsuario">
            <option value="0" selected>@Lb["seleccione"]</option>
            <option value="na">@Lb["Not"] @Lb["asignados"]</option>
            @foreach (var asignados in ViewData["Asignados"] as IList<TbSeUsuario>)
            {
                <option value="@asignados.Id">@asignados.Nombre</option>
            }
        </select>
    </div>
    <div class="col-md-2 col-sm-6 col-xs-12">
        <label style="padding-top: 0.2rem">@Lb["Contactos"]:</label>
        <select class="selectpicker form-control selectFiltro" data-live-search="true" id="filtroContacto" asp-for="IdContacto">
            <option value="0" selected>@Lb["seleccione"]</option>
            @foreach (var contactos in ViewData["contactos"] as IList<TbCrContacto>)
            {
                @if (contactos.Persona == true)
                {
                    <option value="@contactos.IdContacto">@contactos.Nombre</option>
                }
                else
                {
                    <option value="@contactos.IdContacto">@contactos.NombreComercial</option>
                }
            }
        </select>
    </div>
    <div class="col-md-2 col-sm-4 col-xs-12">
        <label style="padding-top: 0.2rem">@Lb["Estados"]:</label>
        <select class=" form-control selectFiltro" data-live-search="true" id="filtroEstados" asp-for="IdEstado">
            <option value="0" selected>@Lb["seleccione"]</option>
            @foreach (var estados in ViewData["estados"] as IList<TbFdTareaEstado>)
            {
                @if (estados.Activo == true)
                {
                    <option value="@estados.Id" style="background:@estados.Color;color:black;">@estados.Titulo</option>
                }
            }
        </select>
    </div>
    <div class="col-md-2 col-sm-4 col-xs-12">
        <label style="padding-top: 0.2rem">@Lb["Tipos"]:</label>
        <select class="  form-control selectFiltro" data-live-search="true" id="filtroTipos" asp-for="IdTipo">
            <option value="0" selected>@Lb["seleccione"]</option>
            @foreach (var tipos in ViewData["tipos"] as IList<TbFdTareaTipo>)
            {
                @if (tipos.Activo == true)
                {
                    <option value="@tipos.Id" style="background:@tipos.Color;color:black;">@tipos.Titulo</option>

                }
            }
        </select>
    </div>



    <div class="col-md-2 col-sm-4 col-xs-12">

        <label>@Lb["FiltroFecha"]:</label>
        <form id="frmFecha">
            <fieldset>
                <div class="control-group">
                    <div class="controls">
                        <div class="input-prepend input-group">
                            <span class="add-on input-group-addon"><i class="fas fa-calendar"></i></span>
                            <input type="text" style="width: 200px" name="filtroFecha" id="filtroFecha" class="form-control" />
                        </div>
                    </div>
                </div>
            </fieldset>
        </form>
    </div>

</div>



<br>

<div class="table-responsive">
    <table class="table TablaTareas table-bordered"  style="width:100%" id="TablaTareas">
        <thead>
            <tr>

                <th style="width:10%">
                    <span>@Lb["Prioridad"]</span>
                </th>
                <th style="width:15%">
                    <span>@Lb["Título"]</span>
                </th>
                <th style="width:10%">
                    <span>@Lb["tipoTarea"]</span>
                </th>
                <th style="width:10%">
                    <span>@Lb["estadoTarea"]</span>
                </th>
                <th style="width:15%">
                    <span>@Lb["Contacto"]</span>
                </th>
                <th style="width:8%">
                    <span>@Lb["Limite"]</span>
                </th>
                <th hidden>
                    @Lb["Asignado"]
                </th>
                <th hidden>
                   @Lb["Descripción"]
                </th>
                <th hidden>
                    @Lb["diasEstimados"]
                </th>
                <th hidden>
                    @Lb["diasReales"]
                </th>
                <th hidden>
                    @Lb["costoEstimado"]
                </th>
                <th hidden>
                    @Lb["costoReal"]
                </th>
                <th style="width:8%">
                    <span>@Lb["Inicio"]</span>
                </th>
                <th style="width:8%">
                    <span>@Lb["Final"]</span>
                </th>
                <th style="width:8%">
                    <span>@SharedLocalizer["Acción"]</span>
                </th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<script src="~/js/comentario.js"></script>

<!--  editado por lenin -->
<div class="modal fade" role="dialog" id="nuevaTarea">
    <div class="modal-dialog modal-dialog-centered big">
        <div class="modal-content">
        
            <div class="modal-body" id="infoAgregarTarea">

            </div>

        </div>
    </div>

</div>

<script>
    
    var tareas = [];
    var TareasMostrar = [];
    var hasta;
    var desde;
    var TablaTareas;


 
    $(document).ready(function () {

        $('#filtroFecha').daterangepicker({
            opens: 'left',

            "locale": {
                 format: "@Lb["formatoFecha"]",
                "separator": " - ",
                "applyLabel": "@Lb["Aplicar"]",
                "cancelLabel": "@Lb["Cancelar"]",
                "fromLabel": "@Lb["DE"]",
                "toLabel": "@Lb["Hasta"]",
                "customRangeLabel": "Custom",
                "daysOfWeek": [
                    "@Lb["Dom"]",
                    "@Lb["Lun"]",
                    "@Lb["Mar"]",
                    "@Lb["Mie"]",
                    "@Lb["Jue"]",
                    "@Lb["Vie"]",
                    "@Lb["Sáb"]"
                ],
                "monthNames": [
                    "@Lb["Enero"]",
                    "@Lb["Febrero"]",
                    "@Lb["Marzo"]",
                    "@Lb["Abril"]",
                    "@Lb["Mayo"]",
                    "@Lb["Junio"]",
                    "@Lb["Julio"]",
                    "@Lb["Agosto"]",
                    "@Lb["Septiembre"]",
                    "@Lb["Octubre"]",
                    "@Lb["Noviembre"]",
                    "@Lb["Diciembre"]"
                ],
                "firstDay": 1
            }
                },
            function (start, end, label) {

                desde = start.format('YYYY-MM-DD');
                hasta = end.format('YYYY-MM-DD');
                cargarFiltros();
                //filtroFecha(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'));

            });
    });



  
    //inicializacion
    $(function () {
        cargarTabla();
        $('.selectpicker').selectpicker();
    });





     //recordar filtros 
    $('#fijar').on('change', function () {
        if ($(this).is(':checked')) {
            var IdEstado = parseInt($('#filtroEstados').val());
            var IdTipo = parseInt($('#filtroTipos').val());
            var IdAsignado = parseInt($('#filtroAsignado').val());
            var IdContacto = parseInt($('#filtroContacto').val());
            var ConfiguracionDefiltros = {
                id: null,
                idUsuario: IdAsignado,
                idContacto: IdContacto,
                idEstado: IdEstado,
                idTipo: IdTipo,
                Estado: true
            };
            $.ajax({
                type: "post",
                headers: {
                    "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                },
                url: '@Url.Action("FijarFiltros", "Tarea")',
                data: { domain: ConfiguracionDefiltros },
                success: function (data) {
                    cargarTabla();
                },
                error: function (err, scnd) {
                    console.log(err.statusText);
                }
            });
        } else {
                     var url1 = '@Url.Action("QuitarFiltro", "Tarea", new { idConf = 0})';
            $.ajax({
                type: "Get",
                headers: {
                    "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                },
                url: url1,
                success: function (data) {
                    $('#fijar').prop('checked', false);
                    cargarTabla();
                },
                error: function (err, scnd) {
                    console.log(err.statusText);
                }
            });
        }
    });







    //reportes redireccionar
    $('#reportes').change(function () {
        if ($(this).val() == 1) {
                   var url = '@Url.Action("ReporteCostos", "Tarea")';
            window.location.href = url;



        } else if ($(this).val() == 2) {
               var url = '@Url.Action("ReporteRendimiento", "Tarea")';
            window.location.href = url;

        } else {
            return false;
        }
    });





    //cargar datos de las tareas..
    function cargarDatos(data) {

        var contadorFila = 0;
        var fecha1 = ""
        var fecha = "";
        var dt = null;
        $("#TablaTareas > tbody").remove();
        $('table').append('<tbody></tbody>');
         dt = new Date();
         fecha = +dt.getDate() + "/" + (dt.getMonth()+1) + "/" + dt.getFullYear()+" "+ 0 +0+":"+0+0+":"+0+0;
         fecha1 = +dt.getDate()+"/"+(dt.getMonth()+1)+"/"+dt.getFullYear();
        var color = "";
        var icono = "";
        var icono2 = "";
        var nombre = "";
        for (var i = 0; i < data.length; i++) {

            if (data[i].idContacto !== 0) {
                if (data[i].idContactoNavigation.persona == true) {
                    nombre = data[i].idContactoNavigation.nombre + " " + data[i].idContactoNavigation.apellidos;
                } else {
                    nombre = data[i].idContactoNavigation.nombreComercial;
                }
            }
            else
                nombre = "";

            if (data[i].posicion == 1) {

                icono = "";
            } else {
                icono = "<i class='fas fa-chevron-up'></i>";
            }
            if (recuperarFecha(data[i].fechaLimite) > fecha) {

                color = "";
            } else
                if (recuperarFecha(data[i].fechaLimite) < fecha) {

                    color = "#dc4a46";
                }
                else

                    if (recuperarFechaSinHora(data[i].fechaLimite) == fecha1) {

                        color = "#f3da0b";
                    }
            if (data[i].posicion == data.length) {
                icono2 = "";
            } else {
                icono2 = "<i class='fas fa-chevron-down'>";
            }

                var body = '<tr class="fila' + contadorFila + ' filas">'
                    + '<td><button class="btn btn-link dark" onclick="darPrioridad(' + data[i].id + ')">' + icono + '</button><button class="btn btn-link dark" onclick="quitarPrioridad(' + data[i].id + ')">' + icono2 + '</i></button></td>'
                    + '<td>' + data[i].titulo + '</td>'
                    + '<td ><img style="width:2rem; height: 2rem; border-radius: 1rem; background: ' + data[i].idTipoNavigation.color + ';"><span>  ' + data[i].idTipoNavigation.titulo + '</span></td>'
                    + '<td ><img style="width:2rem; height: 2rem; border-radius: 1rem; background: ' + data[i].idEstadoNavigation.color + ';"><span>' + data[i].idEstadoNavigation.titulo + '</span></td>'
                    + '<td>' + nombre + '</td>'
                    + '<td bgColor=' + color + '>' + recuperarFecha(data[i].fechaLimite) + '</td>'
                    + '<td hidden>' + data[i].idUsuario + ' </td>'
                    + '<td hidden>' + data[i].descripcion + '</td>'
                    + '<td hidden>' + data[i].diasEstimados + '</td>'
                    + '<td hidden>' + data[i].diasReales + '</td>'
                    + '<td hidden>' + data[i].costoEstimado + '</td>'
                    + '<td hidden>' + data[i].costoReal + '</td>'
                    + '<td >' + recuperarFecha(data[i].fechaInicio) + '</td>'
                    + '<td >' + recuperarFecha(data[i].fechaFinal) + '</td>'

                    + '<td>  <button value="' + data[i].id + '" onclick="editarTarea(' + data[i].id + ')" class="btn btn-link btnEditar"><i class="fas fa-edit"></i></button><button value="' + data[i].id + '" onclick="Eliminar(' + data[i].id + ')" class="btn btn-link"> <i class="fas fa-trash"></i></button></td></tr>';
                $('#TablaTareas > tbody').append(body);
                contadorFila++;
            }

        inicializarTabla();

    }





    
    function inicializarTabla() {
         $('#TablaTareas').DataTable().destroy();

        TablaTareas = $('#TablaTareas').DataTable({
            "info": false,
          
            language: {
                "decimal": "",
                "emptyTable": "@Lb["NoDatos"]",
                "info": "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                "infoEmpty": "Mostrando 0 to 0 of 0 Entradas",
                "infoFiltered": "(Filtrado de _MAX_ total entradas)",
                "infoPostFix": "",
                "thousands": ",",
                "lengthMenu": "@Lb["Mostrar"] _MENU_ @Lb["Entradas"]",
                "loadingRecords": "Cargando...",
                "processing": "Procesando...",
                "search": "<i class='fas fa-search'></i>",
                "zeroRecords": "@Lb["sinResultados"]",
                "paginate": {
                    "first": "@Lb["Primero"]",
                    "last": "@Lb["Último"]",
                    "next": "@Lb["Sguiente"]",
                    "previous": "@Lb["Anterior"]"
                }
            },       
        });
    }







    //eliminar tarea..
    function Eliminar(idTarea) {
        bootbox.confirm({

            message: "<h4 class='text-center'><span >@Lb["confirmEliminar"]</span></h4>",
            buttons: {

                confirm: {
                    label: '<i class="fa fa-check"></i> @Lb["Aceptar"]'
                },
                cancel: {
                    label: '<i class="fa fa-times"></i> @Lb["Cancelar"]'
                }
            },
            callback: function (result) {
                if (result) {

                    var url = '@Url.Action("EliminarTarea", "Tarea")';
                    $.ajax({
                        type: "post",
                        headers: {
                            "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                        },
                        url: url,
                        data: { idTarea: idTarea },

                        success: function (data) {
                            cargarTabla();
                        },
                        error: function (err, scnd) {
                            console.log(err.statusText);
                        }
                    });

                } else {
                    return;
                }
            }
        });
    }




    //metodo que llamar ala partial de editar
    function editarTarea(id) {
         var url = '@Url.Action("EditarTarea", "Tarea")';
        $.ajax({
            type: "GET",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            url: url,
            data: { id: id },

              success: function (data) {

                   $('#nuevaTarea').modal('show');
                 //  $('#titleTarea').html('@Lb["modificarTarea"]');
                   $('#infoAgregarTarea').html(data);
                },
                    error: function (err, scnd) {
                        console.log(err.statusText);
                }
            });
    }



    //metodosdarPrioridad
    function darPrioridad(idTarea) {
            var url = '@Url.Action("DarPrioridad", "Tarea")';
                $.ajax({
                    type: "get",
                    headers: {
                        "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                    },
                    url: url,
                    data: { IdTarea: idTarea },

                    success: function (data) {
                        cargarTabla();
                        },
                    error: function (err, scnd) {
                        alert('error aca 1');
                                console.log(err.statusText);
                        }
                    });
    }



    //metodosquitarPrioridad
    function quitarPrioridad(IdTarea) {
             var url = '@Url.Action("QuitarPrioridad", "Tarea")';
                $.ajax({
                    type: "get",
                    headers: {
                        "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                    },
                    url: url,
                    data: { IdTarea, IdTarea },

                    success: function (data) {
                        cargarTabla();
                        },
                    error: function (err, scnd) {
                        alert('error aca 2');
                                console.log(err.statusText);
                        }
                    });
    }


    /////////////////////filtros//////////////////


    $("#filtroByTitulo").on("keyup", function () {
        buscarPorTitulo(this.value)
    });

    function buscarPorTitulo(titulo) {
        TablaTareas
            .columns(1)
            .search(titulo)
            .draw();
    }






    function cargarFiltros() {

        TareasMostrar = JSON.parse(JSON.stringify(tareas));
        TareasMostrar = filtroContacto(TareasMostrar);
        TareasMostrar = filtroEstado(TareasMostrar);
        TareasMostrar = filtroTipos(TareasMostrar);
        TareasMostrar = filtroFecha(desde, hasta);
        TareasMostrar = FistroAsignados(TareasMostrar);
        cargarDatos(TareasMostrar);

    }



    function filtroContacto(TareasMostrar) {
         // console.log(TareasMostrar);
        var IdContacto = parseInt($('#filtroContacto').val());
        // console.log("IdContacto: " + IdContacto);
        var contactoFiltrado = [];
        if (IdContacto === 0) {
            return TareasMostrar;
        }
        else {
            for (var i = 0; i < TareasMostrar.length; i++) {              
                if (TareasMostrar[i].idContacto === IdContacto) {
                    //  console.log(contacto.idContacto);
                    contactoFiltrado.push(TareasMostrar[i]);
                }
            }         
            return contactoFiltrado;
        }
    }





    function filtroEstado(TareasMostrar) {     
      //console.log(TareasMostrar);
        var IdEstado = parseInt($('#filtroEstados').val());
      //console.log("IdEstado: " + IdEstado);
        var EstadosFiltrado = [];
        if (IdEstado === 0) {
            return TareasMostrar;
        }
        else {
            for (var i = 0; i < TareasMostrar.length; i++) {              
                if (TareasMostrar[i].idEstado === IdEstado) {
                   // console.log(IdEstado)
                    EstadosFiltrado.push(TareasMostrar[i]);
                }
            }        
           return EstadosFiltrado;
        }
    }





    function filtroTipos(TareasMostrar) {
       // console.log(TareasMostrar);
        var IdTipo = parseInt($('#filtroTipos').val());
       // console.log("IdTipo: " + IdTipo);
        var tiposFiltrado = [];
        if (IdTipo === 0) {
            return TareasMostrar;
        }
        else {
            for (var i = 0; i < TareasMostrar.length; i++) {           
                if (TareasMostrar[i].idTipo === IdTipo) {
                     // console.log(IdTipo)
                    tiposFiltrado.push(TareasMostrar[i]);
                }
            }
            return tiposFiltrado;
        }
    }




    function filtroFecha(_desde, _hasta) {

        var arrayTareas = JSON.parse(JSON.stringify(TareasMostrar));
        if (_desde == _hasta || _desde === null) {

            return TareasMostrar;
        } else {

            var desdeLocal = new Date(_desde).getTime();
            var hastaLocal = new Date(_hasta).getTime();

            for (var i = 0; i < tareas.length; i++) {

                var documento = new Date(tareas[i].fechaLimite).getTime();
                var flag = false;

                if (documento >= desdeLocal && documento <= hastaLocal)
                    flag = true;

                // else flag = true;

                if (!flag)
                    arrayTareas.splice(i, 1);
            }
            return arrayTareas;
        }
    }



    $('.selectFiltro').change(function () {
        cargarTabla("entro");
        cargarFiltros();
    });




    function FistroAsignados(TareasMostrar){

        var IdAsignado = parseInt($('#filtroAsignado').val());

        var AsignadosFiltrado = [];

        if (IdAsignado === 0) {

            return TareasMostrar;
        }
        else {

            for (var i = 0; i < TareasMostrar.length; i++) {

                if (TareasMostrar[i].idUsuario != 0) {

                    var asignados = TareasMostrar[i].idUsuario;

                    if (asignados === IdAsignado) {

                        AsignadosFiltrado.push(TareasMostrar[i]);
                        //console.log(AsignadosFiltrado);
                    }
                }
            }
            return AsignadosFiltrado;
        }
    }




    //cargar tabla
    function cargarTabla() {
           var url = '@Url.Action("GetTareas", "Tarea")';
        $.ajax({
                    type: "get",
                    headers: {
                        "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                    },
              url: url,
            dataType: "json",

            success: function (data) {
                tareas = JSON.parse(JSON.stringify(data));

                //cargarDatos(tareas);
                cargarFiltros();

                },
            error: function (err, scnd) {
                alert('error');
                        console.log(err.statusText);
                }
            });
    }



    //llamar al modal para ingresar nueva tarea

    $('#btnNuevaTarea').on('click', function () {
        var url = '@Url.Action("NuevaTarea", "Tarea")';
          $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              url: url ,
              success: function (data) {
                 // $('#titleTarea').html('@Lb["nuevaTarea"]');
                  $('#nuevaTarea').modal('show');
                  $('#infoAgregarTarea').html(data);
              },
              error: function (err, scnd) {
                  console.log(err.statusText);
              }
          });
    });




    function recuperarFecha(_fecha) {
        if (_fecha === null)
            return "";
        var f = new Date(_fecha);
        return f.toLocaleString();
    }




    function recuperarFechaSinHora(_fecha) {
        var fecha = _fecha.substr(0, 10);
        var y = fecha.substr(0, 4);
        var m = fecha.substr(6, 1);
        var d = fecha.substr(8, 3);
        //var date = new Date();
        //console.log(fecha);
        return d +"/"+ m +"/"+ y;
    }





</script>

<style>
    .dataTables_wrapper .dataTables_filter {
        float: right;
        text-align: right;
        visibility: hidden;
    }
</style>