@model AltivaWebApp.ViewModels.RequisicionViewModel
@inject IStringLocalizer<SharedResources> SharedLocalizer
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    if (Model.Id != 0)
    {
        ViewData["Title"] = SharedLocalizer["editarReq"];
    }
    else
    {
        ViewData["Title"] = SharedLocalizer["nuevaReq"];
    }


    var estado = "";
    var estado2 = "";
    if (Model.Anulado)
    {
        estado = "disabled";
    }

    if (ViewBag.tieneToma)
    {
        estado2 = "disabled";
    }
}

@if (Model.Id != 0)
{
    <div class="row">
        <div class="col-md-3"><h3>@SharedLocalizer["editarReq"]</h3></div>
        <div class="col-md-offset-8 col-md-1"><button style="font-size:2rem; padding-top:1rem" onclick="crearPdf()" class="btn btn-link"><i class="fas fa-file-pdf"></i>PDF</button></div>
    </div>

}
else
{
    <h3>@SharedLocalizer["nuevaReq"]</h3>
}
<hr />

<div class="row">
    @if (Model.Id != 0 && !Model.Anulado)
    {
        <div class="col-md-12 text-right"><button @estado2 class="btn btn-danger btn-sm" onclick="anularReq()">@SharedLocalizer["Anular"]</button></div>
    }
    else if (Model.Id != 0)
    {
        <div class="col-md-12 text-left"> <h4 class="text-danger">@SharedLocalizer["RequisicionAnulada"]</h4></div>
    }
    @if (ViewBag.tieneToma)
    {
        <div class="col-md-12 text-left"><h5 class="text-danger">@SharedLocalizer["DocumentoConToma"]</h5></div>
    }
</div>

<div class="row well">
    <div class="row">
        <form id="frmReq">
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.Anulado)
            @Html.HiddenFor(x => x.IdUsuario)

            <div class="form-group col-md-2 col-sm-6 col-xs-12">
                <fieldset>
                    <div class="form-group">
                        <label for="fecha">@SharedLocalizer["Fecha"]:</label>
                        <div class='input-group date' id='fechaPicker'>
                            <input @estado2 @estado type='text' class="form-control" id="fecha" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="form-group col-md-4 col-sm-6 col-xs-12">
                <div class="row">
                    <div class="col-md-9 col-sm-9 col-xs-8">
                        <label class="control-label">@SharedLocalizer["Departamento"]:</label>
                        <select @estado2 @estado id="departamento" class="form-control selectItems"></select>
                        <span hidden id="departamentoValid" class="text-danger">@SharedLocalizer["departementoValid"]</span>
                    </div>
                    <div class="col-md-3 col-sm-3 col-xs-4">
                        <a @estado2 @estado style="padding:0rem; padding-top:2.5rem" class="btn btn-link" onclick="getCrearEditarPartial(0)"><span style="font-size: 2rem"><i class="fas fa-plus-circle"></i></span></a>
                        <a @estado2 @estado style="padding:0rem; padding-top:2.5rem" class="btn btn-link" onclick="getEditarPartial()"><span style="font-size: 2rem"><i class="fas fa-edit"></i></span></a>
                    </div>
                </div>
            </div>

            <div class="form-group col-md-2 col-sm-6 col-xs-12">
                <label class="control-label">@SharedLocalizer["Bodega"]:</label>
                <select @estado2 @estado id="bodegas" class="form-control selectItems"></select>
            </div>

            <div class="form-group col-md-4 col-sm-12 col-xs-12">
                <label asp-for="Descripcion" class="control-label">@SharedLocalizer["Descripción"]:</label>
                <textarea @estado2 @estado asp-for="Descripcion" id="descripcion" rows="4" maxlength="250" class="form-control">@Model.Descripcion</textarea>
                <span hidden id="descripcionValid" class="text-danger">@SharedLocalizer["descripcionValid"]</span>
            </div>

        </form>
    </div>

    <div class="row">
        <h4 class="col-md-12">@SharedLocalizer["LineasRequisicion"]</h4>
    </div>

    <div class="row">
        <div class="form-group col-md-3 col-sm-3 col-xs-12">
            <label id="lblItem" class="control-label">@SharedLocalizer["Item"]: <span style="font-size:1.1rem" class="text-info"><a id="descripcionLinea"></a></span></label>
            <input @estado2 @estado id="item" onkeyup="pasarSigCampo(event,'cantidad')" class="form-control autocomplete" autofocus type="text" />
        </div>
        <div class="form-group col-md-2 col-sm-2 col-xs-5">
            <label class="control-label">@SharedLocalizer["Cantidad"]:</label>
            <input @estado2 @estado id="cantidad" onkeyup="pasarSigCampo(event,'precio'), setTotalLinea()" class="form-control numerico" value="1" type="text" />
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-7">
            <label class="control-label">@SharedLocalizer["PrecioUnitario"]:</label>
            <input readonly @estado2 @estado id="precio" onkeyup="pasarSigCampo(event,'totalLinea'), setTotalLinea()" class="form-control  currency" type="text" />
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-10">
            <label class="control-label">@SharedLocalizer["Total"]:</label>
            <input type="text" class="form-control currency" onkeyup="pasarSigCampo(event,'submitFrmReq')" readonly id="totalLinea" />
        </div>

        <div class="form-group col-md-1 col-sm-1 col-xs-2" style="padding-top: 2.3rem;">
            <button @estado2 @estado onkeyup="pasarSigCampo(event,'items')" onclick="prepararLinea()" id="submitFrmReq" class="btn btn-success"><span><i class="fas fa-save"></i></span></button>
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-12" style="padding-top: 2.5rem;">
            <span style="padding-top: 2.3rem; font-size: 1.5rem">@SharedLocalizer["ExistenciaInv"]: </span><span class="text-info" id="lblExistencia"></span>
        </div>

        <div class="form-group col-md-12 col-sm-12 col-xs-12">
            <p hidden id="cantidadValid" class="text-danger">@SharedLocalizer["cantidadValid"].</p>
            <p hidden id="costoValid" class="text-danger">@SharedLocalizer["precioValidacion"].</p>
            <p hidden id="cantidadExistenciaNuevaValid" class="text-danger">@SharedLocalizer["cantidaMayorQueExistencias"].</p>
        </div>

    </div>
    <div class="row">
        <div class="col-md-12 table-responsive">
            <span hidden id="sinDetalleValid" class="text-danger">@SharedLocalizer["docSinDetalle"].</span>
            <table class="table table-bordered table-striped" id="tblReq" style="min-width:900px">
                <thead>
                    <tr>
                        <th style="width:12%">@SharedLocalizer["Item"]</th>
                        <th style="width:24%">@SharedLocalizer["Descripción"]</th>
                        <th style="width:6%">@SharedLocalizer["Cantidad"]</th>
                        <th style="width:12%">@SharedLocalizer["PrecioUnitario"]</th>
                        <th style="width:12%">@SharedLocalizer["Total"]</th>
                        <th style="width:8%">@SharedLocalizer["Acción"]</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-md-offset-9 col-md-3">
            <form>
                <div class="form-group">
                    <label class="control-label">@SharedLocalizer["Total"]</label>
                    <input readonly id="total" class="form-control currency" />
                </div>
            </form>
        </div>
    </div>
</div>

<div class="row">
    <div class="form-group col-md-3">
        <button @estado2 @estado class="btn btn-success btnAccion" onclick="guardarCambios()">@SharedLocalizer["Guardar"] <i class="fas fa-save"></i></button>
        <a onclick="cancelar()" class="btn btn-default">@SharedLocalizer["Cancelar"]</a>
    </div>
</div>

<div class="row">
    <!-- Modal -->
    <div class="modal fade" id="modalDepartamento" tabindex="-1" role="dialog" aria-labelledby="departamentoModallabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="modal-body" id="crearEditarPartial">

                </div>
            </div>
        </div>
        
    </div>
</div>

<!-- Modal Editar linea-->
<div class="modal fade" id="lineaModal" tabindex="-1" role="dialog" aria-labelledby="lineaModallabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header row">
                <div class="col-md-10 col-sm-10 col-xs-10" style="text-align:left">
                    <h4 class="modal-title" id="lineaModalLabel">@SharedLocalizer["Editar"] @SharedLocalizer["Línea"]</h4>
                </div>
                <div class="col-md-2 col-sm-2 col-xs-2" style="text-align:right">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
            <div class="modal-body row">
                <form>
                    <div hidden class="form-group col-md-2 col-sm-2 col-xs-12">
                        <input readonly id="idLinea" class="form-control" type="number" />
                    </div>
                    <div class="form-group col-md-6 col-sm-6 col-xs-12">
                        <label class="control-label">@SharedLocalizer["Cantidad"]:</label>
                        <input @estado @estado2 id="cantidadEditar" class="form-control numerico" value="1" type="text" />
                        <span hidden id="cantidadEditarValid" class="text-danger">@SharedLocalizer["cantidadValid"].</span>
                        <span hidden id="cantidadExistenciaValid" class="text-danger">@SharedLocalizer["cantidaMayorQueExistencias"].</span>
                    </div>
                    <div class="form-group col-md-6 col-sm-6 col-xs-12">
                        <label class="control-label">@SharedLocalizer["Precio"]:</label>
                        <input readonly @estado @estado2 id="precioEditar" class="form-control currency" type="text" />
                        <span hidden id="precioEditarValid" class="text-danger">@SharedLocalizer["precioValidacion"].</span>
                    </div>

                    <div class="form-group col-md-12 col-sm-12 col-xs-12"></div>

                </form>
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <button @estado @estado2 type="button" onclick="editarLinea()" class="btn btn-success">@SharedLocalizer["Guardar"]</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div id="comentarios">

        </div>
    </div>
</div>

<div hidden><input hidden id="formater" class="currency" type="text" /></div>

<script src="~/js/comentario.js"></script>
<script src="~/js/base64ImageCreator.js"></script>
<script>
    var $anulado = $('#Anulado');
    ///linea
    var $item = $('#item');
    var $descripcionLinea = $('#descripcionLinea');
    var $totalLinea = $('#totalLinea');
    var $precio = $('#precio');
    var $cantidad = $('#cantidad');
    var $lblExistencia = $('#lblExistencia');

    ///////////requisicion
    var $total = $('#total');
    var $departamento = $('#departamento');
    var $fecha = $('#fecha');
    var $descripcion = $('#descripcion');
    var $bodega = $('#bodegas');
    var $lblItemInfo = $('#lblItemInfo');

    var totalReq = 0;

    var reqDetalleBD = [];
    var lineas = [];
    var items = [];
    var lineasCrOrUp = [];
    var lineasEliminadas = [];
    var departamentos = [];
    var bodegas = [];
    var monedad = [];
    var depaAnulado = false;


    $(document).ready(function () {

        var date = new Date();
        if (@Model.Id != 0) {

            GetComentarios("Req", @Model.Id);
            $('#bodegas').attr('disabled', true);
            date = new Date(formatearFecha());

        }

        $('#fechaPicker').datetimepicker({
            defaultDate: date,
            locale: localStorage.getItem("idioma")
        });

        $(".moneda").inputmask({
            'alias': 'decimal',
            rightAlign: true,
            min: 0
        });

        $(".numerico").inputmask({
            'alias': 'decimal',
            rightAlign: false,
            min: 0
        });


        getMonedas();
        getBodegasInventario();
        getDepartamentos(@Model.IdDepartamento);

        $('.selectItems').select2({ width: null, language: localStorage.getItem("idioma") });

        

        $('textarea[data-limit-rows=true]').on('keypress', function (event) {
                var textarea = $(this),
                    text = textarea.val(),
                    numberOfLines = (text.match(/\n/g) || []).length + 1,
                    maxRows = parseInt(textarea.attr('rows'));

                if (event.which === 13 && numberOfLines === maxRows) {
                    return false;
                }
        });

        $("#bodegas").change(function () {

            limpiarLinea();

            for (var i = 0; i < bodegas.length; i++) {
                if (bodegas[i].id === parseInt($(this).val()))
                    cargarItems(bodegas[i].tbPrInventarioBodega);
            }

        });

        $("#departamento").on('change', function () {

            if (!getDepaAnulado($(this).val())) {
                depaAnulado = false;
                $("#departamentoValid").attr("hidden", true);
            }
            else {
                $("#departamentoValid").attr("hidden", false);
                depaAnulado = true;
            }

        });
    });


    /////////////////////////////eventos del dom////////////////////////////////////////

    function getEditarPartial() {
        if("@Model.Anulado" !== "True")
            getCrearEditarPartial($departamento.val());
    }

    $item.on('focusout', function (evt, item) {

        setTimeout(function () {
            if ($('#item').val().replace(/ /g, "") !== "")
                cargarInfoItem($('#item').val());
            else
                limpiarLinea();
        }, 250);

    });

    function cargarInfoItem(cod) {


        var item = getItemPorCodigo(cod);

        if (item !== undefined) {

            var itemBodega = getItem(item.idInventario);

            $precio.val(item.costoPromedioGeneral);
            $cantidad.val(1);
            $descripcionLinea.text(item.descripcion.substr(0, 32) + (item.descripcion.length > 25 ? '...' : '')).prop('href', '@Url.Action("EditarInventario", "Inventario", new { id = "__id__" })'.replace("__id__", item.idInventario));
            $lblExistencia.text(itemBodega.existenciaBodega + " " + item.idUnidadMedidaNavigation.abreviatura);
            setTotalLinea();
        }
        else {
            cargarAlert('@SharedLocalizer["itemInvalido"]');
            limpiarLinea();
        }



    }

    function limpiarLinea() {
        $item.val("");
        $descripcionLinea.text("");
        $precio.val(0);
        $cantidad.val(1);
        $totalLinea.val(0);
        $lblExistencia.text("");
    }

    function prepararLinea() {

        var item = getItemPorCodigo($item.val());

        if (validarLinea(item.idInventario)) {
            guardarLinea(item);
            limpiarLinea();
            $('#bodegas').prop('disabled', true);
            setTimeout(function () { $('#item').focus(); }, 1);
        }

    }

    function validarLinea(idItem) {

        var flag = true;



        if ($('#item').val().replace(/ /g, "") === "")
            return false;


        if (getItem(idItem).existenciaBodega >= parseFloat($('#cantidad').inputmask('unmaskedvalue'))) {
            $('#cantidadExistenciaNuevaValid').prop('hidden', true);
        }
        else {
            $('#cantidadExistenciaNuevaValid').prop('hidden', false);
            return false;
        }


        if (parseFloat($('#precio').inputmask('unmaskedvalue')) <= 0 || $('#precio').inputmask('unmaskedvalue') == null) {
            flag = false;
            $('#costoValid').prop('hidden', false);
        }
        else {
            $('#costoValid').prop('hidden', true);
        }

        if (parseFloat($('#cantidad').inputmask('unmaskedvalue')) <= 0 || $('#cantidad').inputmask('unmaskedvalue') == null) {
            flag = false;
            $('#cantidadValid').prop('hidden', false);
        }
        else {
            $('#cantidadValid').prop('hidden', true);
        }

        return flag;

    }

    function modalEditarLinea(key) {

        $('#cantidadEditarValid').prop('hidden', true);
        $('#precioEditarValid').prop('hidden', true);
        $('#cantidadExistenciaValid').prop('hidden', true);

        var linea = lineas[key];

        $('#idLinea').val(key);
        $('#cantidadEditar').val(linea.cantidad);
        $('#precioEditar').val(linea.precioUnitario);


        $('#lineaModal').modal('show');

    }

    function editarLinea() {

        var key = $('#idLinea').val();

        if (!validarLineaEditar(lineas[key])) {
            return;
        }

        actualizarInventarioLocal(lineas[key].idInventario, true, lineas[key].cantidad);

        lineas[key].cantidad = parseFloat($('#cantidadEditar').inputmask('unmaskedvalue'));
        lineas[key].precioUnitario = parseFloat($('#precioEditar').inputmask('unmaskedvalue'));
        lineas[key].total = lineas[key].cantidad * lineas[key].precioUnitario;

        var flag = false;
        for (var i = 0; i < lineasCrOrUp.length; i++) {
            if (lineasCrOrUp[i].idInventario == lineas[key].idInventario) {
                lineasCrOrUp[i] = lineas[key];
                flag = true;
                break;
            }
        }

        if (!flag)
            lineasCrOrUp.push(lineas[key]);

        actualizarInventarioLocal(lineas[key].idInventario, false, lineas[key].cantidad);

        cargarTabla(lineas);

        $('#lineaModal').modal('hide');

    }

    function validarLineaEditar(item) {

        var flag = true;

        if (parseFloat($('#cantidadEditar').val()) <= 0 || $('#cantidadEditar').inputmask('unmaskedvalue') == null) {
            flag = false;
            $('#cantidadEditarValid').prop('hidden', false);
        }
        else
            $('#cantidadEditarValid').prop('hidden', true);

        if (parseFloat($('#precioEditar').inputmask('unmaskedvalue')) <= 0 || $('#precioEditar').inputmask('unmaskedvalue') == null) {
            flag = false;
            $('#precioEditarValid').prop('hidden', false);
        }
        else
            $('#precioEditarValid').prop('hidden', true);


        var stockItem = JSON.parse(JSON.stringify(getItem(item.idInventario).existenciaBodega));
        stockItem += item.cantidad;

        if (stockItem < parseFloat($('#cantidadEditar').val())) {
            flag = false;
            $('#cantidadExistenciaValid').prop('hidden', false);
        }
        else
            $('#cantidadExistenciaValid').prop('hidden', true);


        return flag;

    }



    //////////////////////////////////////////////////////helpers///////////////////////////////////

    function getDepaAnulado(idDepa) {
        for (var i = 0; i < departamentos.length; i++) {
            if (parseInt(idDepa) === departamentos[i].id)
                return departamentos[i].anulado;
        }
    }


    function formatearFecha() {

        return '@Model.Fecha.Month' + "-" + '@Model.Fecha.Day' + "-" + '@Model.Fecha.Year' + " " + '@Model.Fecha.TimeOfDay';

    }

    function cargarBodegas(data) {

        var flag = true;
        for (var i = 0; i < data.length; i++) {
            var o = new Option(data[i].nombre, data[i].id);

            if (data[i].id === @Model.IdBodega) {
                $(o).attr('selected', true);
                cargarItems(data[i].tbPrInventarioBodega);
                flag = false;
            }

            $("#bodegas").append(o);
        }

        if (flag)
            cargarItems(data[0].tbPrInventarioBodega);

        getReqDetalle();

    }


    function crearModelo() {
        return model = {
            id: @Model.Id,
            fecha: $fecha.val(),
            idDepartamento: $departamento.val(),
            idBodega: $bodega.val(),
            anulado: false,
            idUsuario: @Model.IdUsuario,
            descripcion: $descripcion.val(),
            total: totalReq.toString().replace(".", ","),
            RequisicionDetalle: crearModelDetalle(lineasCrOrUp)
        };
    }

    function crearModelDetalle(model) {
        for (var i = 0; i < model.length; i++) {
            model[i].precioUnitario = model[i].precioUnitario.toString().replace(".", ",");
            model[i].total = model[i].total.toString().replace(".", ",");
        }

        return model;
    }

    function guardarCambios() {

        if (validarForm())
            guardarRequisicion();
    }


    function formatCurrency(value) {
        $('#formater').val(value);

        return $('#formater').val();
    }

    function cargarLineas(data) {
        for (var i = 0; i < data.length; i++) {
            var model = {
                id: data[i].id,
                idRequisicion: @Model.Id,
                idInventario: data[i].idInventario,
                cantidad: data[i].cantidad,
                precioUnitario: data[i].precioUnitario,
                total: data[i].total
            };

            //lineasCrOrUp.push(model);
            lineas.push(model);
        }

        cargarTabla(lineas);
    }

    function guardarLinea(item) {


        var model = {
            id: 0,
            idRequisicion: @Model.Id,
            idInventario: item.idInventario,
            cantidad: parseFloat($cantidad.val()),
            precioUnitario: parseFloat($('#precio').inputmask('unmaskedvalue')),
            total: parseFloat($('#totalLinea').inputmask('unmaskedvalue')) //parseFloat($('#cantidad').inputmask('unmasked')) * parseFloat($('#precio').inputmask('unmasked'))
        };


        var existeItem = existeItemLineas(model);

        actualizarInventarioLocal(model.idInventario, false, model.cantidad);

        if (existeItem == null) {

            lineasCrOrUp.push(model);
            lineas.push(model);

        }
        else {

            lineas[existeItem].cantidad += model.cantidad;
            lineas[existeItem].total += model.total;

            var flag = false;
            for (var i = 0; i < lineasCrOrUp.length; i++) {
                if (lineasCrOrUp[i].idInventario == lineas[existeItem].idInventario) {
                    lineasCrOrUp[i] = lineas[existeItem];
                    flag = true;
                    break;
                }
            }

            if (!flag)
                lineasCrOrUp.push(lineas); //lineas[key]

        }

        $bodega.prop('disabled', true);
        cargarTabla(lineas);

    }

    function existeItemLineas(linea) {

        var pos = null;

        for (var i = 0; i < lineas.length; i++) {
            if (linea.idInventario.toString() === lineas[i].idInventario.toString() && linea.precioUnitario === lineas[i].precioUnitario) {
                pos = i;
                break;
            }
        }

        return pos;
    }

    function actualizarInventarioLocal(idItem, isDeleted, cantidad) {

        for (var i = 0; i < arrayInventario.length; i++) {
            if (arrayInventario[i].idInventario === parseInt(idItem) && arrayInventario[i].idBodega === parseInt($bodega.val())) {
                if (isDeleted)
                    arrayInventario[i].existenciaBodega = arrayInventario[i].existenciaBodega + cantidad;
                else
                    arrayInventario[i].existenciaBodega = arrayInventario[i].existenciaBodega - cantidad;
            }

        }
    }

    function validarForm() {
        //var frmOrden = $('#frmOrden').serializeArray();
        var flag = true;

        if ($descripcion.val().replace(/ /g, "") === "") {
            $('#descripcionValid').attr("hidden", false);
            flag = false;
        } else
            $('#descripcionValid').attr("hidden", true);

        if (lineas.length <= 0) {
            $('#sinDetalleValid').prop('hidden', false);
            flag = false;
        } else
            $('#sinDetalleValid').prop('hidden', true);

        if (depaAnulado) {
            cargarAlert("@SharedLocalizer["depaAnulado"]");
            flag = false;
        }


        return flag;
    }

    


    function eliminarLinea(_key, idLinea) {

        bootbox.confirm("@SharedLocalizer["confirmEliminarLinea"]", function (result) {

            if (result) {

                eliminarLineaDirect(_key, idLinea);
                $('.selectItems').trigger('change');
            }

        });

    }

    function eliminarLineaDirect(key, idLinea) {

        actualizarInventarioLocal(lineas[key].idInventario, true, lineas[key].cantidad);

        if (idLinea != 0)
            lineasEliminadas.push(lineas[key].id);

        lineasCrOrUp.splice($.inArray(lineas[key], lineasCrOrUp), 1);

        lineas.splice(key, 1);


        cargarTabla(lineas);



        //$('.selectItems').trigger('change');


    }


    function cargarTabla(data) {



        $('.filasCargadas').remove();

        contadorFila = 0;
        var subtotal = 0;

        for (var i = 0; i < data.length; i++) {
            
            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '"><td >' + getItem(data[i].idInventario).idInventarioNavigation.codigo + '</td>'
                + '<td >' + getItem(data[i].idInventario).idInventarioNavigation.descripcion + ' </td>'
                + '<td >' + data[i].cantidad + ' </td>'
                + '<td style="text-align:right"> ' + formatCurrency(data[i].precioUnitario) + '</td>'
                + '<td style="text-align:right">' + formatCurrency(data[i].total) + '</td>'
                + '<td><button style = "padding:0; margin:0" @estado2 @estado class="btn btn-link" value = "' + contadorFila + '" onclick="modalEditarLinea(value)" > <i style="font-size:1.8rem" class="fas fa-edit"></i></button >'
                + ' <button style="padding:0; margin:0" @estado2 @estado class="btn btn-link" value="' + contadorFila + '" onclick="eliminarLinea(value, ' + data[i].id + ')" ><i style="font-size:1.8rem" class="fas fa-trash"></i></button></td ></tr > ';

            $('#tblReq > tbody').append(body);

            contadorFila++;

        }

        calcularTotales();


    }

    function getItem(id) {


        var it = {};
        for (var i = 0; i < arrayInventario.length; i++) {
            if (arrayInventario[i].idInventario === parseInt(id))
                it = arrayInventario[i];
        }

        return it;
    }

    function cargarItems(data) {


        arrayInventario = data;

        items = [];

        for (var i = 0; i < data.length; i++) {

            if (!data[i].idInventarioNavigation.inactiva) {
                items.push(data[i].idInventarioNavigation);
            }

        }

        var arrayItems = [];
        arrayItems = items;


        $('.autocomplete').unbind().removeData();

        $('.autocomplete').autoComplete({
            resolver: 'custom',
            formatResult: function (item) {

                return {
                    value: item.idInventario,
                    text:  item.codigo,
                    html: [
                        item.codigo + ' - ',
                        item.descripcion
                    ]
                };
            },
            events: {
                search: function (_keyword, callback) {
                    var keyword = _keyword.toUpperCase();
                    var filtrado = [];

                    if (keyword.replace(/ /g, "") === "") {
                        filtrado = [];
                    }
                    else {
                        for (var i = 0; i < arrayItems.length; i++) {

                            var keyArray = arrayItems[i].codigo.toUpperCase();
                            var keyArray2 = arrayItems[i].descripcion.toUpperCase();

                            if (keyArray.indexOf(keyword) > -1  )
                                filtrado.push(arrayItems[i]);
                            else
                                if (keyArray2.indexOf(keyword) > -1)
                                    filtrado.push(arrayItems[i]);
                        }

                    }



                    callback(filtrado);
                }
            },
            noResultsText: '@SharedLocalizer["sinResultados"]',
            autoSelect: true,
            minLength: 2,

        });

    }

    function getItemPorCodigo(codigo) {
        for (var i = 0; i < items.length; i++) {
            if (codigo === items[i].codigo) {
                return items[i];
            }
        }
    }

    function cancelar() {
        bootbox.confirm("@SharedLocalizer["confirmCancelar"]", function (result) {
            if (result)
                window.location.href = "@Url.Action("ListarRequisiciones")";

        });
    }


    /////////////////////////////////////////////calculos////////////////////////////////////////
    function calcularTotales() {
        totalReq = 0;

        for (var i = 0; i < lineas.length; i++) {
            totalReq += lineas[i].total;
        }

        $total.val(totalReq);

    }

    function setTotalLinea() {

        var precio = parseFloat($('#precio').inputmask('unmaskedvalue'));
        var cantidad = parseFloat($('#cantidad').inputmask('unmaskedvalue'));

        $totalLinea.val(cantidad * precio);

    }


    ////////////////////////////////////extras////////////////////////
    function pasarSigCampo(e, id) {


        (e.keyCode) ? k = e.keyCode : k = e.which;

        if (k == 13) {
            if (id == "submitFrmReq") {


                prepararLinea();


            }
            else {
                document.getElementById(id).focus();

            }

            $('#' + id).select();
        }
    }


    ////////////////////////////////////////ajax////////////////////////////////////////////

    function getReqDetalle() {
        if(@Model.Id != 0)
        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetRequisicionDetalle")',

            success: function (data) {
                reqDetalleBD = JSON.parse(JSON.stringify(data));
                cargarLineas(data);
                //console.log(data);
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }


    function getCrearEditarPartial(id)
    {
        if ("@Model.Anulado" !== "True") {
            var url = "@Url.Action("_CrearDepartamento", "Departamento")";
            if (id != 0) {
                url = '@Url.Action("_EditarDepartamento", "Departamento", new { id = "__id__"})';
                url = url.replace("__id__", id);
            }

            $.ajax({
                type: "GET",
                headers: {
                    "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                },
                url: url,

                success: function (data) {
                    $('#crearEditarPartial').html(data);
                    $('#modalDepartamento').modal('show');
                },
                error: function (err, scnd) {
                    console.log(err.statusText);
                }

            });
        }
    }

    function getMonedas() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetMonedas", "Monedas")',
             success: function (data) {

                 monedas = data;

                 $(".currency").inputmask('currency', {
                     prefix: monedas[0].simbolo + " ",
                     rightAlign: true,
                     min: 0
                 });

              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function getDepartamentos(pos) {

         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetDepartamentos")',
             success: function (data) {
                 departamentos = data;

                 var depaAnulados = [];

                 $('#departamento').empty();

                 var flag = false;

                 for (var i = 0; i < data.length; i++) {
                     if (!data[i].anulado) {
                         var o = new Option(data[i].descripcion, data[i].id);
                         if (data[i].id === parseInt(pos)) {
                             $(o).attr('selected', true);
                             flag = true;
                         }

                         $("#departamento").append(o);
                     }
                     else
                         depaAnulados.push(data[i]);
                 }

                 if (!flag)
                     if (@Model.Id != 0) {

                         for (var i = 0; i < depaAnulados.length; i++) {
                             if (depaAnulados[i].id === @Model.IdDepartamento) {
                                 var o2 = new Option(depaAnulados[i].descripcion, depaAnulados[i].id);
                                 $(o2).attr('selected', true);
                                 $("#departamento").append(o2);
                                 $("#departamentoValid").attr("hidden", false);
                                 depaAnulado = true;
                             }
                         }

                     }
              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    //editado por lenin
    function guardarRequisicion() {

        //console.log(crearModelo());
        $.ajax({

              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("CrearEditarRequisicion")',
              data: crearModelo(),

              success: function (data) {
                  if (lineasEliminadas.length > 0)
                        eliminarRequisicionDetalle();
                        window.location.href = "@Url.Action("ListarRequisiciones")";
                   },
                   error: function (err, scnd) {

                        console.log(err);
                        if (err.responseJSON.rollback == true)
                        cargarAlert('@SharedLocalizer["existenciasNegativas"].');
                                    
                   }
        });

    }

    function eliminarRequisicionDetalle() {


        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("EliminarRequisicionDetalle", new { id = Model.Id })',
            data: { viewModel: lineasEliminadas },
            success: function (data) {
               // console.log(data);
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

     function anularReq() {
        bootbox.prompt({
            title: "@SharedLocalizer["confirmAnularRequisicion"]",
            message: '<p>@SharedLocalizer["Justificación"]</p>',
            inputType: 'textarea',
            callback: function (result) {
                if (result != null) {

                    if (result.replace(/ /g, "") != "") {


                    $.ajax({
                        type: "post",
                        headers: {
                            "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                        },
                        dataType: "json",
                        url: '@Url.Action("AnularRequisicion")',
                        data: {id: @Model.Id},
                        success: function (data) {
                            setMensajeFromOut(result);
                            cargarAlert('@SharedLocalizer["RequisicionAnulada"]');
                            window.location.href = "@Url.Action("ListarRequisiciones")";

                        },
                        error: function (err, scnd) {
                            cargarAlert('@SharedLocalizer["errorGeneral"]');
                            console.log(err.statusText);
                        }
                    });

                }
                else
                    cargarAlert('@SharedLocalizer["JustificacionInvalida"]');
                }

            }
        });
    }

    function getBodegasInventario() {

          $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetBodegaInventario", "AjusteInventario")',
              success: function (data) {
                  //bodegas = JSON.parse(JSON.stringify(data));
                  for (var i = 0; i < data.length; i++) {
                      if (data[i].tbPrInventarioBodega.length > 0)
                          bodegas.push(data[i]);
                  }

                  cargarBodegas(bodegas);
              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }



    //////////////////////////////////////crear pdf/////////////////////////////////////////

    function crearPdf() {

        generate_cutomPDF(crearModeloPDF());

    }

    function crearModeloPDF() {

        var empresaModel = JSON.parse(localStorage.getItem("empresaInfo"));

        var modelo = {
            empresa: {
                nombre: localStorage.getItem("empresa"),
                telefono: empresaModel.tel,
                correo: empresaModel.correo,
                cedJuridica: empresaModel.ced,
                logo: getImgFromUrl(localStorage.getItem("fotoEmpresa")),
                nombreTitulo: "@SharedLocalizer["Nombre"]:",
                telTitulo: "@SharedLocalizer["Telefonos"]:",
                correoTitulo: "@SharedLocalizer["Correo"]:",
                cedTitulo: getTittulos().cedJuridica
            },
            total: $total.val(),
            nombreDoc: getTittulos().req + '#@Model.Id',
            nombreDescarga: '@SharedLocalizer["Requisicion"]_ ' + ' ' + @Model.Id + '.pdf',
            columnas: {
                item: "Item",
                descripcion: getTittulos().desc,
                cantidad: "@SharedLocalizer["Cantidad"]",
                precioUnid: "@SharedLocalizer["PrecioUnid"]",
                total: "@SharedLocalizer["Total"]"
            },
            filas: crearFilasPdf(),
            resumen: {
                total: "@SharedLocalizer["Total"]",
                autorizado: "@SharedLocalizer["Autorizado por"]:______________________"
            },
            bodega: $('#bodegas option:selected').text(),
            fecha: $('#fecha').val(),
            descripcion: getDescripcion(),
            bodegaTitulo: "@SharedLocalizer["Bodega"]:",
            descripcionTitulo: getTittulos().desc,
            fechaTitulo: "@SharedLocalizer["Fecha"]:",
            estado: getEstado(),
            monedaTitulo: '@SharedLocalizer["Moneda"]:',
            moneda: monedas[0].nombre,
            departamento: $('#departamento option:selected').text(),
            departamentoTitulo: '@SharedLocalizer["Departamento"]:',
            usuarioTitulo: "@SharedLocalizer["Usuario"]:",
            usuario: '@Context.Session.GetString("nombreUsuario")'
        };

        return modelo;

    }

    function crearFilasPdf() {

        var row = [];
        for (var i = 0; i < lineas.length; i++) {

            var model = {
                item: getItem(lineas[i].idInventario).idInventarioNavigation.codigo,
                descripcion: getItem(lineas[i].idInventario).idInventarioNavigation.descripcion,
                cantidad: lineas[i].cantidad,
                precioUnid: formatearMoneda(lineas[i].precioUnitario),
                total: formatearMoneda(lineas[i].total)
            };

            row.push(model);
        }
        return row;
    }

    function formatearMoneda(val) {
        $('#formater').val(val);
        return $('#formater').val();
    }

    function getDescripcion() {
        var d = $('#descripcion').val();
        var desc = d.match(/.{1,125}/g).join("\n");
        return desc;

    }



    function getTittulos() {
        var idioma = localStorage.getItem("idioma");

        var req = "@SharedLocalizer["Requisición"]";
        if (idioma === "es")
            return {
                desc: "Descripción:",
                cedJuridica: "Cédula Jurídica:",
                req: "Requisición"
            };
        else
            return {
                desc: "Description:",
                cedJuridica: "Legal Number:",
                req: "Requisition"
            };
    }



    function getEstado() {
        if ('@Model.Anulado' === "True")
            return "@SharedLocalizer["ReqAnulada"]";
        else
            return "";
    }


</script>
<script src="~/lib/vendors/jsPDF/REQ.js"></script>
