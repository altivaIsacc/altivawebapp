@model AltivaWebApp.ViewModels.FacturaViewModel
@inject IStringLocalizer<SharedResources> Lb

@{ var est2 = "";
    var est = "";
    if (Model.Id != 0)
    {
        est2 = "none;";
        est = "hidden";
        ViewData["Title"] = Lb["Editar"] + " " + Lb["Factura"];
    }
    else
    {
        ViewData["Title"] = Lb["Nueva"] + " " + Lb["Factura"];
    }

}

<div class="row">


    <div class="col-md-2 col-sm-3 col-xs-12">
        <a style="font-size:2rem;" asp-controller="Factura" asp-action="ListarFacturas"><i class="fas fa-arrow-left"></i></a>

        @if (Model.Id != 0)
        {
            <h3>@Lb["Editar"] @Lb["Factura"]</h3>
        }
        else
        {
            <h3>@Lb["Nueva"] @Lb["Factura"]</h3>
        }
    </div>
    <div class="col-md-offset-7 col-sm-offset-6 col-md-3 col-sm-4 col-xs-12 ">
        <label for="selectPuntoVenta" class="control-label">@Lb["PuntoVenta"]:</label>
        <select id="selectPuntoVenta" class="form-control selectItems" disabled="@(Model.Id != 0 ? "disabled" : null)"></select>
    </div>
</div>

<hr />

@if (Model.Id != 0)
{
<div class="row">
    <div class="btn-group  col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <button type="button" onclick="GetPDF(1, false)" class="btn btn-primary">@Lb["imprimir"]</button>
        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
            <span class="caret"></span>
            <span class="sr-only">Toggle Dropdown</span>
        </button>
        <ul class="dropdown-menu" role="menu" style="font-size: xx-large; width:60%">
            <li>
                <a href="#carta" onclick="GetPDF(1, false)">@Lb["Carta"]</a>
            </li>
            <li>
                <a href="#mediacarta" onclick="GetPDF(2, false)">@Lb["MediaCarta"]</a>
            </li>
            <li>
                <a href="#ticket" onclick="GetPDF(3, false)">@Lb["Ticket"]</a>
            </li>
            <li>
                <a href="#personalizado" onclick="GetPDF(4, false)">@Lb["Personalizado"]</a>
            </li>
        </ul>
    </div>
    <div class="col-md-12 col-sm-12 col-xs-12 text-right"><button class="btn btn-danger btn-sm" id="btnAnular" onclick="Anular()">@Lb["Anular"]</button></div>
</div>
}

<br />

<div class="row">
    <form id="frmFactura">

        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.FechaCreacion)
        @Html.HiddenFor(x => x.IdUsuarioCreador)
        @Html.HiddenFor(x => x.Estado)
        @Html.HiddenFor(x => x.IdPuntoVenta)
        @Html.HiddenFor(x => x.IdMoneda)
        @Html.HiddenFor(x => x.FechaFactura)
        @Html.HiddenFor(x => x.TipoCambioDolar)
        @Html.HiddenFor(x => x.TipoCambioEuro)
        @Html.HiddenFor(x => x.FechaVencimiento)
        @Html.HiddenFor(x => x.SubTotal)
        @Html.HiddenFor(x => x.SubTotalGravado)
        @Html.HiddenFor(x => x.SubTotalGravadoNeto)
        @Html.HiddenFor(x => x.SubTotalExcento)
        @Html.HiddenFor(x => x.SubTotalExcentoNeto)
        @Html.HiddenFor(x => x.PorcDescuento)
        @Html.HiddenFor(x => x.MontoExoneracion)
        @Html.HiddenFor(x => x.MontoIva)
        @Html.HiddenFor(x => x.TotalDescuento)
        @Html.HiddenFor(x => x.Total)
        @Html.HiddenFor(x => x.Consecutivo)

        <div class="form-group col-md-3 col-sm-3 col-xs-6">
            <label asp-for="IdVendedor" class="control-label">@Lb["Vendedor"]:</label>
            <select  onkeyup="pasarSigCampo(event,'IdCliente')" asp-for="IdVendedor" class="form-control selectItems" disabled="@(Model.Id != 0 ? "disabled" : null)">
                @foreach (var item in ViewData["usuarios"] as IList<TbSeUsuario>)
                {
                    if (item.Id == int.Parse(User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value) && Model.Id != 0)
                    {
                        <option selected value="@item.Id">@item.Nombre</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                }
            </select>
        </div>
        <div class="form-group col-md-4 col-sm-4 col-xs-6">
            <label asp-for="IdCliente" class="control-label">@Lb["Cliente"]:</label>
            <select onkeyup="pasarSigCampo(event,'Tipo')" asp-for="IdCliente" class="form-control selectItems" disabled="@(Model.Id != 0 ? "disabled" : null)"></select>
        </div> <div @est class="form-group col-md-1 col-sm-1 col-xs-12">
            <br />
            <a  style="padding:0; margin:0; margin-top:1rem" class="btn btn-link" id="crearcontacto" onclick="crearContacto()">
                <span><i style="font-size: 2rem" class="fas fa-plus-circle"></i></span>
            </a>
        </div>
        <div class="form-group col-md-2 col-sm-2 col-xs-6">
            <label asp-for="Tipo" class="control-label">@Lb["tipo"]:</label>
            <select asp-for="Tipo" class="form-control selectItems" disabled="@(Model.Id != 0 ? "disabled" : null)">
                <option value="1">@Lb["Contado"]</option>
                <option value="2">@Lb["Crédito"]</option>
            </select>
        </div>

        <div class="col-md-2 col-sm-2 col-xs-6 btn-group" style="padding: 0; margin: 0; padding-top:2.4rem">
            @if (Model.Id == 0)
            {
                <button data-toggle="dropdown" class="btn btn-primary dropdown-toggle" type="button" aria-expanded="false">
                    @Lb["MasOpciones"] <span class="caret"></span>
                </button>
                <ul role="menu" class="dropdown-menu">
                    <li>
                        <a class="dropdown-item" href="#">@Lb["AplicarExoneracion"]</a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#">@Lb["AplicarDescuento"]</a>
                    </li>
                    @*<li>
                    <a class="dropdown-item" href="#">@Lb["AplicarApartado"]</a>
                </li>*@
                    <li>
                        <a class="dropdown-item" href="#">@Lb["ImportarCotizacion"]</a>
                    </li>
                    <li class="divider">@Lb["Reportes"]</li>

                </ul>
            }
            @if (Model.Id != 0)
            {

                <button class="btn btn-primary" type="button" id="cambiarPago" onclick="facturar()">
                    @Lb["CambiarFormaPago"] 
                </button>

            }
        </div>



    </form>

</div>

<div class="row"><div class="col-md-12"><h5>@Lb["Detalle"]</h5></div></div>

<div class="row">

    <form id="frmFD">
        <fieldset id="frmFDfieldset">
            <div class="form-group col-md-3 col-sm-3 col-xs-12">
                <label class="control-label">@Lb["Producto"]: <span style="font-size:1.1rem" class="text-info"><a id="descProducto"></a></span></label>
                <input id="producto" onkeyup="pasarSigCampo(event,'cantidad')" class="form-control autocompleteTH" autocomplete="off" autofocus type="text" disabled="@(Model.Id != 0 ? "disabled" : null)" />
            </div>

            <div class="form-group col-md-2 col-sm-2 col-xs-4">
                <label class="control-label">@Lb["Cantidad"]:</label>
                <input id="cantidad" onkeyup="pasarSigCampo(event,'precio')" class="form-control numerico" value="1" type="text" disabled="@(Model.Id != 0 ? "disabled" : null)" />
            </div>

            <div class="form-group col-md-2 col-sm-2 col-xs-6">
                <label class="control-label">@Lb["Precio"]:</label>
                <input id="precio" onkeyup="pasarSigCampo(event,'submitFrmFD')" class="form-control moneda" type="text" disabled="@(Model.Id != 0 ? "disabled" : null)" />
            </div>

            <div hidden class="form-group col-md-3 col-sm-3 col-xs-6">
                <label class="control-label">@Lb["Descuento"]:</label>
                <input id="descuento" class="form-control porcentaje" value="0" type="text" disabled="@(Model.Id != 0 ? "disabled" : null)" />
            </div>

            <div hidden class="form-group col-md-3 col-sm-3 col-xs-6">
                <label class="control-label">@Lb["IVA"]:</label>
                <input id="iva" class="form-control" type="text" disabled="@(Model.Id != 0 ? "disabled" : null)" />
            </div>

            <div @est class="form-group col-md-1 col-sm-1 col-xs-1" style="padding-top: 2.3rem;">
                <a onkeyup="pasarSigCampo(event,'producto')" onclick="" id="submitFrmFD" class="btn btn-primary"><span><i class="fas fa-plus-circle"></i></span></a>
            </div>
            <div class="form-group col-md-3 col-sm-3 col-xs-12" style="padding-top: 2.3rem;">
                <label style="font-size:2rem" class="control-label pull-right">@Lb["Total"]: <span id="totalFactura"></span></label>
            </div>
        </fieldset>
    </form>

</div>
<div class="row">
    <div class="form-group col-md-12 col-sm-12 col-xs-12" style="padding-top: 1rem;" @est>
        @*<a class="btn btn-success pull-right" onclick="guardarCambios()">@Lb["Facturar"]</a>*@
        <a class="btn btn-success pull-right" onclick="facturar()">@Lb["Facturar"]</a>
        <a class="btn btn-default pull-right" onclick="cancelar()">@Lb["Cancelar"]</a>
    </div>
</div>
<div class="row">
    <div class="col-md-12 col-sm-12 hidden-xs">
        <div class="table-responsive">
            <table id="tblFD" class="table table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th style="width:10%">@Lb["Cantidad"]</th>
                        <th style="width:48%">@Lb["Producto"]</th>
                        <th style="width:16%">@Lb["PrecioUnit"]</th>
                        <th style="width:18%">@Lb["Total"]</th>
                        <th style="width:8%" @est>@Lb["Acción"]</th>
                    </tr>

                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <div class="d-xl-none d-lg-none d-md-none d-sm-none">
        <div class="table-responsive">
            <table id="tblFDxs" class="table table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th style="width:70%">@Lb["Producto"]</th>
                        <th style="width:20%">@Lb["Total"]</th>
                        <th style="width:10%" @est>@Lb["Acción"]</th>
                    </tr>

                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <div hidden>
        <table id="tblFDTicket" class="table table-borderless" style="width:100%">
            <thead>
                <tr>
                    <th style="width:70%">@Lb["Producto"]</th>
                    <th style="width:20%">@Lb["Cant."]</th>
                    <th style="width:10%">@Lb["SubTotal"]</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

</div>

<div class="modal fade" id="lineaModal" tabindex="-1" role="dialog" aria-labelledby="lineaModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header row">
                <div class="col-md-10 col-sm-10 col-xs-10" style="text-align:left">
                    <h4 class="modal-title" id="lineaModalLabel">@Lb["Editar"] @Lb["Línea"]</h4>
                </div>
                <div class="col-md-2 col-sm-2 col-xs-2" style="text-align:right">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
            <div class="modal-body row">
                <div hidden class="form-group col-md-2 col-sm-2 col-xs-12">
                    <input readonly id="idLinea" class="form-control" type="number" />
                </div>
                <div class="form-group col-md-2 col-sm-2 col-xs-12">
                    <label class="control-label">@Lb["Cantidad"]:</label>
                    <input id="cantidadEditar" class="form-control numerico" value="1" type="text" />
                </div>
                <div class="form-group col-md-4 col-sm-4 col-xs-12">
                    <label class="control-label">@Lb["Precio"]:</label>
                    <input id="precioEditar" class="form-control moneda" type="text" />
                </div>

                <div class="form-group col-md-3 col-sm-3 col-xs-12">
                    <label class="control-label">@Lb["Descuento"]:</label>
                    <input id="descuentoEditar" class="form-control porcentaje" value="0" type="text" />
                </div>
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <button type="button" onclick="editarLinea()" data-dismiss="modal" class="btn btn-success">@Lb["Guardar"]</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                </div>
            </div>

        </div>
    </div>
</div>


<div id="formaPagoPartial">

</div>


<div class="modal fade" id="impresionModal" tabindex="-1" role="dialog" aria-labelledby="impresionModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header row">
                <div class="col-md-10 col-sm-10 col-xs-10">
                    <h4 class="modal-title" id="impresionModalCenterTitle">@Lb["Impresión"]</h4>
                </div>
                <div class="col-md-2 col-sm-2 col-xs-2">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="btn-group col-md-12 col-sm-12 col-xs-12">
                        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="GetPDF(1, true)">@Lb["Carta"]</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="GetPDF(2, true)">@Lb["MediaCarta"]</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="GetPDF(3, true)">@Lb["Tiquete"]</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="GetPDF(4, true)">@Lb["Personalizado"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <!-- Modal -->
    <div class="modal fade bd-example-modal-lg" id="modalContacto" tabindex="-1" role="dialog" aria-labelledby="departamentoModallabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">

                <div class="modal-body" id="CrearContactoPartial">
                    <div class="col-md-1 col-sm-1 col-xs-1">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input hidden id="monedaFormatter" class="moneda" type="text" />
<input hidden id="auxFormat" class="moneda" type="text" />
<input hidden id="moneyFormatter" class="money" type="text" />
<script src="~/js/comentario.js"></script>
<script src="~/js/base64ImageCreator.js"></script>
<script>

    ///////factura
    var $totalFactura = $('#totalFactura');
    var idTipoPrecio = 0;
    var idCajaPuntoVenta = 0;
    var totalCredito = 0;
    var maximoCredito = 0;

    ///////linea
    var $item = $('#producto');
    var $cantidad = $('#cantidad');
    var $precio = $('#precio');

    var monedas = [];
    var items = [];
    var lineas = [];
    var lineasAgregadas = [];
    var lineasCrOrUp = [];
    var lineasEliminadas = [];
    var totalFactura = 0;

    var facturaModel = "";

    var arrayPV = [];

    var forzarCliente = '@ViewBag.idContacto'
    $(document).ready(function () {
        getContactos();

        $('.selectItems').select2();

        $(".numerico").inputmask({
            'alias': 'decimal',
            rightAlign: false,
            min: 0
        });

        $(".money").inputmask('currency', {
            prefix: '',
            rightAlign: true,
            min: 0
        });


        $(".porcentaje").inputmask({
            'alias': 'percentage',
            rightAlign: false,
            min: 0,
            max: 100
        });

        facturaModel = getFormData();


        getMonedas();
        comprobarBorrador();

        $('.selectItems').on('change', function () {
            setFacturaModel();
        });

        $('#selectPuntoVenta').on('change', function () {
            setConfiguracionPV(false);
            limpiarLinea();
        });

        $('#IdVendedor').on('change', function () {
            validarCajasAbiertas();
        });

        $('#IdCliente').on('change.select2', function () {
            getTotalCredito();
            getMaximoCredito();
            getIdTipoPrecioCliente();
            limpiarLinea();
        });
        $('#modalContacto').on('hidden.bs.modal', function () {
            getContactos();
        });

         $('#IdCliente').focus();

        getTotalCredito();
        getMaximoCredito();
        if (@Model.Id != 0) {
            if ($('#Tipo').val() == "2") {
                document.getElementById("cambiarPago").disabled = true;
            }
            if ('@Model.Estado' === "Anulada") {
                document.getElementById("btnAnular").disabled = true;
                 document.getElementById("cambiarPago").disabled = true;
            }
        }

         });
    function Anular() {
        bootbox.confirm("@Lb["confirmAnular"]", function (result) {

                 if (result) {

                         var url = "@Url.Action("Anular", "Factura")";
                     $.ajax({
                         type: "POST",
                         url: url,
                         data: {id: @Model.Id},
                             success: function (data) {
                              console.log(data);
                                 document.getElementById("btnAnular").disabled = true;
                                  document.getElementById("cambiarPago").disabled = true;
                              },
                             error: function (err, scnd) {
                                console.log(err.statusText);
                             }

                     });

                 }
        });

    }
    function at() {
       $('#modalContacto').modal('hide');
    }
    function validarCredito() {
        var tipo = $('#Tipo').val()
        if (tipo == 2) {
            var monto = parseFloat($('#precio').inputmask('unmaskedvalue'));
            var total = monto + parseFloat(totalCredito);
            if (total > maximoCredito)
                return false;
            else
                return true;
        } else {
            return true;
        }

    }

    function getMaximoCredito() {
        var idc = parseInt($("#IdCliente option:selected").val());
        var url = "@Url.Action("GetMaximoCredito", "Nota", new { idCliente= "__id__"})".replace("__id__",  idc);
        $.ajax({
            type: "GET",
            url: url,
            success: function (data) {
                maximoCredito = data;
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }

        });
    }
    function getContactos() {
        $("#IdCliente").html('');
        if (forzarCliente == 0) {
            forzarCliente=@Model.IdCliente;
        }
        console.log("Datos:" + forzarCliente);
               $.ajax({
            type: "get",
            dataType: "json",
            url: '@Url.Action("GetAllClientes", "Contacto")',
            success: function (data) {
                if (forzarCliente == 0) {
                    for (var i = 0; i < data.length; i++) {
                        if (data[i].persona)
                            nombre = data[i].nombre + ' ' + data[i].apellidos;
                        else
                            nombre = data[i].nombreComercial;
                        var o = new Option(nombre, data[i].idContacto);
                        $("#IdCliente").append(o);
                    }
                } else {
                   for (var i = 0; i < data.length; i++) {
                       if (forzarCliente == data[i].idContacto) {
                            if (data[i].persona)
                                nombre = data[i].nombre + ' ' + data[i].apellidos;
                            else
                                nombre = data[i].nombreComercial;
                            var o = new Option(nombre, data[i].idContacto);
                            $("#IdCliente").append(o);
                        }
                    }
                }
            },
            error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
            }
        });


    }
    function crearContacto() {
     var url = "@Url.Action("CrearContacto", "Contacto", new { tipo= 2})";
        $.ajax({
            type: "GET",
            url: url,
            success: function (data) {
                 $('#CrearContactoPartial').html(data);
                $('#modalContacto').modal('show');
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }

        });
    }
    function getTotalCredito() {
        var idc = parseInt($("#IdCliente option:selected").val());
        var url = "@Url.Action("GetTotalCredito", "Nota", new { idCliente= "__id__"})".replace("__id__",  idc);
        $.ajax({
            type: "GET",
            url: url,
            success: function (data) {
                totalCredito = data;
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }

        });
    }

    function getFormData() {
        var unindexed_array = $('#frmFactura ').serializeArray();

        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {

            indexed_array[n['name']] = n['value'];
        });

        indexed_array['FacturaDetalle'] = lineasCrOrUp;
        //indexed_array['lineas'] = lineas;

        return indexed_array;
    }

    ///////////////////////////////////////////////////manejo detalle f///////////////////////////////////

    function limpiarLinea() {
        $('#producto').val("");
        $('#cantidad').val(1);
        $('#precio').val(0);
        $('#descProducto').text("");

    }

    $('#submitFrmFD').on('click', function () {
        $('#cantidad').focus();
        prepararLinea();
    });

    $('#producto').on('focusout', function () {

        setTimeout(function () {
            if ($('#producto').val().replace(/ /g, "") !== "")
                cargarInfoItem($('#producto').val());
            else
                limpiarLinea();
        }, 250);

    });

    function pasarSigCampo(e, id) {

        (e.keyCode) ? k = e.keyCode : k = e.which;

        if (k == 13) {
            if (id == "submitFrmFD") {


                prepararLinea();

            }
            else {
                document.getElementById(id).focus();

            }

            $('#' + id).select();
        }
    }

    function prepararLinea() {
        if (validarCredito()) {
            guardarLinea();
            cargarTabla(lineas);
            $item.focus();
            $item.select();
            $cantidad.val(1);
            limpiarLinea();
        } else {
             cargarAlert('@Lb["ExcedioCredito"]');
        }
    }

    function cargarLineas(data) {

        for (var i = 0; i < data.length; i++) {
            var moneda = @Model.IdMoneda;
            var model = {
                id: data[i].id,
                idFactura: @Model.Id,
                idInventario: data[i].idInventario,
                cantidad: data[i].cantidad,
                precio: moneda === 1 ? data[i].precioBase : moneda == 2 ? data[i].precioDolar : data[i].precioEuro,
                porcIva: data[i].porcIva,
                porcDescuento: data[i].porcDescuento,
                porcExoneracion: data[i].porcExoneracion,
                fechaCreacion: data[i].fechaCreacion,
                idUsuarioCreador: data[i].idUsuarioCreador,
                subTotal: moneda === 1 ? data[i].subTotalBase : moneda === 2 ? data[i].subTotalDolar : data[i].subTotalEuro,
                subTotalGravado: moneda === 1 ? data[i].subTotalGravadoBase : moneda === 2 ? data[i].subTotalGravadoDolar : data[i].subTotalGravadoEuro,
                subTotalExcento: moneda === 1 ? data[i].subTotalExcentoBase : moneda === 2 ? data[i].subTotalExcentoDolar : data[i].subTotalExcentoEuro,
                subTotalGravadoNeto: moneda === 1 ? data[i].subTotalGravadoNetoBase : moneda === 2 ? data[i].subTotalGravadoNetoDolar : data[i].subTotalGravadoNetoEuro,
                subTotalExcentoNeto: moneda === 1 ? data[i].subTotalExcentoNetoBase : moneda === 2 ? data[i].subTotalExcentoNetoDolar : data[i].subTotalExcentoNetoEuro,
                montoDescuento: moneda === 1 ? data[i].montoDescuentoBase : moneda === 2 ? data[i].montoDescuentoDolar : data[i].montoDescuentoEuro,
                montoIva: moneda === 1 ? data[i].montoIvabase : moneda === 2 ? data[i].montoIvadolar : data[i].montoIvaeuro,
                total: moneda === 1 ? data[i].totalBase : moneda === 2 ? data[i].totalDolar : data[i].totalEuro,
                fechaVencimiento: data[i].fechaVencimiento,
                montoExoneracion: moneda === 1 ? data[i].montoExoneracionBase : moneda === 2 ? data[i].montoExoneracionDolar : data[i].montoExoneracionEuro,
                idMonedaFD: moneda
            };

            lineas.push(model);


        }

        cargarTabla(lineas);
        calcularTotales();
    }


    function guardarLinea() {

        var producto = getItemPorCodigo($item.val());

        var precioItem = getPrecioItem(producto);
        $('#auxFormat').val(precioItem);


        var model = {
            id: 0,
            idFactura: @Model.Id,
            idInventario: producto.idInventario,
            cantidad: parseFloat($('#cantidad').val()),
            precio: $('#auxFormat').inputmask('unmaskedvalue') == $('#precio').inputmask('unmaskedvalue') ? precioItem : parseFloat($('#precio').inputmask('unmaskedvalue')),
            porcIva: parseFloat($('#iva').val()),
            porcDescuento: parseFloat($('#descuento').inputmask('unmaskedvalue')),
            porcExoneracion: 0,
            fechaCreacion: "@DateTime.Now",
            idUsuarioCreador: "@User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value",
            subTotal: calcularSubtotalLinea(),
            subTotalGravado: calcularSubTotalGravadoLinea(),
            subTotalExcento: calcularSubTotalExcentoLinea(),
            subTotalGravadoNeto: calcularSubTotalGravadoNetoLinea(),
            subTotalExcentoNeto: calcularSubTotalExcentoNetoLinea(),
            montoDescuento: calcularDescuentoLinea(),
            montoIva: calcularMontoIvaLinea(producto.impuestoVenta),
            total: calcularTotalLinea(),
            fechaVencimiento: "@DateTime.Now.AddDays(30)",
            montoExoneracion: calcularExoneracion(),
            idMonedaFD: $('#IdMoneda').val()
        };


        var existe = existeLinea(model.idInventario);
        if (existe != null) {

            lineasCrOrUp.splice($.inArray(lineas[existe], lineasCrOrUp), 1);

            lineas[existe].cantidad += model.cantidad;
            lineas[existe].subTotal += model.subTotal;
            lineas[existe].montoDescuento = model.montoDescuento;
            lineas[existe].montoIva += model.montoIva;
            lineas[existe].subTotalGravado += model.subTotalGravado;
            lineas[existe].subTotalGravadoNeto += model.subTotalGravadoNeto;
            lineas[existe].subTotalExcento += model.subTotalExcento;
            lineas[existe].subTotalExcentoNeto += model.subTotalExcentoNeto;
            lineas[existe].montoExoneracion += model.montoExoneracion;
            lineas[existe].total += model.total;

            lineasCrOrUp.push(lineas[existe]);

        } else {
            lineas.push(model);
            lineasCrOrUp.push(model);
        }

        calcularTotales();
        setFacturaModel();

    }
    ///////////////////////////////////////eliminar editar linea//////////////////////////////

    function eliminarLinea(key, idDetalle) {

         bootbox.confirm("@Lb["confirmEliminarLinea"]", function (result) {

             if (result) {

                 lineasCrOrUp.splice($.inArray(lineas[key], lineasCrOrUp), 1);
                 if (lineas[key].id !== 0)
                     lineasEliminadas.push(lineas[key].id);
                 lineas.splice(key, 1);
                 calcularTotales();
                 setFacturaModel();
                 cargarTabla(lineas);

             }
        });


    }

    function modalEditarLinea(key, idDetalle) {
        var linea = lineas[key];

        $('#idLinea').val(key);
        $('#cantidadEditar').val(linea.cantidad);
        $('#precioEditar').val(linea.precio);
        $('#descuentoEditar').val(linea.porcDescuento);

        $('#lineaModal').modal('show');

    }

    function editarLinea() {
        var key = parseInt($('#idLinea').val());

        var producto = getItemPorId(lineas[key].idInventario);

        var precioItem = getPrecioItem(producto);
        $('#auxFormat').val(precioItem);

        lineas[key].cantidad = parseFloat($('#cantidadEditar').val());
        lineas[key].precio = $('#auxFormat').inputmask('unmaskedvalue') == $('#precioEditar').inputmask('unmaskedvalue') ? precioItem : parseFloat($('#precioEditar').inputmask('unmaskedvalue'));//parseFloat($('#precioEditar').inputmask('unmaskedvalue'));
        lineas[key].porcDescuento = parseFloat($('#descuentoEditar').inputmask('unmaskedvalue'));

        var subTotal = lineas[key].cantidad * lineas[key].precio;
        var descuento = subTotal * (lineas[key].porcDescuento / 100);

        var imp = lineas[key].porcIva;
        lineas[key].subTotal = subTotal;
        lineas[key].montoDescuento = descuento;
        lineas[key].montoIva = (subTotal - descuento) * (imp / 100);
        lineas[key].subTotalGravado = imp > 0 ? subTotal : 0;
        lineas[key].subTotalGravadoNeto = imp > 0 ? subTotal - descuento : 0;
        lineas[key].subTotalExcento = imp === 0 ? subTotal : 0;
        lineas[key].subTotalExcentoNeto = imp === 0 ? subTotal - descuento : 0;
        lineas[key].montoExoneracion = lineas[key].montoIva * (lineas[key].porcExoneracion / 100);
        lineas[key].total = (subTotal - descuento) + (lineas[key].montoIva - lineas[key].montoExoneracion);


        var flag = false;
        for (var i = 0; i < lineasCrOrUp.length; i++) {
            if (lineasCrOrUp[i].idInventario == lineas[key].idInventario) {
                lineasCrOrUp[i] = lineas[key];
                flag = true;
                break;
            }
        }

        if (!flag)
            lineasCrOrUp.push(lineas[key]);

        calcularTotales();
        cargarTabla(lineas);

        setFacturaModel();

    }
    ///////////////////////////////////////fin eliminar editar linea//////////////////////////////


    ////////////////////////////////calcular totales linea///////////////////////////////////

    function calcularSubtotalLinea() {

        var precioItem = getPrecioItem(getItemPorCodigo($item.val()));
        $('#auxFormat').val(precioItem);

        var nuevoPrecio = $('#auxFormat').inputmask('unmaskedvalue') == $('#precio').inputmask('unmaskedvalue') ? precioItem : parseFloat($('#precio').inputmask('unmaskedvalue'));

        return parseFloat($('#cantidad').val()) * nuevoPrecio;//parseFloat($('#precio').inputmask('unmaskedvalue'));
    }

    function calcularSubTotalGravadoLinea() {
        var imp = parseFloat($('#iva').val());

        if (imp != 0) {
            return calcularSubtotalLinea();
        }
        else
            return 0;
    }

    function calcularSubTotalExcentoLinea() {
        var imp = parseFloat($('#iva').val());
        if (imp != 0) {
            return 0;
        }
        else
            return calcularSubtotalLinea();
    }

    function calcularSubTotalGravadoNetoLinea() {
        var imp = parseFloat($('#iva').val());
        if (imp != 0) {
            return calcularSubTotalGravadoLinea() - calcularDescuentoLinea();
        }
        else
            return 0;
    }

    function calcularSubTotalExcentoNetoLinea() {

        var imp = parseFloat($('#iva').val());
        if (imp != 0) {
            return 0;
        }
        else
            return calcularSubTotalExcentoLinea() - calcularDescuentoLinea();
    }

    function calcularDescuentoLinea() {
        var desc = parseFloat($('#descuento').inputmask('unmaskedvalue'));
        if (desc != 0)
            return calcularSubtotalLinea() * (desc / 100);
        else return 0;
    }



    function calcularMontoIvaLinea() {
        var imp = parseFloat($('#iva').val());

        if (imp != 0)
            return (calcularSubtotalLinea() - calcularDescuentoLinea()) * (imp / 100);
        else
            return 0;
    }

    function calcularExoneracion() {
        var porc = 0;
        if (porc != 0)
            return calcularMontoIvaLinea * (porc / 100);
        else
            return 0;
    }

    function calcularTotalLinea() {

        return (calcularSubTotalExcentoNetoLinea() + calcularSubTotalGravadoNetoLinea()) + (calcularMontoIvaLinea() - calcularExoneracion());

    }

    function existeLinea(idInventario) {
        var linea = null;
        for (var i = 0; i < lineas.length; i++) {
            if (lineas[i].idInventario === idInventario && lineas[i].precio == parseFloat($('#precio').inputmask('unmaskedvalue'))) {
                linea = i;
                break;
            }
        }

        return linea;
    }


    /////////////////////////////////////////////fin de calc linea///////////////////////////////////




    ////////////////////////////////////////////////fin manejo de detalle f/////////////////////////////////////////

    //////////////////////////////////////////////manejo factura//////////////////////////////////////////

    function getPuntoVentaLocal() {

        for (var i = 0; i < arrayPV.length; i++) {
            if (arrayPV[i].idPuntoVenta == $('#selectPuntoVenta').val()) {
                return arrayPV[i];
            }
        }

    }

    function setConfiguracionPV(primeraVez = false) {

        var pv = getPuntoVentaLocal();
        if (!primeraVez) {
            $('#IdCliente').val(pv.idContactoClienteDefecto);
            //$('#IdCliente').trigger('change');
        }
        $('#IdCliente').trigger('change');

        setMonedaFactura(pv.idMonedaFacturaDefecto);

        //se llama en el trigger change de select cliente
        //getIdTipoPrecioCliente();

        validarCajasAbiertas();
    }

    function setMonedaFactura(codigo) {

        $('.moneda').inputmask('remove');
        $('#IdMoneda').val(codigo);
        var simbolo = "";
        switch (codigo) {
            case 1:
                simbolo = monedas[0].simbolo;
                break;
            case 2:
                simbolo = monedas[1].simbolo;
                break;
            case 3:
                simbolo = monedas[2].simbolo;
                break;
            default:
        }

        $(".moneda").inputmask('currency', {
            prefix: simbolo + ' ',
            rightAlign: true,
            min: 0
        });


    }

    ///////////////////////////////////////////////calculos de factura/////////////////////////////////////


    function calcularTotales() {

        facturaModel.Total = 0;
        facturaModel.SubTotal = 0;
        facturaModel.SubTotalExcento = 0;
        facturaModel.SubTotalExcentoNeto = 0;
        facturaModel.SubTotalGravado = 0;
        facturaModel.SubTotalGravadoNeto = 0;
        facturaModel.TotalDescuento = 0;
        facturaModel.MontoIva = 0;

        for (var i = 0; i < lineas.length; i++) {
            facturaModel.Total += lineas[i].total;
            facturaModel.SubTotal += lineas[i].subTotal;
            facturaModel.SubTotalExcento += lineas[i].subTotalExcento;
            facturaModel.SubTotalExcentoNeto += lineas[i].subTotalExcentoNeto;
            facturaModel.SubTotalGravado += lineas[i].subTotalGravado;
            facturaModel.SubTotalGravadoNeto += lineas[i].subTotalGravadoNeto;
            facturaModel.TotalDescuento += lineas[i].montoDescuento;
            facturaModel.MontoIva += lineas[i].montoIva;
            facturaModel.MontoExoneracion += lineas[i].montoExoneracion;
        }

        $('#monedaFormatter').val(facturaModel.Total);
        $totalFactura.text($('#monedaFormatter').val());


    }

    /////////////////////////////////////////////////fin calc factura//////////////////////////////////////////

    function facturar() {

        if (lineas.length > 0) {
            if ($('#Tipo').val() == "1") {
                cargarFormaPago();
            }
            else {
                if (validarCreditoTotalFactura()) {
                    procesarPagoDoc();
                } else {
                     cargarAlert('@Lb["ExcedioCredito"]');
                }

            }
        }

    }
    function validarCreditoTotalFactura() {
        var total = facturaModel.Total;

            if (total > maximoCredito)
                return false;
            else
                return true;

    }

    function cargarFormaPago() {

        var model = {
            idCaja: idCajaPuntoVenta,
            idDocumento: @Model.Id,
            monto: facturaModel.Total.toString().replace(".", ","),
            tcDolar: $('#TipoCambioDolar').val(),
            tcEuro: $('#TipoCambioEuro').val(),
            moneda: $('#IdMoneda').val(),
            idContacto: $('#IdCliente').val(),
            esPagoContado: true,
            idTipoDocumento: 1
        };

        if (model.idCaja == 0)
            return;


        $.ajax({
            type: "POST",
            url: '@Url.Action("_FormaPago", "MovimientoCaja")',
            data: { viewModel: model, tipo: 1 },
            success: function (data) {
                $('#formaPagoPartial').html(data);
                $('#formaPagoModal').modal('show');
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }

        });

    }

    function procesarPagoDoc() {

        $.ajax({
            type: "POST",
            dataType: "json",
            url: '@Url.Action("CrearEditarFactura")',
            data: { viewModel: crearModelo(), detalle: crearModeloDetalle(lineasCrOrUp), eliminadas: lineasEliminadas },
            success: function (data) {

                if ($('#Tipo').val() == "1")
                    procesarPago(data.idDoc);
                else {
                    postProcesarPago(data.idDoc);
                }


            },
            error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
            }
        });

    }

    function postProcesarPago(idDocumento) {

        $('#Id').val(idDocumento);

        localStorage.removeItem("FacturaBorrador");
        $('#formaPagoModal').modal('hide');

        var pv = getPuntoVentaLocal();

        if (pv.opcionImpresion == 5) {
            $('#impresionModal').modal('show');
        }
        else if (pv.opcionImpresion == 0) {
            window.location.href = "@Url.Action("CrearFactura")";
        }
        else {
            GetPDF(pv.opcionImpresion, true);
        }
    }

    function setFacturaModel() {

        facturaModel.FacturaDetalle = lineasCrOrUp;
        //facturaModel.lineas = lineas;
        facturaModel.IdMoneda = $('#IdMoneda').val();
        facturaModel.TipoCambioEuro = $('#TipoCambioEuro').val();
        facturaModel.TipoCambioDolar = $('#TipoCambioDolar').val();
        facturaModel.IdVendedor = $('#IdVendedor').val();
        facturaModel.IdCliente = $('#IdCliente').val();
        facturaModel.Tipo = $('#Tipo').val();
        facturaModel.Estado = '@Model.Estado';
        facturaModel.FechaFactura = $('#FechaFactura').val();
        facturaModel.IdPuntoVenta = $('#selectPuntoVenta').val();

        guardarLocalStorage();

    }

    function crearModelo() {

        setFacturaModel();

        var model = {

            id: @Model.Id,
            idCliente: $('#IdCliente').val(),
            fechaFactura: facturaModel.FechaFactura,
            fechaCreacion: "@Model.FechaCreacion",
            fechaVencimiento: "@Model.FechaCreacion.AddDays(30)",
            idVendedor: $('#IdVendedor').val(),
            idUsuarioCreador: @User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value,
            idMoneda: $('#IdMoneda').val(),
            subTotal: facturaModel.SubTotal.toString().replace(".", ","),
            subTotalGravado: facturaModel.SubTotalGravado.toString().replace(".", ","),
            subTotalExcento: facturaModel.SubTotalExcento.toString().replace(".", ","),
            subTotalGravadoNeto: facturaModel.SubTotalGravadoNeto.toString().replace(".", ","),
            subTotalExcentoNeto: facturaModel.SubTotalExcentoNeto.toString().replace(".", ","),
            montoIva: facturaModel.MontoIva.toString().replace(".", ","),
            montoExoneracion: facturaModel.MontoExoneracion.toString().replace(".", ","),
            totalDescuento: facturaModel.TotalDescuento.toString().replace(".", ","),
            total: facturaModel.Total.toString().replace(".", ","),
            tipoCambioDolar: facturaModel.TipoCambioDolar,
            tipoCambioEuro: facturaModel.TipoCambioEuro,
            estado: '@Model.Estado',
            tipo: facturaModel.Tipo,
            idPuntoVenta: $('#selectPuntoVenta').val(),
            enCola: false,
            consecutivo: $('#Consecutivo').val()
        };

        return model;
    }

    function crearModeloDetalle(model) {

        for (var i = 0; i < model.length; i++) {
            model[i].cantidad = model[i].cantidad.toString().replace(".", ",");
            model[i].precio = model[i].precio.toString().replace(".", ",");
            model[i].subTotal = model[i].subTotal.toString().replace(".", ",");
            model[i].subTotalGravado = model[i].subTotalGravado.toString().replace(".", ",");
            model[i].subTotalExcento = model[i].subTotalExcento.toString().replace(".", ",");
            model[i].subTotalGravadoNeto = model[i].subTotalGravadoNeto.toString().replace(".", ",");
            model[i].subTotalExcentoNeto = model[i].subTotalExcentoNeto.toString().replace(".", ",");
            model[i].porcIva = model[i].porcIva.toString().replace(".", ",");
            model[i].montoIva = model[i].montoIva.toString().replace(".", ",");
            model[i].porcExoneracion = model[i].porcExoneracion.toString().replace(".", ",");
            model[i].montoExoneracion = model[i].montoExoneracion.toString().replace(".", ",");
            model[i].porcDescuento = model[i].porcDescuento.toString().replace(".", ",");
            model[i].montoDescuento = model[i].montoDescuento.toString().replace(".", ",");
            model[i].total = model[i].total.toString().replace(".", ",");
        }

        return model;
    }

    function guardarLocalStorage() {

        localStorage.removeItem("FacturaBorrador");
        localStorage.setItem("FacturaBorrador", JSON.stringify(facturaModel));

    }

    function comprobarBorrador() {

        var borrador = JSON.parse(localStorage.getItem("FacturaBorrador"));

        if (borrador !== null && borrador.FacturaDetalle.length !== 0 && borrador.Id === "@Model.Id") {
            bootbox.confirm("@Lb["DeseaReanudar"]", function (result) {

                if (result) {

                    facturaModel = borrador;

                    $('#Tipo').val(facturaModel.Tipo);
                    $('#IdCliente').val(facturaModel.IdCliente);
                    $('#IdVendedor').val(facturaModel.IdVendedor);
                    $('#selectPuntoVenta').val(facturaModel.IdPuntoVenta);

                    $('.selectItems').trigger('change.select2');

                    for (var i = 0; i < borrador.FacturaDetalle.length; i++) {
                        lineas.push(borrador.FacturaDetalle[i]);
                    }
                    lineasCrOrUp = borrador.FacturaDetalle;

                    cargarTabla(lineas);
                    calcularTotales();
                    //lineasActualizadas =
                }
                else
                    localStorage.removeItem("FacturaBorrador");
            });
        }
    }



    /////////////////////////////////////////////// fin manejo factura//////////////////////////////////////////
    function cargarTabla(data) {


        $("#tblFD > tbody").remove();
        $('#tblFD').append('<tbody></tbody>');

        $("#tblFDxs > tbody").remove();
        $('#tblFDxs').append('<tbody></tbody>');

        $("#tblFDTicket > tbody").remove();
        $('#tblFDTicket').append('<tbody></tbody>');

        contadorFila = 0;

        for (var i = 0; i < data.length; i++) {
            if (getItemPorId(data[i].idInventario).descripcionVenta == "Ninguna")
                var des = getItemPorId(data[i].idInventario).descripcion;
            else
                var des = getItemPorId(data[i].idInventario).descripcionVenta;


            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '">'
                + '<td >' + parseFloat(data[i].cantidad).toFixed(2) + ' </td>'
                + '<td ><span class="spanEdit" disabled onclick="modalEditarLinea(' + contadorFila + ', ' + data[i].id + ')">' +des+ '<span/></td>'
                + '<td style="text-align: right">' + darFomatoMoneda(data[i].precio) + '</td>'
                + '<td style="text-align: right">' + darFomatoMoneda(data[i].total) + '</td>'
                + '<td style="display:@est2" > <a  href="#" style="font-size:1.8rem;" onclick="modalEditarLinea(' + contadorFila + ', ' + data[i].id + ')" ><i class="fas fa-edit"></i></a>&nbsp;&nbsp; <a href="#" style="font-size:1.8rem;" value="' + contadorFila + '" onclick="eliminarLinea(' + contadorFila + ', ' + data[i].id + ')" ><i class="fas fa-trash"></i></a></td></tr>';

            var body2 = '<tr class="filasCargadas" id="filaxs' + contadorFila + '">'
                + '<td >' + getItemPorId(data[i].idInventario).descripcionVenta.substr(0, 30) + '</td>'
                + '<td style="text-align: right">' + darFomatoMoneda(data[i].total) + '</td>'
                + '<td style="display:@est2"> <a href="#" style="font-size:1.8rem;" onclick="modalEditarLinea(' + contadorFila + ', ' + data[i].id + ')" ><i class="fas fa-edit"></i></a>&nbsp;&nbsp; <a href="#" style="font-size:1.8rem;" value="' + contadorFila + '" onclick="eliminarLinea(' + contadorFila + ', ' + data[i].id + ')" ><i class="fas fa-trash"></i></a></td></tr>';


            $('#tblFDxs > tbody').append(body2);

            $('#tblFD > tbody').append(body);

            contadorFila++;

        }
        if(@Model.Id !=0)
        $(".spanEdit").css("pointer-events", "none");

    }

    function cargarInfoItem(codigo) {

        $('#precio').val("");

        var flag = true;
        for (var i = 0; i < items.length; i++) {
            if (codigo === items[i].codigo) {
                flag = true;
                $('#precio').val(getPrecioItem(items[i]));
                $('#descuento').val(0);
                $('#iva').val(items[i].impuestoVenta);
                $('#descProducto').text(items[i].descripcionVenta.substr(0, 32) + (items[i].descripcionVenta.length > 25 ? '...' : '')).prop('href', '@Url.Action("EditarInventario", "Inventario", new { id = "__id__" })'.replace("__id__", items[i].idInventario));
                break;
            }
            else {
                flag = false;
            }
        }

        if (!flag) {
            cargarAlert("@Lb["itemInvalido"]");
        }

    }

    function getPrecioItem(item) {

        switch (parseInt($('#IdMoneda').val())) {
            case 1:
                return getPrecioFromLista(item.tbPrPrecioCatalogo);
                break;
            case 2:
                return getPrecioFromLista(item.tbPrPrecioCatalogo) / parseFloat($('#TipoCambioDolar').val());
                break;
            case 3:
                return getPrecioFromLista(item.tbPrPrecioCatalogo) / parseFloat($('#TipoCambioEuro').val());
                break;
        }

    }

    function getPrecioFromLista(lista) {

        for (var i = 0; i < lista.length; i++) {
            if (idTipoPrecio == lista[i].idTipoPrecio)
                return lista[i].precioSinImpuesto;
        }
    }

    function getIdTipoPrecioCliente() {
        if (!($('#IdCliente').val() == null)) {
   
         $.ajax({
             type: "get",
             dataType: "json",
             url: '@Url.Action("GetIdTipoPrecioCliente", "Factura", new { idCliente = "__id__" })'.replace("__id__", $('#IdCliente').val()),
             success: function (data) {

                 var pv = getPuntoVentaLocal();
                 if (data != 0 && pv.idContactoClienteDefecto != $('#IdCliente').val())
                     idTipoPrecio = data;
                 else
                     idTipoPrecio = pv.idTipoPrecioDefecto;

             },
             error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
             }
            });
        }
    }


    function getMonedas() {
         $.ajax({
              type: "get",
              dataType: "json",
              url: '@Url.Action("GetMonedas", "Monedas")',
             success: function (data) {

                 monedas = data;
                 $('#TipoCambioDolar').val(data[1].valorCompra);
                 $('#TipoCambioEuro').val(data[2].valorCompra);

                 getPuntoVenta();

              },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
         });
    }

    function getPuntoVenta() {
        $.ajax({
            type: "get",
            dataType: "json",
            url: '@Url.Action("GetPuntosVentas", "PuntoVenta")',
            success: function (data) {

                for (var i = 0; i < data.length; i++) {
                    if (data[i].inactivo && @Model.Id != 0 && @Model.IdPuntoVenta == data[i].idPuntoVenta)
                        arrayPV.push(data[i]);
                    else if (!data[i].inactivo)
                        arrayPV.push(data[i]);
                }

                var flag = false;
                for (var i = 0; i < arrayPV.length; i++) {

                    var o = new Option(arrayPV[i].nombre, arrayPV[i].idPuntoVenta);

                    if (@Model.Id != 0 && arrayPV[i].idPuntoVenta == @Model.IdPuntoVenta) {
                        $(o).attr('selected', true);
                        if (arrayPV[i].inactivo) {
                            $("#puntoVentaValid").attr("hidden", false);
                        }
                        flag = true;

                    }
                    else if (arrayPV[i].esPorDefecto && !flag && @Model.Id == 0) {
                        $('#IdCliente').val(arrayPV[i].idContactoClienteDefecto);
                        $(o).attr('selected', true);

                    }

                    $('#selectPuntoVenta').append(o);
                }

                setConfiguracionPV(true);
                getInventario();

            },
            error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
            }
        });
    }

    function validarCajasAbiertas() {

        $.ajax({
              type: "POST",
            dataType: "json",
            url: '@Url.Action("GetEstadoCajasPuntoVenta", "PuntoVenta")',
            data: { idPV: $('#selectPuntoVenta').val(), idUsuario: $('#IdVendedor').val() },
            success: function (data) {
                if (data <= 0) {
                    $('#frmFDfieldset').prop('disabled', true);
                    cargarAlert('@Lb["PuntoVentaSinCajasAbiertas"]');
                    idCajaPuntoVenta = data;
                }
                else {
                    $('#frmFDfieldset').prop('disabled', false);
                    idCajaPuntoVenta = data;
                }


             },
             error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
             }
        });

    }


    function getInventario() {

         $.ajax({
              type: "get",
             dataType: "json",
             url: '@Url.Action("GetInventarioFacturable", "Inventario", new { id = "__id__" })',
             success: function (data) {

                 items = data;
                  cargarItems(data);
                  if (@Model.Id != 0)
                    getDetalles();
              },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
         });
    }

    function getDetalles() {

         $.ajax({
              type: "get",
              dataType: "json",
              url: '@Url.Action("GetFacturaDetalle", "Factura")',
             success: function (data) {
                 cargarLineas(data);

             },
             error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
              }
         });
    }

    function cargarItems(data) {
        var itemsAuto = [];

        for (var i = 0; i < data.length; i++) {
            itemsAuto.push({ value: data[i].id, text: data[i].codigo });
        }

        $('.autocompleteTH').autoComplete({
            resolver: 'custom',
            formatResult: function (item) {
                return {
                    value: item.idInventario,
                    text:  item.codigo,
                    html: [
                        item.codigo + ' - ',
                        item.descripcion
                    ]
                };
            },
            events: {
                search: function (_keyword, callback) {
                    var keyword = _keyword.toUpperCase();
                    var filtrado = [];
                    //var array = contactos;
                    if (keyword.replace(/ /g, "") === "") {
                        filtrado = [];
                    }
                    else {
                        for (var i = 0; i < items.length; i++) {

                            var keyArray = items[i].codigo.toUpperCase();
                            var keyArray2 = items[i].descripcion.toUpperCase();

                            if (keyArray.indexOf(keyword) > -1  )
                                filtrado.push(items[i]);
                            else
                                if (keyArray2.indexOf(keyword) > -1)
                                    filtrado.push(items[i]);
                        }

                    }

                    callback(filtrado);
                }
            },
            noResultsText: '@Lb["sinResultados"]',
            autoSelect: false,
            minLength: 3,

        });

    }

    function getItemPorCodigo(codigo) {
        for (var i = 0; i < items.length; i++) {
            if (codigo === items[i].codigo) {
                return items[i];
            }
        }
    }

    function getItemPorId(id) {
        for (var i = 0; i < items.length; i++) {
            if (id === items[i].idInventario) {
                return items[i];
            }
        }
    }

    function darFomatoMoneda(value) {

        $('#monedaFormatter').val(value);
        return $('#monedaFormatter').val();

    }

    function darFomatoDinero(value) {

        $('#moneyFormatter').val(value);
        return $('#moneyFormatter').val();

    }


    /////////////////////////////////////////////////////////////////////////crear pdf/impresion///////////////////////////////////

    function crearPdf() {

        var model = crearModeloPDF();
        var pdf = generate_cutomPDF(model);

        pdf.save(model.nombreDescarga);


    }

    function imprimirCarta() {
        var model = crearModeloPDF();
        var pdf = generate_cutomPDF(model);
        pdf.autoPrint();
        window.open(pdf.output('bloburl'), '_blank');

    }

    //function imprimirTicket1() {
    //    var model = crearModeloPDF();
    //    var pdf = generate_cutomPDFTicket(model);
    //    //pdf.autoPrint();
    //    window.open(pdf.output('bloburl'), '_blank');
    //}


    function getEstado() {
        if ('@Model.Estado' === "0")
            return "@Lb["FacturaAnulada"]";
        else
            return "";
    }

    function cancelar() {
        bootbox.confirm("@Lb["confirmCancelar"]", function (result) {
            if (result) {
                localStorage.removeItem("FacturaBorrador");
                window.location.href = "@Url.Action("ListarFacturas")";
            }
        });
    }

    function getTipoReporte(tipo) {
        //1 carta
        //2 media carta
        //3 tiquete
        //4 personalizado

        var reporte = "";

        switch (parseInt(tipo)) {
            case 1:
                reporte = "FacturaCarta";
                break;
            case 2:
                reporte = "FacturaMediaCarta";
                break;
            case 3:
                reporte = "Facturaticket";
                break;
            case 4:
                reporte = JSON.parse(localStorage.getItem("empresaInfo")).ced;
                break;
            default:
                reporte = "FacturaCarta";
        }

        return reporte;
    }

    function GetReporte(tipo) {

        var reporte = getTipoReporte(tipo);

        var parametros = [];

        parametros.push({ nombre: "idFactura", valor: '@Model.Id'});
        parametros.push({ nombre: "idEmpresa", valor: '@Context.Session.GetInt32("idEmpresa")' });
        parametros.push({ nombre: "idContacto", valor : $("#IdCliente option:selected").val()});

        $.ajax({
            type: "POST",
            url: '@Url.Action("ReporteGeneral", "VistaReporte")',
            data: { NombreReporte: reporte, parametros: parametros },
             success: function (data) {

                 var myWindow = window.open('', '', '');
                 var doc = myWindow.document;
                 doc.open();
                 doc.write(data);
                 doc.close();

             },
             error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
             }
        });

    }

    function GetPDF(tipo, volver) {

        var reporte = getTipoReporte(tipo);

        var parametros = [];

        parametros.push({ nombre: "idFactura", valor: $('#Id').val()});
        parametros.push({ nombre: "idEmpresa", valor: '@Context.Session.GetInt32("idEmpresa")' });

        var data = { NombreReporte: reporte, parametros: parametros };

        $.ajax({
            type: "POST",
            url: '@Url.Action("ReportePDF", "VistaReporte")',
            cache: false,
            xhr: function () {// Seems like the only way to get access to the xhr object
                var xhr = new XMLHttpRequest();
                xhr.responseType = 'blob'
                return xhr;
            },
            data:data,
            success: function (data) {
                //var reader = new FileReader();
                //reader.readAsDataURL(data);

                var file = new Blob([data], { type: 'application/pdf' });
                var fileURL = URL.createObjectURL(file);
                var w = window.open(fileURL);
                if (!w == null) {
                    w.print();
                }

                if (volver)
                     window.location.href = "@Url.Action("CrearFactura")";

            },
            error: function () {
                cargarAlert("@Lb["errorGeneral"]");
            }
        });

    }


</script>

<script src="~/lib/vendors/jsPDF/FA.js"></script>