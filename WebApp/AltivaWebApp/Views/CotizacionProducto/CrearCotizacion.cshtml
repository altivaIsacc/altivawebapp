@model AltivaWebApp.ViewModels.CotizacionViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
@inject IStringLocalizer<SharedResources> Lb

@{
    ViewData["Title"] = "CrearCotizacion";
    var monedas = ViewData["monedas"] as IList<TbSeMoneda>;
    var estado = "";
    var usuario = ViewData["usuario"] as TbSeUsuario;
}

<h2>@Lb["CrearCotizacion"]</h2>

<form id="CrearCotizacion">
    @Html.HiddenFor(x => x.IdCotizacion)
    @Html.HiddenFor(x => x.FechaCotizacion)
    @Html.HiddenFor(x => x.IdUsuarioCreador)
    @Html.HiddenFor(x => x.Estado)
    <div class="form-group">
        <div class="form-row">
            <div class="col-md-2">
                <fieldset>
                    <div class="form-group">
                        <label for="fecha">@Lb["Fecha"]:</label>
                        <div class='input-group date' id='fechaPicker'>
                            <input type='text' class="form-control" id="fecha" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="col-md-2">
                <label asp-for="IdCliente">@Lb["Cliente"]:</label>
                <select id="ddClientes" class="form-control search-key">
                    <option selected value="0">@Lb["Seleccione"]</option>

                </select>
            </div>
            <div class="col-md-2">
                <label>@Lb["Moneda"]:</label>
                <select id="ddMoneda" class="form-control search-key">
                    <option selected value="0">@Lb["Seleccione"]</option>
                </select>
            </div>
            <div class="col-md-2">
                <label>@Lb["Usuario"]:</label>
                <label id="lbCreador" class="form-control" disabled></label>
            </div>
            <div class="col-md-2">
                <label>@Lb["Vendedor"]:</label>
                <select id="ddVendedor" class="form-control search-key">
                    <option selected value="0">@Lb["Seleccione"]</option>
                </select>
            </div>
            <div class="col-md-2">
                <fieldset>
                    <div class="form-group">
                        <label for="fechaVencimiento">@Lb["FechaVencimiento"]:</label>
                        <div class='input-group date' id='fechaPickerVencimiento'>
                            <input type='text' class="form-control" id="fechaVencimiento" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>
        </div>
    </div>
  
        <div class="form-group">
            <div class="form-row">
                @{
                    if (Model.IdCotizacion != 0)
                    {

                        <div class="col-md-2">
                            <label>@Lb["Estado"]:</label>
                            <select id="ddEstado" class="form-control search-key">
                                <option value="0">@Lb["Borrador"]</option>
                                <option value="1">@Lb["Enviada"]</option>
                                <option value="2">@Lb["Anulada"]</option>
                                <option value="3">@Lb["Aceptada"]</option>
                                <option value="4">@Lb["Rechazada"]</option>
                                <option value="5">@Lb["Facturada"]</option>
                            </select>
                        </div>
                    }
                    else

                    {

                    }
                }
                        <div class="col-md-2">
                            <label>@Lb["DescuentoGeneral"]:</label>
                            <input id="lbDescuentoGlobal" class="form-control numerico" type="text" min="0"  value="0" />
                        </div>
            </div>
        </div>
          
        
 
</form>
<div class="form-group">
    <div class="form-row">
        <div class="col-md-12 table-responsive">
            <br />
            <table class=" table table-bordered" style="width:100%" id="tblDetalleCotizacion">
                <thead>
                    <tr>

                        <th style="width:10%">
                            <span>@Lb["Item"]</span>
                        </th>
                        <th style="width:6%;">
                            <span>@Lb["Cantidad"]</span>
                        </th>
                        <th style="width:6%;">
                            <span> @Lb["Descuento1"]</span>
                        </th>
                        <th style="width:10%;">
                            <span>@Lb["PrecioUnitario"]</span>
                        </th>
                        <th style="width:10%;">
                            <span>@Lb["Total"]</span>
                        </th>
                        <th style="width:6%;">
                            <span>@Lb["accion"]</span>
                        </th>

                    </tr>
                </thead>
                <tbody>
                    <tr class="lineaForm">
                        <td class="col-md-3">
                            <div class="col-md-9">
                                <select class="form-control" id="ddInventario">
                                    <option selected value="0">@Lb["Seleccione"]</option>
                                </select>
                            </div>
                            <div class="col-md-1"><label id="lbExistencia"></label></div>
                        </td>
                        <td><input id="lbCantidad" class="form-control cantidad" type="text" min="1" value="1" /></td>
                        <td><input id="lbDescuento" class="form-control numerico" type="text" min="0" value="0" /></td>
                        <td><input id="lbCostoPromedio" class="form-control moneda numerico" type="text" /></td>
                        <td><input type="text" class="form-control moneda" readonly id="lbTotal" /></td>
                        <td>
                            <button class="btn btn-link btnAccion" onclick="guardarCambios()"><i class="fas fa-save"></i></button>
                        </td>
                    </tr>
                </tbody>

            </table>

        </div>

    </div>
</div>
<div class="form-group">
    <div class="form-row">
        <div class="col-md-10">

        </div>
        <div class="col-md-2">
            <label>@Lb["SubTotal"]:</label>
            <input type="text" class="form-control currency" id="txtSubTotal" disabled />
            <label>@Lb["Descuento"]:</label>
            <input type='text' class="form-control currency" id="txtDescuento" disabled />
            <label>@Lb["Impuesto"]:</label>
            <input type='text' class="form-control currency" id="txtImpuesto" disabled />
            <label>@Lb["Total"]:</label>
            <input type='text' class="form-control currency" id="txtTotal" disabled />
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <button class="btn btn-success btnAccion" onclick="guardarSalir()">@Lb["Guardar"] <i class="fas fa-save"></i></button>
        <a onclick="cancelar()" class="btn btn-default">@Lb["Cancelar"]</a>
    </div>
</div>


<input readonly hidden id="monedaFormater" />
<div hidden><input hidden id="formater" class="currency" type="text" /></div>

<script>
    var Usuarios = [];
    var bodegas = [];
    var IdUsuarioLogueado = 0;
    var _Inventario = [];
    var arrayItems = [];
    var items = $('#items');
    var _Existencia = 0;
    var contadorFila = 0;
    var lineasAgregadas = [];
    var lineas = [];
    var $precio = $('#lbCostoPromedio');
    var $cantidad = $('#lbCantidad');
    var $unidad = $('#unidad');
    var $porcDescuento = $('#lbDescuento');
    var $porcDescuentoGlobal = $('#lbDescuentoGlobal');
    var CambioDolar = 0;
    var CambioEuro = 0;
    var _estado = 0;
    var lineasEliminadas = [];
    var _LineaDetalle = [];
    var _LineasEditadas = [];
    var _ImpuestoV = 0;
    var LineasDescuento = [];
    var _LineaAgregadaEditar = [];
    //operaciones
    var subTotalBaseGlobal = 0;
    var subTotalGravadoBaseGlobal = 0;
    var subTotalExcentoBaseGlobal = 0;
    var porcDescuentoGlobal = 0;
    var totalDescuentoBaseGlobal = 0;
    var subTotalGravadoNetoBaseGlobal = 0;
    var subTotalExcentoNetoBaseGlobal = 0;
    var montoIvaBaseGlobal = 0;
    var totalBaseGlobal = 0;
    var $Clientes = $('#ddClientes');
    var $Creador = $('#lbCreador')
    var $Moneda = $('#ddMoneda');
    var $Vendedor = $('#ddVendedor');
    var $FechaCotizacion = $('#fecha');
    var $FechaVencimiento = $('#fechaVencimiento');
    var $txtSubTotal = $('#txtSubTotal');
    var $txtDescuento = $('#txtDescuento');
    var $txtImpuesto = $('#txtImpuesto');
    var $txtTotal = $('#txtTotal');
    var monedas = [];
    var lineasEliminadas = [];


    $(document).ready(function () {

        getMonedas();
 
        $('#fechaPicker').datetimepicker({
            defaultDate: new Date(),
            locale: localStorage.getItem("idioma"),
            format: 'DD-MM-YYYY',


        }).on('keypress paste', function (e) {
            e.preventDefault();
            return false;
        });

        $('#fechaPickerVencimiento').datetimepicker({
            defaultDate: new Date(),
            locale: localStorage.getItem("idioma"),
            format: 'DD-MM-YYYY',


        }).on('keypress paste', function (e) {
            e.preventDefault();
            return false;
            });


        $(".numerico").inputmask({

            'alias': 'decimal',

            rightAlign: true,

        });

        $(".cantidad").inputmask({

            'alias': 'decimal',

         rightAlign:false,

        });

        Descuento();

        getInventario();
        getClientes();
        getUsuarios();
        fechasEditar();

    });


/////////////////////////////GETS///////////////////////////////////////////////////////////////////////////////////////////////



     function getCotizacionDetalle() {
        if(@Model.IdCotizacion != 0)
        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetCotizacionDetalle")',

            success: function (data) {
                compraDetalleBD = JSON.parse(JSON.stringify(data));
                _LineaDetalle = data;
                cargarLineas(data);
               
               },
            error: function (err, scnd) {
               cargarAlert('@Lb["errorGeneral"]');
            }
        });
    }

        function getClientes() {
            $.ajax({
                type: "get",
                headers: {
                    "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                },
                dataType: "json",
                url: '@Url.Action("GetAllClientes", "Contacto")',
                success: function (data) {
                    _Clientes = data;
                    cargarddClientes(data);

                },
                error: function (err, scnd) {
                    cargarAlert('@Lb["errorGeneral"]');
                    console.log(err.statusText);
                }
            });
        }

            function getMonedas() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetMonedas", "Monedas")',
             success: function (data) {
                 monedas = data;
                 cargarddMoneda(data);

              },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

                function getUsuarios() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetUsuariosPorEmpresa", "ManejoUsuarios")',
             success: function (data) {
                 Usuarios = data;

                 getIdUsuarioLogueado();
                 cargarddUsuarios(data);
              },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
        }

       function getIdUsuarioLogueado() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetInfoLogueado", "CotizacionProducto")',
             success: function (data) {
                 IdUsuarioLogueado = data;
                 GetUsuarioLogueado();
              },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function GetUsuarioLogueado() {

        for (var i = 0; i <Usuarios.length; i++) {
            if (Usuarios[i].id === IdUsuarioLogueado) {
                $("#lbCreador").text(Usuarios[i].nombre);
                    if (@Model.IdCotizacion != 0) {
                        $Creador.val(@Model.IdUsuarioCreador);
                 }
            }
          }
        }

          function getInventario() {
            ///get inventario
            $.ajax({

            type: "get",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("GetAllInventario", "Inventario")',
                success: function (data) {
               cargarddInventario(data);
                    _Inventario = data;
                inventario = JSON.parse(JSON.stringify(data));
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }
            });
        }



        function existeItem(id) {
            var flag = false;
            for (var i = 0; i < _Inventario.length; i++) {

                if (parseInt(_Inventario[i].idInventario) === parseInt(id))
                    flag = true;
            }
            return flag;
        }

    function validarLinea() {

        var flag = true;
        var exi = parseFloat($("#lbExistencia").text());
        var cant = parseFloat($("#lbCantidad").text());
        if ( exi < cant ){
                flag = false;
                 cargarAlert('@Lb["cantidaMayorQueExistencias"]');
        }

        return flag;

    }

    function fechasEditar() {
        var date = new Date();
        if (@Model.IdCotizacion!= 0) {
            $FechaCotizacion.val(formatearFechaCotizacion());
            $FechaVencimiento.val(formatearFechaVencimiento());
        }
    }

        function formatearFechaCotizacion() {

        return '@Model.FechaCotizacion.Month' + "-" + '@Model.FechaCotizacion.Day' + "-" + '@Model.FechaCotizacion.Year';

    }

        function formatearFechaVencimiento() {

        return '@Model.FechaVencimiento.Month' + "-" + '@Model.FechaVencimiento.Day' + "-" + '@Model.FechaVencimiento.Year';

    }
///////////////////////////////////AJUSTES/////////////////////////////////////////////////////////////////////
        $("#ddInventario").change(function () {
            var _CostoPromedio = 0;
            for (var i = 0; i < _Inventario.length; i++) {
                if (_Inventario[i].idInventario === parseInt($(this).val())) {
                    _Existencia = "Existencia: " + _Inventario[i].existenciaGeneral;
                    _ImpuestoV =parseFloat( _Inventario[i].impuestoVenta);
                    switch (parseInt(_Inventario[i].codigoMonedaVenta)) {
                        case 1:
                            if ($("#ddMoneda").val() === "1") {
                                _CostoPromedio = _Inventario[i].precioVentaFinal;
                            }

                            if ($("#ddMoneda").val() === "2") {
                                _CostoPromedio = parseFloat(_Inventario[i].precioVentaFinal / CambioDolar);
                            }

                            if ($("#ddMoneda").val() === "3") {
                                _CostoPromedio = parseFloat(_Inventario[i].precioVentaFinal / CambioEuro);
                            }

                            break;
                        case 2:
                            if ($("#ddMoneda").val() === "1") {
                                _CostoPromedio = parseFloat(_Inventario[i].precioVentaFinal*CambioDolar);
                            }

                            if ($("#ddMoneda").val() === "2") {
                                _CostoPromedio = parseFloat(_Inventario[i].precioVentaFinal);
                            }

                            if ($("#ddMoneda").val() === "3") {
                                _CostoPromedio = parseFloat(((_Inventario[i].precioVentaFinal)*CambioDolar) / CambioEuro);
                            }
                            break;
                        case 3:
                            if ($("#ddMoneda").val() === "1") {
                                _CostoPromedio = _Inventario[i].precioVentaFinal*CambioEuro;
                            }

                            if ($("#ddMoneda").val() === "2") {
                                _CostoPromedio = parseFloat((_Inventario[i].precioVentaFinal*CambioEuro) / CambioDolar);
                            }

                            if ($("#ddMoneda").val() === "3") {
                                _CostoPromedio = parseFloat(_Inventario[i].precioVentaFinal);
                            }
                            break;
                    }

                    $("#lbExistencia").text(_Existencia);
                    $("#lbCostoPromedio").val(_CostoPromedio);
                    setTotalLinea();
                }
            }

    });

    $("#ddMoneda").change(function () {
      
        cargarTabla(_LineaDetalle, parseInt($(this).val()));
        CalcularTotalesCotizacion(_LineaDetalle, parseInt($(this).val()))
    });

        $("#lbCantidad").on('focusout', function () {
            if ($(this).val() <= 0 || $(this).val() === "")
                $(this).val(1);

            setTotalLinea();
    });

    $("#lbDescuento").on('focusout', function () {

        setTotalLinea();
    });

    $("#lbDescuentoGlobal").on('focusout', function () {
        if ($(this).val() !=0) {

            $porcDescuento.val($(this).val());
            $porcDescuento.prop('disabled', true);
            ActualizarLineasDescuento($(this).val());

        } else {
            $porcDescuento.prop('disabled', false);
            $porcDescuento.val(0);
        }
           

        setTotalLinea();
    });


        $("#lbCostoPromedio").on('focusout', function () {
            if ($(this).val() <= 0 || $(this).val() === "")
                $(this).val(1);

            setTotalLinea();
    });

        function setTotalLinea() {
            var precio = parseFloat($("#lbCostoPromedio").val());
            var cantidad = parseFloat($("#lbCantidad").val());
            var porcdescuento = parseFloat($("#lbDescuento").val());
            var descuento = parseFloat(((precio * cantidad) * porcdescuento) / 100);
            $("#lbTotal").val((cantidad * precio)-descuento);

    }

/////////////////////////////////////////////////////////Actualizar lineas con descuento global///////////////////////////////////////////////////////////////

    function ActualizarLineasDescuento(porcdescuento) {
        var _lineaDetalle = [];

        if (LineasDescuento.length < 1) {
            _lineaDetalle = _LineaAgregadaEditar;
        } else {
            _lineaDetalle = LineasDescuento;
        }

        for (var i = 0; i < _lineaDetalle.length; i++) {

            _lineaDetalle[i].porcDescuento = parseFloat(porcdescuento);
            _lineaDetalle[i].totalDescuentoBase = parseFloat((_lineaDetalle[i].precioBase * porcdescuento) / 100);
            _lineaDetalle[i].totalBase = parseFloat(_lineaDetalle[i].precioBase - _lineaDetalle[i].totalDescuentoBase)

        }


            cargarTabla(lineas, $('#ddMoneda').val());
     
            cargarTabla(_lineaDetalle, $('#ddMoneda').val());
        
        CalcularTotalesCotizacion(_lineaDetalle, $('#ddMoneda').val());
    }

        function Descuento() {
 
        if (@Model.IdCotizacion!= 0) {
            $porcDescuentoGlobal.val(@Model.PorcDescuentoBase);
        } else {
            $porcDescuentoGlobal.val(0);
        }

        if (parseInt( $porcDescuentoGlobal.val()) != 0) {
            $porcDescuento.val($porcDescuentoGlobal.val());
            $porcDescuento.prop('disabled', true);
        }
    }
///////////////////////////////////////////////////////////////////CARGAR DROPDOWNS//////////////////////////////////////////////////////////////////////////////

 
        function cargarddMoneda(moneda) {

            for (var i = 0; i < moneda.length; i++) {
                var o = "<option value=" + moneda[i].codigo + ">" + moneda[i].nombre + "</option>";
                $("#ddMoneda").append(o);

                CambioDolar = moneda[1].valorCompra;
                CambioEuro = moneda[2].valorCompra;
            }
                if (@Model.IdCotizacion != 0) {
                    $Moneda.val(@Model.IdMoneda);

                 }

        }


        function cargarddUsuarios(usuarios) {
            for (var i = 0; i < usuarios.length; i++) {
                var o = "<option value=" + usuarios[i].id + ">" + usuarios[i].nombre + "</option>";
                $("#ddVendedor").append(o);
            }
                if (@Model.IdCotizacion != 0) {
                    $Vendedor.val(@Model.IdVendedor);
                 }
        }

        function cargarddClientes(clientes) {

            for (var i = 0; i < clientes.length; i++) {
                var o = "<option value=" + clientes[i].idContacto + ">" + clientes[i].nombre + "</option>";
                $("#ddClientes").append(o);
            }
                  if (@Model.IdCotizacion != 0) {
                      $Clientes.val(@Model.IdCliente);

                      switch ("@Model.Estado") {
                          case "Borrador":
                              _estado = 0;
                              break;
                          case "Enviada":
                              _estado = 1;
                              break;
                          case "Anulada":
                              _estado = 2;
                              break;
                          case "Aceptada":
                              _estado = 3;
                              break;
                          case "Rechazada":
                              _estado = 4;
                              break;
                          case "Facturada":
                              _estado = 5;
                              break;

                      }
                      $("#ddEstado").val(_estado);

                 }

        }

    function cargarddInventario(inventario) {
 
        for (var i = 0; i < inventario.length; i++) {
                if ((inventario[i].habilitarVentaDirecta).toString() === "true") {
                    var o = "<option value=" + inventario[i].idInventario + ">" + inventario[i].descripcion + "</option>";
                    $("#ddInventario").append(o);
                }
                   
             
            }
               if (@Model.IdCotizacion!= 0) {
                   getCotizacionDetalle();
                }
        }

    function NombreItem(IdInventario) {

        for (var i = 0; i < _Inventario.length; i++) {
            if (_Inventario[i].idInventario === parseInt(IdInventario)) {
                return _Inventario[i].descripcion;
            }
        }
    }

    function cargarTabla(data, moneda) {
        console.log("CargarTabla");
        console.log(data);
        moneda = moneda.toString();
        $('.filasCargadas').remove();

        contadorFila = 0;
        switch (moneda) {
            case "0":
                for (var i = 0; i < data.length; i++) {
                    contadorFila++;
                    var body = '<tr class="filasCargadas" id="fila' + contadorFila + '">'
                        + '<td style="padding-top:2rem;">' + NombreItem(data[i].idInventario) + '</td> '
                        + '<td style="padding-top:2rem;">' + data[i].cantidad + '</td>'
                        + '<td style="padding-top:2rem;">' + data[i].porcDescuento + '</td>'
                        + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + darFormatoMoneda(data[i].precioBase) + '"/></td>'
                        + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].totalBase + '"/></td>'
                        + '<td><button  class="btn btn-link" value="' + contadorFila + '" onclick="eliminarCotizacionDetalle(value, ' + data[i].idCotizacionDetalle + ')" ><i class="fas fa-trash"></i></button></td></tr>';
                    $('.lineaForm').before(body);
                }
                break;
            case "1":
                for (var i = 0; i < data.length; i++) {
                    contadorFila++;
                    var body = '<tr class="filasCargadas" id="fila' + contadorFila + '">'
                        + '<td style="padding-top:2rem;">' + NombreItem(data[i].idInventario) + '</td> '
                        + '<td style="padding-top:2rem;">' + data[i].cantidad + '</td>'
                        + '<td style="padding-top:2rem;">' + data[i].porcDescuento + '</td>'
                        + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + darFormatoMoneda(data[i].precioBase) + '"/></td>'
                        + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].totalBase + '"/></td>'
                        + '<td><button  class="btn btn-link" value="' + contadorFila + '" onclick="eliminarCotizacionDetalle(value, ' + data[i].idCotizacionDetalle + ')" ><i class="fas fa-trash"></i></button></td></tr>';
                    $('.lineaForm').before(body);
                }
                break;
            case "2":
                for (var i = 0; i < data.length; i++) {
                    contadorFila++;
                    var body = '<tr class="filasCargadas" id="fila' + contadorFila + '">'
                        + '<td style="padding-top:2rem;">' + NombreItem(data[i].idInventario) + '</td> '
                        + '<td style="padding-top:2rem;">' + data[i].cantidad + '</td>'
                        + '<td style="padding-top:2rem;">' + data[i].porcDescuento + '</td>'
                        + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + darFormatoMoneda(data[i].precioDolar) + '"/></td>'
                        + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].totalDolar + '"/></td>'
                        + '<td><button  class="btn btn-link" value="' + contadorFila + '" onclick="eliminarCotizacionDetalle(value, ' + data[i].idCotizacionDetalle + ')" ><i class="fas fa-trash"></i></button></td></tr>';
                    $('.lineaForm').before(body);
                }
                break;
            case "3":
                for (var i = 0; i < data.length; i++) {
                    contadorFila++;
                    var body = '<tr class="filasCargadas" id="fila' + contadorFila + '">'
                        + '<td style="padding-top:2rem;">' + NombreItem(data[i].idInventario) + '</td> '
                        + '<td style="padding-top:2rem;">' + data[i].cantidad + '</td>'
                        + '<td style="padding-top:2rem;">' + data[i].porcDescuento + '</td>'
                        + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + darFormatoMoneda(data[i].precioEuro) + '"/></td>'
                        + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].totalEuro + '"/></td>'
                        + '<td><button  class="btn btn-link" value="' + contadorFila + '" onclick="eliminarCotizacionDetalle(value, ' + data[i].idCotizacionDetalle + ')" ><i class="fas fa-trash"></i></button></td></tr>';
                    $('.lineaForm').before(body);
                }
                break;
        }

        var _moneda = 0;
        switch (moneda) {
            case "0":
                _moneda = monedas[0].simbolo;
                break;
            case "1":
                _moneda = monedas[0].simbolo;
                break;
            case "2":
                _moneda = monedas[1].simbolo;
                break;
            case "3":
                _moneda = monedas[2].simbolo;
                break;
        }

        $(".currency").inputmask('currency', {
            prefix: _moneda + ' ',
            rightAlign: true
        });

        inicializaCampos();

    }

    function darFormatoMoneda(value) {

        var clase = "";
        var moneda = $('#ddMoneda').val();
        if (moneda === "1")
            clase = "colon";
        else if (moneda === "2") 
            clase = "dolar"
        
        else if (moneda === "3")
            clase = "euro"

        $('#monedaFormater').removeClass("colon dolar euro");
        $('#monedaFormater').addClass(clase);

        //inicializa formato
        $(".colon").inputmask('currency', {
            prefix: monedas[0].simbolo,
            rightAlign: true
        });
        $(".dolar").inputmask('currency', {
            prefix: monedas[1].simbolo,
            rightAlign: true
        });
        $(".euro").inputmask('currency', {
            prefix: monedas[2].simbolo,
            rightAlign: true
        });

        $('#monedaFormater').val(value);
        return $('#monedaFormater').val();

    }

    ////////////////////////////////////////////////////////////FUNCIONES DE GUARDADO,EDITAR//////////////////////////////////////


    function guardarCambios() {

            guardarLinea();
            guardarCotizacion();
    }

    function inicializaCampos() {
       $("#ddInventario").val(0);
        $("#lbCantidad").val(1);
        $("#lbExistencia").val(1);
        $("#lbCostoPromedio").val(0);
        $("#lbTotal").val(0);
        //Descuento();
        setTotalLinea();
    }

    function inicializarTabla() {
        $('#tblDetalleCotizacion').DataTable().destroy();
        tblCotizacion = $('#tblCotizacion').DataTable({
            "info": false,
            dom: 'Bfrtip',
            language: {
                "decimal": "",
                "emptyTable": "@Lb["NoDatos"]",
                "info": "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                "infoEmpty": "Mostrando 0 to 0 of 0 Entradas",
                "infoFiltered": "(Filtrado de _MAX_ total entradas)",
                "infoPostFix": "",
                "thousands": ",",
                "lengthMenu": "@Lb["Mostrar"] _MENU_ @Lb["Entradas"]",
                "loadingRecords": "Cargando...",
                "processing": "Procesando...",
                "search": "<i class='fas fa-search'></i>",
                "zeroRecords": "@Lb["sinResultados"]",
                "paginate": {
                    "first": "@Lb["Primero"]",
                    "last": "@Lb["Último"]",
                    "next": "@Lb["Sguiente"]",
                    "previous": "@Lb["Anterior"]"
                }
            },
            buttons: [
                {
                    extend: 'copyHtml5',
                    text: '<i class="fas fa-copy   " ></i>',
                    titleAttr: 'Copy',
                    title: '@Lb["CrarCotizacion"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }

                },
                {
                    extend: 'excelHtml5',
                    text: '<i class="fas fa-file-excel  "></i>',
                    titleAttr: 'Excel',
                    title: '@Lb["CrearCotizacion"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }

                },

                {
                    extend: 'pdfHtml5',
                    text: '<i class="fas fa-file-pdf   "></i>',
                    titleAttr: 'PDF',
                    title: '@Lb["AjusteManual"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }
                }
            ]
        });

        $(".dataTables_searching").hide();
    }

    function crearModelo(Who) {

        var _fechaCotizacion;
        var _fechaVencimiento;
        var _fechaCreacion;
        var _estado;
        var ordenModel;
        var _Lineas;
        Who = Who.toString();
        if (Who === "ULD") {     
        
            _Lineas = _LineasEditadas;
            console.log("ULD");
            console.log(_Lineas);
            
        } else {
            _Lineas = lineasAgregadas;
        }

        if (@Model.IdCotizacion!= 0) {
            _fechaCotizacion = " @Model.FechaCotizacion";
            _fechaVencimiento = "@Model.FechaVencimiento";
            _fechaCreacion = "@Model.FechaCreacion";

            switch ($("#ddEstado option:selected").val()) {
                case "0":
                    _estado = "Borrador";
                    break;
                case "1":
                    _estado = "Enviada";
                    break;
                case "2":
                    _estado = "Anulada";
                    break;
                case "3":
                    _estado = "Aceptada";
                    break;
                case "4":
                    _estado = "Rechazada";
                    break;
                case "5":
                    _estado = "Facturada";
                    break;
            }

          ordenModel = {
                idCotizacion: @Model.IdCotizacion,
                fechaCotizacion: _fechaCotizacion,
                idCliente: $("#ddClientes").val(),
                estado: _estado,
                idMoneda: $("#ddMoneda").val(),
                idVendedor: $("#ddVendedor").val(),
                fechaVencimiento: _fechaVencimiento,
                idUsuarioCreador: IdUsuarioLogueado,
                fechaCreacion: _fechaCreacion,
                subTotalBase: subTotalBaseGlobal.toString().replace(".",","),
                subTotalDolar: 0,
                subTotalEuro: 0,
                subTotalGravadoBase: subTotalGravadoBaseGlobal.toString().replace(".",","),
                subTotalGravadoDolar: 0,
                subTotalGravadoEuro: 0,
                subTotalExcentoBase: subTotalExcentoBaseGlobal.toString().replace(".",","),
                subTotalExcentoDolar: 0,
                subTotalExcentoEuro: 0,
                porcDescuentoBase: $porcDescuentoGlobal.val().toString().replace(".",","),
                totalDescuentoBase: totalDescuentoBaseGlobal.toString().replace(".",","),
                totalDescuentoDolar: 0,
                totalDescuentoEuro: 0,
                subTotalGravadoNetoBase: subTotalGravadoNetoBaseGlobal.toString().replace(".",","),
                subTotalGravadoNetoDolar: 0,
                subTotalGravadoNetoEuro: 0,
                subTotalExcentoNetoBase: subTotalExcentoNetoBaseGlobal.toString().replace(".",","),
                subTotalExcentoNetoDolar: 0,
                subTotalExcentoNetoEuro: 0,
                montoIvaBase: montoIvaBaseGlobal.toString().replace(".",","),
                montoIvaDolar: 0,
                montoIvaEuro: 0,
                totalBase: totalBaseGlobal.toString().replace(".",","),
                totalDolar: 0,
                totalEuro: 0,
                tipoCambioDolar: CambioDolar.toString().replace(".",","),
              tipoCambioEuro: CambioEuro.toString().replace(".", ","),
              cotizacionDetalle:  crearModeloDetalle(_Lineas) 
            };
        }
        else {
            _fechaCotizacion = $FechaCotizacion.val();
            _fechaVencimiento = $FechaVencimiento.val();
            _estado = "Borrador";

              ordenModel = {
                idCotizacion: @Model.IdCotizacion,
                fechaCotizacion: _fechaCotizacion,
                idCliente: $("#ddClientes").val(),
                estado: _estado,
                idMoneda: $("#ddMoneda").val(),
                idVendedor: $("#ddVendedor").val(),
                fechaVencimiento: _fechaVencimiento,
                idUsuarioCreador: IdUsuarioLogueado,
                 subTotalBase: subTotalBaseGlobal.toString().replace(".",","),
                subTotalDolar: 0,
                subTotalEuro: 0,
                 subTotalGravadoBase: subTotalGravadoBaseGlobal.toString().replace(".",","),
                subTotalGravadoDolar: 0,
                subTotalGravadoEuro: 0,
                subTotalExcentoBase: subTotalExcentoBaseGlobal.toString().replace(".",","),
                subTotalExcentoDolar: 0,
                subTotalExcentoEuro: 0,
                porcDescuentoBase: $porcDescuentoGlobal.val().toString().replace(".",","),
                totalDescuentoBase: totalDescuentoBaseGlobal.toString().replace(".",","),
                totalDescuentoDolar: 0,
                totalDescuentoEuro: 0,
                subTotalGravadoNetoBase: subTotalGravadoNetoBaseGlobal.toString().replace(".",","),
                subTotalGravadoNetoDolar: 0,
                subTotalGravadoNetoEuro: 0,
                subTotalExcentoNetoBase: subTotalExcentoNetoBaseGlobal.toString().replace(".",","),
                subTotalExcentoNetoDolar: 0,
                subTotalExcentoNetoEuro: 0,
                montoIvaBase: montoIvaBaseGlobal.toString().replace(".",","),
                montoIvaDolar: 0,
                montoIvaEuro: 0,
                totalBase: totalBaseGlobal.toString().replace(".",","),
                totalDolar: 0,
                totalEuro: 0,
                tipoCambioDolar: CambioDolar.toString().replace(".",","),
                tipoCambioEuro: CambioEuro.toString().replace(".",","),
                cotizacionDetalle: crearModeloDetalle(_Lineas)
            };
        }

        return ordenModel;
    }

    function crearModeloDetalle(model) {

        for (var i = 0; i < model.length; i++) {
            model[i].precioBase = model[i].precioBase.toString().replace(".", ",");
            model[i].precioDolar = model[i].precioDolar.toString().replace(".", ",");
            model[i].precioEuro = model[i].precioEuro.toString().replace(".", ",");
            model[i].subTotalBase = model[i].subTotalBase.toString().replace(".", ",");
            model[i].subTotalDolar = model[i].subTotalDolar.toString().replace(".", ",");
            model[i].subTotalEuro = model[i].subTotalEuro.toString().replace(".", ",");
            model[i].subTotalGravadoBase = model[i].subTotalGravadoBase.toString().replace(".", ",");
            model[i].subTotalGravadoDolar = model[i].subTotalGravadoDolar.toString().replace(".", ",");
            model[i].subTotalGravadoEuro = model[i].subTotalGravadoEuro.toString().replace(".", ",");
            model[i].subTotalExcentoBase = model[i].subTotalExcentoBase.toString().replace(".", ",");
            model[i].subTotalExcentoDolar = model[i].subTotalExcentoDolar.toString().replace(".", ",");
            model[i].subTotalExcentoEuro = model[i].subTotalExcentoEuro.toString().replace(".", ",");
            model[i].porcDescuento = model[i].porcDescuento.toString().replace(".", ",");
            model[i].totalDescuentoBase = model[i].totalDescuentoBase.toString().replace(".", ",");
            model[i].totalDescuentoDolar = model[i].totalDescuentoDolar.toString().replace(".", ",");
            model[i].totalDescuentoEuro = model[i].totalDescuentoEuro.toString().replace(".", ",");
            model[i].subTotalGravadoBase = model[i].subTotalGravadoBase.toString().replace(".", ",");
            model[i].subTotalGravadoDolar = model[i].subTotalGravadoDolar.toString().replace(".", ",");
            model[i].subTotalGravadoEuro = model[i].subTotalGravadoEuro.toString().replace(".", ",");
            model[i].subTotalExcentoBase = model[i].subTotalExcentoBase.toString().replace(".", ",");
            model[i].subTotalExcentoDolar = model[i].subTotalExcentoDolar.toString().replace(".", ",");
            model[i].subTotalExcentoEuro = model[i].subTotalExcentoEuro.toString().replace(".", ",");
            model[i].montoIvaBase = model[i].montoIvaBase.toString().replace(".", ",");
            model[i].montoIvaDolar = model[i].montoIvaDolar.toString().replace(".", ",");
            model[i].montoIvaEuro = model[i].montoIvaEuro.toString().replace(".", ",");
            model[i].totalBase = model[i].totalBase.toString().replace(".", ",");
            model[i].totalDolar = model[i].totalDolar.toString().replace(".", ",");
            model[i].totalEuro = model[i].totalEuro.toString().replace(".", ",");
            model[i].cantidad = model[i].cantidad.toString().replace(".", ",");
            model[i].idCotizacion = model[i].idCotizacion.toString().replace(".", ",");
        }

        return model;
    }

      function cancelar() {
        var msj = "@Lb["confirmCancelar"]";

        bootbox.confirm(msj, function (result) {

            if (result)
                window.location.href = "@Url.Action("ListarCotizacionProducto","CotizacionProducto")";

        });
    }


    function eliminarCotizacionDetalle(_id, idLinea) {
        bootbox.confirm("@Lb["confirmEliminarLinea"]", function (result) {

            if (result) {
                eliminarDetalleDB(_id, idLinea);
            }
        });
    }

    function eliminarDetalleDB(_id, idLinea) {
                if (idLinea != 0) {
                     $.ajax({
                    type: "POST",
                    headers: {
                        "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                    },
                    dataType: "json",
                    url: '@Url.Action("EliminarCotizacionDetalle")',
                    data: { idCD: idLinea },
                    success: function (data) {
                        eliminarLinea(_id);
                    },
                    error: function (err, scnd) {
                        cargarAlert('@Lb["errorGeneral"]');
                        console.log(err.statusText);
                    }
                    });
                }
                else
            eliminarLinea(_id);

    }

    function eliminarLinea(key) {
        var id = key - 1;
        lineasAgregadas.splice($.inArray(lineas[id], lineasAgregadas), 1);
        lineas.splice(id, 1);
        _LineasEditadas = 0;

        console.log("Eliminarlinew");
        CalcularTotalesCotizacion(lineas, $('#ddMoneda').val());
        cargarTabla(lineas,$('#ddMoneda').val());
    }


    function validarExistencia(idlinea) {

        var salida = "";
        var linea = lineas[idlinea];

        if (linea.movimiento === "true") {


            for (var i = 0; i < lineas.length; i++) {
                if (lineas[i].idInventario === linea.idInventario && lineas[i].movimiento === "false")
                    salida = lineas[i];
            }
            if (salida === "")
                return true;
            else {
                var item = getItem(parseInt(linea.idInventario))[0];

                var existencia = item.existenciaBodega - parseInt(linea.cantidad);

                if (existencia >= parseInt(salida.cantidad))
                    return true;
                else {

                    cargarAlert("@Lb["noPuedeEliminarlinea"]");
                    return false;
                }
            }

        }

        else
            return true;
    }

    function UpdateLineasDetalle(LineasDetalle) {
        console.log("update");
        var miDescuento = 0;
        for (var i = 0; i < LineasDetalle.length; i++) {

            LineasDetalle[i].porcDescuento = $porcDescuentoGlobal.val();
            LineasDetalle[i].subTotalBase = parseFloat((LineasDetalle[i].cantidad)*(LineasDetalle[i].precioBase));
            LineasDetalle[i].subTotalDolar = parseFloat((LineasDetalle[i].cantidad) * (LineasDetalle[i].precioBase));
            LineasDetalle[i].subTotalEuro = parseFloat((LineasDetalle[i].cantidad) * (LineasDetalle[i].precioBase));
            if (parseInt(LineasDetalle[i].subTotalGravadoBase) != 0) {

                LineasDetalle[i].subTotalGravadoBase = parseFloat(LineasDetalle[i].subTotalBase);
                LineasDetalle[i].subTotalGravadoDolar = parseFloat(LineasDetalle[i].subTotalBase);
                LineasDetalle[i].subTotalGravadoEuro = parseFloat(LineasDetalle[i].subTotalBase);

            } else {

                LineasDetalle[i].subTotalGravadoBase = 0;
                LineasDetalle[i].subTotalGravadoDolar = 0;
                LineasDetalle[i].subTotalGravadoEuro = 0;
            }
            if (parseInt(LineasDetalle[i].subTotalExcentoBase) != 0) {
                LineasDetalle[i].subTotalExcentoBase = parseFloat(LineasDetalle[i].subTotalBase);
                LineasDetalle[i].subTotalExcentoDolar = parseFloat(LineasDetalle[i].subTotalBase);
                LineasDetalle[i].subTotalExcentoEuro = parseFloat(LineasDetalle[i].subTotalBase);

            } else {
                LineasDetalle[i].subTotalExcentoBase = 0;
                LineasDetalle[i].subTotalExcentoDolar = 0;
                LineasDetalle[i].subTotalExcentoEuro = 0;

            }
            miDescuento = parseFloat(((LineasDetalle[i].subTotalBase) * (LineasDetalle[i].porcDescuento)) / 100);
            LineasDetalle[i].totalDescuentoBase = parseFloat((LineasDetalle[i].subTotalBase)-Descuento);
            LineasDetalle[i].totalDescuentoDolar = parseFloat((LineasDetalle[i].subTotalBase) - Descuento);
            LineasDetalle[i].totalDescuentoEuro = parseFloat((LineasDetalle[i].subTotalBase) - Descuento);
            //Vooy por aqui
            LineasDetalle[i].subTotalGravadoNetoBase = fnSubTotalGravadoNetoBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].subTotalGravadoNetoDolar = fnSubTotalGravadoNetoBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].subTotalGravadoNetoEuro = fnSubTotalGravadoNetoBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].subTotalExcentoNetoBase = fnSubTotalExcentoNetoBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].subTotalExcentoNetoDolar = fnSubTotalExcentoNetoBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].subTotalExcentoNetoEuro = fnSubTotalExcentoNetoBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].montoIvaBase = fnMontoIvaBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].montoIvaDolar = fnMontoIvaBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].montoIvaEuro = fnMontoIvaBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].totalBase = fnTotalBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].totalDolar = fnTotalBase(LineasDetalle[i].idInventario);
            LineasDetalle[i].totalEuro = fnTotalBase(LineasDetalle[i].idInventario);                                         

        }

        console.log(_LineasEditadas);
        _LineasEditadas = LineasDetalle;

        if (LineasDetalle.length < 1) {

        }
        else {
            CalcularTotalesCotizacion(LineasDetalle, $Moneda.val());
            UpdateDescuento();
        }
    }

    function UpdateDescuento() {
               $.ajax({
                    type: "POST",
                    headers: {
                        "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                    },
                    dataType: "json",
                    url: '@Url.Action("EditarCotizacionDetalle")',
                   data: crearModelo("ULD"),
                    success: function (data) {
                        console.log("yes");
                    },
                    error: function (err, scnd) {
                        cargarAlert('@Lb["errorGeneral"]');
                        console.log(err.statusText);
                    }
                    });

    }

    function guardarCotizacion() {

        $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CrearEditarCotizacion", "CotizacionProducto")',
            data: crearModelo("GC"),
            success: function (data) {
                if (data.success) {
                    lineas[lineas.length - 1].idCotizacionDetalle = data.idCD;
                    lineasAgregadas[lineasAgregadas.length - 1].idCotizacionDetalle= data.idCD;
                    UpdateLineasDetalle(LineasDescuento);
                    cargarTabla(lineas,$('#ddMoneda').val());
                    if (@Model.IdCotizacion === 0) {
                        var url = "@Url.Action("EditarCotizacion", new { id = "__id__" })";
                        window.location.href = url.replace("__id__", data.idCotizacion);
                    }
                }
                else
                    cargarAlert("@Lb["numCompraRepitida"]");
               },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
        });
    }

    function guardarLinea() {

           var model = {
            idCotizacionDetalle: 0,
            idInventario: $("#ddInventario").val(),
            precioBase:parseFloat( $precio.val()),
               precioDolar: parseFloat($precio.val()),
               precioEuro: parseFloat($precio.val()),
            fechaCreacion:$("#fecha").val(),
            idUsuarioCreador: IdUsuarioLogueado,
            subTotalBase: fnSubTotalBase($("#ddInventario").val()),
               subTotalDolar: fnSubTotalBase($("#ddInventario").val()),
               subTotalEuro: fnSubTotalBase($("#ddInventario").val()),
            subTotalGravadoBase: fnSubTotalGravadoBase($("#ddInventario").val()),
               subTotalGravadoDolar: fnSubTotalGravadoBase($("#ddInventario").val()),
               subTotalGravadoEuro: fnSubTotalGravadoBase($("#ddInventario").val()),
            subTotalExcentoBase: fnSubTotalExcentoBase($("#ddInventario").val()),
               subTotalExcentoDolar: fnSubTotalExcentoBase($("#ddInventario").val()),
               subTotalExcentoEuro: fnSubTotalExcentoBase($("#ddInventario").val()),
            porcDescuento:$porcDescuento.val(),
            totalDescuentoBase:fnTotalDescuentoBase(),
               totalDescuentoDolar: fnTotalDescuentoBase(),
               totalDescuentoEuro: fnTotalDescuentoBase(),
            subTotalGravadoNetoBase: fnSubTotalGravadoNetoBase($("#ddInventario").val()),
               subTotalGravadoNetoDolar: fnSubTotalGravadoNetoBase($("#ddInventario").val()),
               subTotalGravadoNetoEuro: fnSubTotalGravadoNetoBase($("#ddInventario").val()),
            subTotalExcentoNetoBase: fnSubTotalExcentoNetoBase($("#ddInventario").val()),
               subTotalExcentoNetoDolar: fnSubTotalExcentoNetoBase($("#ddInventario").val()),
               subTotalExcentoNetoEuro: fnSubTotalExcentoNetoBase($("#ddInventario").val()),
            montoIvaBase: fnMontoIvaBase($("#ddInventario").val()),
               montoIvaDolar: fnMontoIvaBase($("#ddInventario").val()),
               montoIvaEuro: fnMontoIvaBase($("#ddInventario").val()),
            totalBase: fnTotalBase($("#ddInventario").val()),
               totalDolar: fnTotalBase($("#ddInventario").val()),
               totalEuro: fnTotalBase($("#ddInventario").val()),
            idCotizacion:@Model.IdCotizacion,
            cantidad: parseFloat($cantidad.val())

        };

        lineasAgregadas = [];

        lineasAgregadas.push(model);
        _LineaAgregadaEditar.push(model);
        lineas.push(model);
        CalcularTotalesCotizacion(lineas,$('#ddMoneda').val());
    }

    function guardarSalir() {

            guardarCotizacion();
            window.location.href = "@Url.Action("ListarCotizacionProducto")";
    }


         function guardarCompraBorrador() {
        if (lineas.length <= 0) {
            cargarAlert('@Lb["compraSinDetalle"]');
        } else
        $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CambiarEstadoBorradorCompra")',
            data: crearModelo("GCB"),
            success: function (data) {

                if (!data.success)
                   cargarAlert("@Lb["numCompraRepitida"]");

               },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
        });
    }

    function cargarLineas(data) {

        for (var i = 0; i < data.length; i++) {
            var model = {
            idCotizacion:data[i].idCotizacion,
            idCotizacionDetalle:data[i].idCotizacionDetalle,
            idInventario: data[i].idInventario,
            precioBase:data[i].precioBase ,
            precioDolar: data[i].precioDolar,
            precioEuro: data[i].precioEuro,
            fechaCreacion: data[i].fechaCreacion,
            idUsuarioCreador: data[i].idUsuarioCreador,
            subTotalBase: data[i].subTotalBase,
            subTotalDolar:data[i].subTotalDolar,
            subTotalEuro: data[i].subTotalEuro,
            subTotalGravadoBase: data[i].subTotalGravadoBase,
            subTotalGravadoDolar: data[i].subTotalGravadoDolar,
            subTotalGravadoEuro: data[i].subTotalGravadoEuro,
            subTotalExcentoBase: data[i].subTotalExcentoBase,
            subTotalExcentoDolar: data[i].subTotalExcentoDolar,
            subTotalExcentoEuro:data[i].subTotalExcentoEuro,
            porcDescuento:data[i].porcDescuento,
            totalDescuentoBase: data[i].totalDescuentoBase,
            totalDescuentoDolar: data[i].totalDescuentoDolar,
            totalDescuentoEuro:data[i].totalDescuentoEuro,
            subTotalGravadoNetoBase: data[i].subTotalGravadoNetoBase,
            subTotalGravadoNetoDolar: data[i].subTotalGravadoNetoDolar,
            subTotalGravadoNetoEuro: data[i].subTotalGravadoNetoEuro,
            subTotalExcentoNetoBase: data[i].subTotalExcentoNetoBase,
            subTotalExcentoNetoDolar: data[i].subTotalExcentoNetoDolar,
            subTotalExcentoNetoEuro:data[i].subTotalExcentoNetoEuro,
            montoIvaBase: data[i].montoIvaBase,
            montoIvaDolar: data[i].montoIvaDolar,
            montoIvaEuro: data[i].montoIvaEuro,
            totalBase: data[i].totalBase,
            totalDolar: data[i].totalDolar,
            totalEuro: data[i].totalEuro,
            cantidad:data[i].cantidad
            };

            lineas.push(model);
            LineasDescuento.push(model);
        }

        cargarTabla(lineas, $('#ddMoneda').val());
        CalcularTotalesCotizacion(lineas, $('#ddMoneda').val());
    }

    //////calculos de linea/////////////////////////////////////////////////////////////////////

    function fnSubTotalBase() {

        return parseFloat($cantidad.val() * $precio.val());
    }



    function fnSubTotalGravadoBase(IdInventario) {

        for (var i = 0; i < _Inventario.length; i++)
        {
            if (_Inventario[i].idInventario == parseInt(IdInventario)) {
                var imp = parseFloat(_Inventario[i].impuestoVenta);
                if (imp != 0) {
                    return fnSubTotalBase();
                } else {
                    return 0;
                }
            }
        }
    }

    function fnSubTotalExcentoBase(IdInventario) {

        for (var i = 0; i < _Inventario.length; i++) {
            if (_Inventario[i].idInventario == parseInt(IdInventario)) {
                var imp = parseFloat(_Inventario[i].impuestoVenta);
                if (imp === 0) {

                    return fnSubTotalBase();
                } else {
                    return 0;
                }
            }
        }
    }

    function fnTotalDescuentoBase() {

        var porc = 0;
        if (parseInt($porcDescuentoGlobal.val()) != 0) {
            porc = parseFloat($porcDescuentoGlobal.val());
        } else {
            porc = parseFloat($porcDescuento.val());
        }
     
        var Descuento = parseFloat(((fnSubTotalBase()) * porc) / 100);
        if (porc != 0) {
            return parseFloat( Descuento)
        } else {
            return 0;
        }
    }


    function fnSubTotalGravadoNetoBase(IdInventario) {

        for (var i = 0; i < _Inventario.length; i++) {
            if (_Inventario[i].idInventario == parseInt(IdInventario)) {
                var imp = parseFloat(_Inventario[i].impuestoVenta);
                if (imp != 0) {
                    return parseFloat((fnSubTotalBase()) -fnTotalDescuentoBase());
                } else {
                    return 0;
                }
            }
        }
    }



    function fnSubTotalExcentoNetoBase(IdInventario) {

        for (var i = 0; i < _Inventario.length; i++) {
            if (_Inventario[i].idInventario == parseInt(IdInventario)) {
                var imp = parseFloat(_Inventario[i].impuestoVenta);
                if (imp === 0) {
                    return parseFloat((fnSubTotalBase()) - fnTotalDescuentoBase());
                } else {
                    return 0;
                }
            }
        }
    }

    function fnMontoIvaBase(IdInventario) {
        for (var i = 0; i < _Inventario.length; i++) {
            if (_Inventario[i].idInventario == parseInt(IdInventario)) {
                var imp = parseFloat(_Inventario[i].impuestoVenta);
                var imp1 = parseFloat(1 + (imp / 100));
                var totalImpuesto = parseFloat(_Inventario[i].precioVentaFinal / imp1);
                if (imp != 0) {
                    return parseFloat((_Inventario[i].precioVentaFinal)-totalImpuesto);
                } else {
                    return 0;
                }
            }
        }
    }
    

    function fnTotalBase(IdInventario) {

       return parseFloat( fnSubTotalGravadoNetoBase(IdInventario)+fnSubTotalExcentoNetoBase(IdInventario))
    }

//////////////////////TotalesCotizacionGenral/////////////////////////////////////////////////////////////////////////////////////////////

    function CalcularTotalesCotizacion(_Lineas, _Moneda) {

        var subTotal = 0;
        var descuento = 0;
        var impuesto = 0;
        var total = 0;
        var _subTotalGravadoBase = 0;
        var _subTotalExcentoBase = 0;
        var _totalDescuento = 0;
        var _subTotalGravadoNetoBase = 0;
        var _subTotalExcentoNetoBase = 0;
        var _montoIva = 0;
        var _totalBase = 0;

        _Moneda = _Moneda.toString();
        switch (_Moneda) {
            case "0":
                for (var i = 0; i < _Lineas.length; i++) {

                    subTotal += parseFloat(_Lineas[i].subTotalBase);
                    descuento += parseFloat(_Lineas[i].totalDescuentoBase);
                    impuesto += parseFloat(_Lineas[i].montoIvaBase);
                    total += parseFloat(_Lineas[i].totalBase);
                    _subTotalGravadoBase +=parseFloat (_Lineas[i].subTotalGravadoBase);
                    _subTotalExcentoBase += parseFloat(_Lineas[i].subTotalExcentoBase);
                    _totalDescuento += parseFloat(_Lineas[i].totalDescuentoBase);
                    _subTotalGravadoNetoBase += parseFloat(_Lineas[i].subTotalGravadoNetoBase);
                    _subTotalExcentoNetoBase += parseFloat(_Lineas[i].subTotalExcentoNetoBase);
                    _montoIva += parseFloat(_Lineas[i].montoIvaBase);
                    _totalBase += parseFloat(_Lineas[i].totalBase);
                }
                break;
            case "1":
                for (var i = 0; i < _Lineas.length; i++) {
             
                    subTotal += parseFloat(_Lineas[i].subTotalBase);
                    descuento += parseFloat(_Lineas[i].totalDescuentoBase);
                    impuesto += parseFloat(_Lineas[i].montoIvaBase);
                    total += parseFloat(_Lineas[i].totalBase);
                    _subTotalGravadoBase += parseFloat(_Lineas[i].subTotalGravadoBase);
                    _subTotalExcentoBase += parseFloat(_Lineas[i].subTotalExcentoBase);
                    _totalDescuento += parseFloat(_Lineas[i].totalDescuentoBase);
                    _subTotalGravadoNetoBase += parseFloat(_Lineas[i].subTotalGravadoNetoBase);
                    _subTotalExcentoNetoBase += parseFloat(_Lineas[i].subTotalExcentoNetoBase);
                    _montoIva += parseFloat(_Lineas[i].montoIvaBase);
                    _totalBase += parseFloat(_Lineas[i].totalBase);
       
                }
                break;
            case "2":
                for (var i = 0; i < _Lineas.length; i++) {

                    subTotal += parseFloat(_Lineas[i].subTotalDolar);
                    descuento += parseFloat(_Lineas[i].totalDescuentoDolar);
                    impuesto += parseFloat(_Lineas[i].montoIvaDolar);
                    total += parseFloat(_Lineas[i].totalDolar);
                    _subTotalGravadoBase += parseFloat(_Lineas[i].subTotalGravadoDolar);
                    _subTotalExcentoBase += parseFloat(_Lineas[i].subTotalExcentoDolar);
                    _totalDescuento += parseFloat(_Lineas[i].totalDescuentoDolar);
                    _subTotalGravadoNetoBase += parseFloat(_Lineas[i].subTotalGravadoNetoDolar);
                    _subTotalExcentoNetoBase += parseFloat(_Lineas[i].subTotalExcentoNetoDolar);
                    _montoIva += parseFloat(_Lineas[i].montoIvaDolar);
                    _totalBase += parseFloat(_Lineas[i].totalDolar);
                }
                break;
            case "3":
                for (var i = 0; i < _Lineas.length; i++) {

                    subTotal += parseFloat(_Lineas[i].subTotalEuro);
                    descuento += parseFloat(_Lineas[i].totalDescuentoEuro);
                    impuesto += parseFloat(_Lineas[i].montoIvaEuro);
                    total += parseFloat(_Lineas[i].totalEuro);
                    _subTotalGravadoBase += parseFloat(_Lineas[i].subTotalGravadoEuro);
                    _subTotalExcentoBase += parseFloat(_Lineas[i].subTotalExcentoEuro);
                    _totalDescuento += parseFloat(_Lineas[i].totalDescuentoEuro);
                    _subTotalGravadoNetoBase += parseFloat(_Lineas[i].subTotalGravadoNetoEuro);
                    _subTotalExcentoNetoBase += parseFloat(_Lineas[i].subTotalExcentoNetoEuro);
                    _montoIva += parseFloat(_Lineas[i].montoIvaEuro);
                    _totalBase += parseFloat(_Lineas[i].totalEuro);
                }
                break;

        }

        $txtSubTotal.val(subTotal);
        $txtDescuento.val(descuento);
        $txtImpuesto.val(impuesto);
        $txtTotal.val(total);

        subTotalBaseGlobal = subTotal;
        subTotalGravadoBaseGlobal = _subTotalGravadoBase;
        subTotalExcentoBaseGlobal = _subTotalExcentoBase;
        porcDescuentoGlobal = $porcDescuentoGlobal.val();
        totalDescuentoBaseGlobal = _totalDescuento;
        subTotalGravadoNetoBaseGlobal = _subTotalGravadoNetoBase;
        subTotalExcentoNetoBaseGlobal = _subTotalExcentoNetoBase;
        montoIvaBaseGlobal = _montoIva;
        totalBaseGlobal = _totalBase;

    }



</script>

<script src="~/lib/vendors/jsPDF/AM.js"></script>