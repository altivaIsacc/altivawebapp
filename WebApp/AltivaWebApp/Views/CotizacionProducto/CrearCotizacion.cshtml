@model AltivaWebApp.ViewModels.CotizacionViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
@inject IStringLocalizer<SharedResources> SharedLocalizer

@{
    ViewData["Title"] = "CrearCotizacion";
    var monedas = ViewData["monedas"] as IList<TbSeMoneda>;
    var estado = "";
    var usuario = ViewData["usuario"] as TbSeUsuario;
}

<h2>@SharedLocalizer["CrearCotizacion"]</h2>

<form id="CrearCotizacion">
    @Html.HiddenFor(x => x.IdCotizacion)
    @Html.HiddenFor(x => x.FechaCotizacion)
    @Html.HiddenFor(x => x.IdUsuarioCreador)
    @Html.HiddenFor(x => x.Estado)
    <div class="form-group">
        <div class="form-row">
            <div class="col-md-2">
                <fieldset>
                    <div class="form-group">
                        <label for="fecha">@SharedLocalizer["Fecha"]:</label>
                        <div class='input-group date' id='fechaPicker'>
                            <input type='text' class="form-control" id="fecha" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="col-md-2">
                <label asp-for="IdCliente">@SharedLocalizer["Cliente"]:</label>
                <select id="ddClientes" class="form-control search-key">
                    <option selected value="0">@SharedLocalizer["Seleccione"]</option>

                </select>
            </div>
            <div class="col-md-2">
                <label>@SharedLocalizer["Moneda"]:</label>
                <select id="ddMoneda" class="form-control search-key">
                    <option selected value="0">@SharedLocalizer["Seleccione"]</option>
                </select>
            </div>
            <div class="col-md-2">
                <label>@SharedLocalizer["Usuario"]:</label>
                <label id="lbCreador" class="form-control" disabled></label>
            </div>
            <div class="col-md-2">
                <label>@SharedLocalizer["Vendedor"]:</label>
                <select id="ddVendedor" class="form-control search-key">
                    <option selected value="0">@SharedLocalizer["Seleccione"]</option>
                </select>
            </div>
            <div class="col-md-2">
                <fieldset>
                    <div class="form-group">
                        <label for="fechaVencimiento">@SharedLocalizer["FechaVencimiento"]:</label>
                        <div class='input-group date' id='fechaPickerVencimiento'>
                            <input type='text' class="form-control" id="fechaVencimiento" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>
        </div>
    </div>
    @if (Model.IdCotizacion != 0)
    {
        
    <div class="form-group">
        <div class="form-row">
            <div class="col-md-2">
                <label>@SharedLocalizer["Estado"]:</label>
                <select id="ddEstado" class="form-control search-key">
                    <option value="0">@SharedLocalizer["Borrador"]</option>
                    <option value="1">@SharedLocalizer["Enviada"]</option>
                    <option value="2">@SharedLocalizer["Anulada"]</option>
                    <option value="3">@SharedLocalizer["Aceptada"]</option>
                    <option value="4">@SharedLocalizer["Rechazada"]</option>
                    <option value="5">@SharedLocalizer["Facturada"]</option>
                </select>
            </div>
        </div>
    </div>
    }
    else

    {

    }
</form>
    <div class="form-group">
        <div class="form-row">
            <div class="col-md-12 table-responsive">
                <br />
                <table class=" table table-bordered" style="width:100%" id="tblDetalleCotizacion">
                    <thead>
                        <tr>

                            <th style="width:10%">
                                <span>@SharedLocalizer["Item"]</span>
                            </th>
                            <th style="width:6%;">
                                <span>@SharedLocalizer["Cantidad"]</span>
                            </th>
                            <th style="width:10%;">
                                <span>@SharedLocalizer["PrecioUnitario"]</span>
                            </th>
                            <th style="width:10%;">
                                <span>@SharedLocalizer["Total"]</span>
                            </th>
                            <th style="width:6%;">
                                <span>@SharedLocalizer["accion"]</span>
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        <tr class="lineaForm">
                            <td class="col-md-3"><div class="col-md-9">
                                <select class="form-control" id="ddInventario">
                                <option selected value="0">@SharedLocalizer["Seleccione"]</option>
                                </select>
                                 </div>
                            <div class="col-md-1"><label id="lbExistencia"></label></div>
                         </td>
                        
                            <td><input id="lbCantidad" class="form-control numerico" type="text" min="1" value="1" /></td>
                            <td><input id="lbCostoPromedio" class="form-control moneda" type="text" /></td>
                            <td><input type="text" class="form-control moneda" readonly id="lbTotal" /></td>
                            <td>
                              <button class="btn btn-link btnAccion" onclick="guardarCambios()"><i class="fas fa-save"></i></button>
                            </td>
                        </tr>
                    </tbody>

                </table>

            </div>

        </div>
    </div>
<div class="form-group">
    <div class="form-row">
        <div class="col-md-10">

        </div>
        <div class="col-md-2">
            <label>@SharedLocalizer["SubTotal"]:</label>
            <input type="text" class="form-control" id="txtSubTotal" disabled/>
            <label>@SharedLocalizer["Descuento"]:</label>
            <input type='text' class="form-control" id="txtDescuento" disabled />
            <label>@SharedLocalizer["Impuesto"]:</label>
            <input type='text' class="form-control" id="txtImpuesto" disabled />
            <label>@SharedLocalizer["Total"]:</label>
            <input type='text' class="form-control" id="txtTotal" disabled />
        </div>
    </div>
</div>

    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-success btnAccion" onclick="guardarSalir()">@SharedLocalizer["Guardar"] <i class="fas fa-save"></i></button>
            <a onclick="cancelar()" class="btn btn-default">@SharedLocalizer["Cancelar"]</a>
        </div>
    </div>




<script>
    var Usuarios = [];
    var bodegas = [];
    var IdUsuarioLogueado = 0;
    var _Inventario = [];
    var arrayItems = [];
    var items = $('#items');
    var _Existencia = 0;
    var contadorFila = 0;
    var lineasAgregadas = [];
    var lineas = [];
    var $precio = $('#lbCostoPromedio');
    var $cantidad = $('#lbCantidad');
    var $unidad = $('#unidad');
    var CambioDolar = 0;
    var CambioEuro = 0;
    var _estado = 0;
    var lineasEliminadas = [];

    //operaciones
    var subTotalGravadoBase = 0;
    var subTotalGravadoDolar = 0;
    var subTotalGravadoEuro = 0;
    var subTotalExcentoBase = 0;
    var subTotalExcentoDolar = 0;
    var subTotalExcentoEuro = 0;
    var porcDescuento = 0;
    var totalDescuentoBase = 0;
    var totalDescuentoDolar = 0;
    var totalDescuentoEuro = 0;
    var subTotalGravadoNetoBase = 0;
    var subTotalGravadoNetoDolar = 0;
    var subTotalGravadoNetoEuro = 0; 
    var subTotalExcentoNetoBase = 0;
    var subTotalExcentoNetoDolar = 0;
    var subTotalExcentoNetoEuro = 0;
    var montoIvaBase = 0;
    var montoIvaDolar = 0;
    var montoIvaEuro = 0;
    var totalBase = 0;
    var totalDolar = 0;
    var totalEuro = 0;
    var $Clientes = $('#ddClientes');
    var $Creador = $('#lbCreador')
    var $Moneda = $('#ddMoneda');
    var $Vendedor = $('#ddVendedor');
    var $FechaCotizacion = $('#fecha');
    var $FechaVencimiento = $('#fechaVencimiento');
    var monedas = [];


    $(document).ready(function () {

        getMonedas();
        getClientes();
        getUsuarios();
        fechasEditar();
        getInventario();


        $('#fechaPicker').datetimepicker({
            defaultDate: new Date(),
            locale: localStorage.getItem("idioma"),
            format: 'DD-MM-YYYY',


        }).on('keypress paste', function (e) {
            e.preventDefault();
            return false;
            });

        $('#fechaPickerVencimiento').datetimepicker({
            defaultDate: new Date(),
            locale: localStorage.getItem("idioma"),
            format: 'DD-MM-YYYY',


        }).on('keypress paste', function (e) {
            e.preventDefault();
            return false;
            });

    });
/////////////////////////////GETS///////////////////////////////////////////////////////////////////////////////////////////////
            function getCotizacionDetalle() {
        if(@Model.IdCotizacion != 0)
        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetCotizacionDetalle")',

            success: function (data) {
                compraDetalleBD = JSON.parse(JSON.stringify(data));
        
                cargarLineas(data);

               },
            error: function (err, scnd) {
               cargarAlert('@SharedLocalizer["errorGeneral"]');
            }
        });
    }

        function getClientes() {
            $.ajax({
                type: "get",
                headers: {
                    "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                },
                dataType: "json",
                url: '@Url.Action("GetAllClientes", "Contacto")',
                success: function (data) {
                    _Clientes = data;      
                    cargarddClientes(data);

                },
                error: function (err, scnd) {
                    cargarAlert('@SharedLocalizer["errorGeneral"]');
                    console.log(err.statusText);
                }
            });
        }

            function getMonedas() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetMonedas", "Monedas")',
             success: function (data) {
                 monedas = data;
                 cargarddMoneda(data);

              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }
   
                function getUsuarios() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetUsuariosPorEmpresa", "ManejoUsuarios")',
             success: function (data) {
                 Usuarios = data;

                 getIdUsuarioLogueado();
                 cargarddUsuarios(data);
              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
        }

       function getIdUsuarioLogueado() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetInfoLogueado", "CotizacionProducto")',
             success: function (data) {
                 IdUsuarioLogueado = data;
                 GetUsuarioLogueado();
              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function GetUsuarioLogueado() {

        for (var i = 0; i <Usuarios.length; i++) {
            if (Usuarios[i].id === IdUsuarioLogueado) {
                $("#lbCreador").text(Usuarios[i].nombre);
                    if (@Model.IdCotizacion != 0) {
                        $Creador.val(@Model.IdUsuarioCreador);
                 }            
            }
          }
        }

          function getInventario() {
            ///get inventario
            $.ajax({

            type: "get",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("GetAllInventario", "Inventario")',
                success: function (data) {
               cargarddInventario(data);
                    _Inventario = data;
                inventario = JSON.parse(JSON.stringify(data));
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }
            });
        }



        function existeItem(id) {
            var flag = false;
            for (var i = 0; i < _Inventario.length; i++) {

                if (parseInt(_Inventario[i].idInventario) === parseInt(id))
                    flag = true;
            }
            return flag;
        }
        
    function validarLinea() {

        var flag = true;
        var exi = parseFloat($("#lbExistencia").text());
        var cant = parseFloat($("#lbCantidad").text());
        if ( exi < cant ){
                flag = false;
                 cargarAlert('@SharedLocalizer["cantidaMayorQueExistencias"]');
        }

        return flag;

    }

    function fechasEditar() {
        var date = new Date();
        if (@Model.IdCotizacion!= 0) {
            $FechaCotizacion.val(formatearFechaCotizacion());
            $FechaVencimiento.val(formatearFechaVencimiento());
        }
    }

        function formatearFechaCotizacion() {

        return '@Model.FechaCotizacion.Month' + "-" + '@Model.FechaCotizacion.Day' + "-" + '@Model.FechaCotizacion.Year';

    }
    
        function formatearFechaVencimiento() {

        return '@Model.FechaVencimiento.Month' + "-" + '@Model.FechaVencimiento.Day' + "-" + '@Model.FechaVencimiento.Year';

    }
///////////////////////////////////AJUSTES/////////////////////////////////////////////////////////////////////
        $("#ddInventario").change(function () {
            var _CostoPromedio = 0;
            for (var i = 0; i < _Inventario.length; i++) {
                if (_Inventario[i].idInventario === parseInt($(this).val())) {
                    _Existencia ="Existencia: "+ _Inventario[i].existenciaGeneral;
                    _CostoPromedio = _Inventario[i].costoPromedioGeneral;
                    $("#lbExistencia").text(_Existencia);
                    $("#lbCostoPromedio").val(_CostoPromedio);
                    setTotalLinea();
                }
            }

        });

        $("#lbCantidad").on('focusout', function () {
            if ($(this).val() <= 0 || $(this).val() === "") 
                $(this).val(1);
            
            setTotalLinea();
    });


        $("#lbCostoPromedio").on('focusout', function () {
            if ($(this).val() <= 0 || $(this).val() === "") 
                $(this).val(1);
            
            setTotalLinea();
    });

        function setTotalLinea() {

            var precio = parseFloat($("#lbCostoPromedio").val());
            var cantidad = parseFloat($("#lbCantidad").val());
           


            $("#lbTotal").val(cantidad * precio);

    }




////////////////////////////////////CARGAR DROPDOWNS//////////////////////////////////////////////////////////////

        function cargarddMoneda(moneda) {

            for (var i = 0; i < moneda.length; i++) {
                var o = "<option value=" + moneda[i].codigo + ">" + moneda[i].nombre + "</option>";
                $("#ddMoneda").append(o);

                CambioDolar = moneda[1].valorCompra;
                CambioEuro = moneda[2].valorCompra;
            }
                if (@Model.IdCotizacion != 0) {
                    $Moneda.val(@Model.IdMoneda);

                 }

        }


        function cargarddUsuarios(usuarios) {
            for (var i = 0; i < usuarios.length; i++) {
                var o = "<option value=" + usuarios[i].id + ">" + usuarios[i].nombre + "</option>";
                $("#ddVendedor").append(o);
            }
                if (@Model.IdCotizacion != 0) {
                    $Vendedor.val(@Model.IdVendedor);
                 }
        }

        function cargarddClientes(clientes) {

            for (var i = 0; i < clientes.length; i++) {
                var o = "<option value=" + clientes[i].idContacto + ">" + clientes[i].nombre + "</option>";
                $("#ddClientes").append(o);
            }
                  if (@Model.IdCotizacion != 0) {
                      $Clientes.val(@Model.IdCliente);

                      switch ("@Model.Estado") {
                          case "Borrador":
                              _estado = 0;
                              break;
                          case "Enviada":
                              _estado = 1;
                              break;
                          case "Anulada":
                              _estado = 2;
                              break;
                          case "Aceptada":
                              _estado = 3;
                              break;
                          case "Rechazada":
                              _estado = 4;
                              break;
                          case "Facturada":
                              _estado = 5;
                              break;

                      }
                      $("#ddEstado").val(_estado);

                 }

        }

        function cargarddInventario(inventario) {
            for (var i = 0; i < inventario.length; i++) {
                var o = "<option value=" + inventario[i].idInventario + ">" + inventario[i].descripcion + "</option>";
                $("#ddInventario").append(o);             
            }
               if (@Model.IdCotizacion!= 0) {
                   getCotizacionDetalle();

                }
        }

    function NombreItem(IdInventario) {

        for (var i = 0; i < _Inventario.length; i++) {
            if (_Inventario[i].idInventario === parseInt(IdInventario)) {
                return _Inventario[i].descripcion;
            }
        }
    }

    function cargarTabla(data) {
        $('.filasCargadas').remove();

        contadorFila = 0;
        for (var i = 0; i < data.length; i++) {
            contadorFila++;
            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '">'
                + '<td style="padding-top:2rem;">' + NombreItem(data[i].idInventario) + '</td> '
                + '<td style="padding-top:2rem;">' + data[i].cantidad + '</td>'
                + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].precioBase + '"/></td>'
                + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].totalBase + '"/></td>'
                + '<td><button  class="btn btn-link" value="' + contadorFila + '" onclick="eliminarCotizacionDetalle(value, ' + data[i].idCotizacionDetalle + ')" ><i class="fas fa-trash"></i></button></td></tr>';
            $('.lineaForm').before(body);
        }

        inicializaCampos();
    }

    ////////////////////////////////////////////////////////////FUNCIONES DE GUARDADO,EDITAR//////////////////////////////////////


    function guardarCambios() {

       
            guardarLinea();
            guardarCompra();
        
    }

    function inicializaCampos() {

       $("#ddInventario").val("0");
        $("#lbCantidad").val(1);
        $("#lbTotal").val(0);
        setTotalLinea();
    }

    function inicializarTabla() {
        $('#tblDetalleCotizacion').DataTable().destroy();
        tblCotizacion = $('#tblCotizacion').DataTable({
            "info": false,
            dom: 'Bfrtip',
            language: {
                "decimal": "",
                "emptyTable": "@SharedLocalizer["NoDatos"]",
                "info": "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                "infoEmpty": "Mostrando 0 to 0 of 0 Entradas",
                "infoFiltered": "(Filtrado de _MAX_ total entradas)",
                "infoPostFix": "",
                "thousands": ",",
                "lengthMenu": "@SharedLocalizer["Mostrar"] _MENU_ @SharedLocalizer["Entradas"]",
                "loadingRecords": "Cargando...",
                "processing": "Procesando...",
                "search": "<i class='fas fa-search'></i>",
                "zeroRecords": "@SharedLocalizer["sinResultados"]",
                "paginate": {
                    "first": "@SharedLocalizer["Primero"]",
                    "last": "@SharedLocalizer["Último"]",
                    "next": "@SharedLocalizer["Sguiente"]",
                    "previous": "@SharedLocalizer["Anterior"]"
                }
            },
            buttons: [
                {
                    extend: 'copyHtml5',
                    text: '<i class="fas fa-copy   " ></i>',
                    titleAttr: 'Copy',
                    title: '@SharedLocalizer["CrarCotizacion"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }

                },
                {
                    extend: 'excelHtml5',
                    text: '<i class="fas fa-file-excel  "></i>',
                    titleAttr: 'Excel',
                    title: '@SharedLocalizer["CrearCotizacion"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }

                },

                {
                    extend: 'pdfHtml5',
                    text: '<i class="fas fa-file-pdf   "></i>',
                    titleAttr: 'PDF',
                    title: '@SharedLocalizer["AjusteManual"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }
                }
            ]
        });

        $(".dataTables_searching").hide();
    }

    function crearModelo() {

        var _fechaCotizacion;
        var _fechaVencimiento;
        var _fechaCreacion;
        var _estado;
        var ordenModel;

        if (@Model.IdCotizacion!= 0) {
            _fechaCotizacion = " @Model.FechaCotizacion";
            _fechaVencimiento = "@Model.FechaVencimiento";
            _fechaCreacion = "@Model.FechaCreacion";

            switch ($("#ddEstado option:selected").val()) {
                case "0":
                    _estado = "Borrador";
                    break;
                case "1":
                    _estado = "Enviada";
                    break;
                case "2":
                    _estado = "Anulada";       
                    break;
                case "3":
                    _estado = "Aceptada";
                    break;
                case "4":
                    _estado = "Rechazada";
                    break;
                case "5":
                    _estado = "Facturada";
                    break;
            }
     
          ordenModel = {
                idCotizacion: @Model.IdCotizacion,
                fechaCotizacion: _fechaCotizacion,
                idCliente: $("#ddClientes").val(),
                estado: _estado,
                idMoneda: $("#ddMoneda").val(),
                idVendedor: $("#ddVendedor").val(),
                fechaVencimiento: _fechaVencimiento,
                idUsuarioCreador: IdUsuarioLogueado,
                fechaCreacion: _fechaCreacion,
                subTotalBase: 0,
                subTotalDolar: 0,
                subTotalEuro: 0,
                subTotalGravadoBase: 0,
                subTotalGravadoDolar: 0,
                subTotalGravadoEuro: 0,
                subTotalExcentoBase: 0,
                subTotalExcentoDolar: 0,
                subTotalExcentoEuro: 0,
                porcDescuentoBase: 0,
                totalDescuentoBase: 0,
                totalDescuentoDolar: 0,
                totalDescuentoEuro: 0,
                subTotalGravadoNetoBase: 0,
                subTotalGravadoNetoDolar: 0,
                subTotalGravadoNetoEuro: 0,
                subTotalExcentoNetoBase: 0,
                subTotalExcentoNetoDolar: 0,
                subTotalExcentoNetoEuro: 0,
                montoIvaBase: 0,
                montoIvaDolar: 0,
                montoIvaEuro: 0,
                totalBase: 0,
                totalDolar: 0,
                totalEuro: 0,
                tipoCambioDolar: CambioDolar,
                tipoCambioEuro: CambioEuro,
                cotizacionDetalle: crearModeloDetalle(lineasAgregadas)
            };                          
        }
        else {
            _fechaCotizacion = $FechaCotizacion.val();
            _fechaVencimiento = $FechaVencimiento.val();
            _estado = "Borrador";

              ordenModel = {
                idCotizacion: @Model.IdCotizacion,
                fechaCotizacion: _fechaCotizacion,
                idCliente: $("#ddClientes").val(),
                estado: _estado,
                idMoneda: $("#ddMoneda").val(),
                idVendedor: $("#ddVendedor").val(),
                fechaVencimiento: _fechaVencimiento,
                idUsuarioCreador: IdUsuarioLogueado,
                subTotalBase: 0,
                subTotalDolar: 0,
                subTotalEuro: 0,
                subTotalGravadoBase: 0,
                subTotalGravadoDolar: 0,
                subTotalGravadoEuro: 0,
                subTotalExcentoBase: 0,
                subTotalExcentoDolar: 0,
                subTotalExcentoEuro: 0,
                porcDescuentoBase: 0,
                totalDescuentoBase: 0,
                totalDescuentoDolar: 0,
                totalDescuentoEuro: 0,
                subTotalGravadoNetoBase: 0,
                subTotalGravadoNetoDolar: 0,
                subTotalGravadoNetoEuro: 0,
                subTotalExcentoNetoBase: 0,
                subTotalExcentoNetoDolar: 0,
                subTotalExcentoNetoEuro: 0,
                montoIvaBase: 0,
                montoIvaDolar: 0,
                montoIvaEuro: 0,
                totalBase: 0,
                totalDolar: 0,
                totalEuro: 0,
                tipoCambioDolar: CambioDolar,
                tipoCambioEuro: CambioEuro,
                cotizacionDetalle: crearModeloDetalle(lineasAgregadas)
            };
       
        }
         
        console.log(ordenModel);
        return ordenModel;
    }

    function crearModeloDetalle(model) {

        for (var i = 0; i < model.length; i++) {

            model[i].subTotalBase = model[i].subTotalBase.toString().replace(".", ",");
            model[i].subTotalDolar = model[i].subTotalDolar.toString().replace(".", ",");
            model[i].subTotalEuro = model[i].subTotalEuro.toString().replace(".", ",");
            model[i].subTotalGravadoBase = model[i].subTotalGravadoBase.toString().replace(".", ",");
            model[i].subTotalGravadoDolar = model[i].subTotalGravadoDolar.toString().replace(".", ",");
            model[i].subTotalGravadoEuro = model[i].subTotalGravadoEuro.toString().replace(".", ",");
            model[i].subTotalExcentoBase = model[i].subTotalExcentoBase.toString().replace(".", ",");
            model[i].subTotalExcentoDolar = model[i].subTotalExcentoDolar.toString().replace(".", ",");
            model[i].subTotalExcentoEuro = model[i].subTotalExcentoEuro.toString().replace(".", ",");
            model[i].porcDescuento = model[i].porcDescuento.toString().replace(".", ",");
            model[i].totalDescuentoBase = model[i].totalDescuentoBase.toString().replace(".", ",");
            model[i].totalDescuentoDolar = model[i].totalDescuentoDolar.toString().replace(".", ",");
            model[i].totalDescuentoEuro = model[i].totalDescuentoEuro.toString().replace(".", ",");
            model[i].subTotalGravadoBase = model[i].subTotalGravadoBase.toString().replace(".", ",");
            model[i].subTotalGravadoDolar = model[i].subTotalGravadoDolar.toString().replace(".", ",");
            model[i].subTotalGravadoEuro = model[i].subTotalGravadoEuro.toString().replace(".", ",");
            model[i].subTotalExcentoBase = model[i].subTotalExcentoBase.toString().replace(".", ",");
            model[i].subTotalExcentoDolar = model[i].subTotalExcentoDolar.toString().replace(".", ",");
            model[i].subTotalExcentoEuro = model[i].subTotalExcentoEuro.toString().replace(".", ",");
            model[i].montoIvaBase = model[i].montoIvaBase.toString().replace(".", ",");
            model[i].montoIvaDolar = model[i].montoIvaDolar.toString().replace(".", ",");
            model[i].montoIvaEuro = model[i].montoIvaEuro.toString().replace(".", ",");
            model[i].totalBase = model[i].totalBase.toString().replace(".", ",");
            model[i].totalDolar = model[i].totalDolar.toString().replace(".", ",");
            model[i].totalEuro = model[i].totalEuro.toString().replace(".", ",");
            model[i].cantidad = model[i].cantidad.toString().replace(".", ",");
            model[i].idCotizacion = model[i].idCotizacion.toString().replace(".", ",");
        }

        return model;
    }

      function cancelar() {
        var msj = "@SharedLocalizer["confirmCancelar"]";

        bootbox.confirm(msj, function (result) {

            if (result)
                window.location.href = "@Url.Action("ListarCotizacionProducto","CotizacionProducto")";

        });
    }


        function eliminarCotizacionDetalle(_id, idLinea) {
        bootbox.confirm("@SharedLocalizer["confirmEliminarLinea"]", function (result) {

            if (result) {
                eliminarDetalleDB(_id, idLinea);
            }
        });
    }
    
    function eliminarDetalleDB(_id, idLinea) {



                if (idLinea != 0) {
                     $.ajax({
                    type: "POST",
                    headers: {
                        "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                    },
                    dataType: "json",
                    url: '@Url.Action("EliminarCotizacionDetalle")',
                    data: { idCD: idLinea },
                    success: function (data) {
                        eliminarLinea(_id);
                    },
                    error: function (err, scnd) {
                        cargarAlert('@SharedLocalizer["errorGeneral"]');
                        console.log(err.statusText);
                    }
                    });
                }
                else
            eliminarLinea(_id);
        console.log(_id);

    }

    function eliminarLinea(key) {

        lineasAgregadas.splice($.inArray(lineas[key], lineasAgregadas), 1);
        lineas.splice(key, 1);

        calcularTotales();
        console.log(lineas);
        cargarTabla(lineas);

    }

      
    function validarExistencia(idlinea) {

        var salida = "";
        var linea = lineas[idlinea];

        if (linea.movimiento === "true") {


            for (var i = 0; i < lineas.length; i++) {
                if (lineas[i].idInventario === linea.idInventario && lineas[i].movimiento === "false")
                    salida = lineas[i];
            }
            if (salida === "")
                return true;
            else {
                var item = getItem(parseInt(linea.idInventario))[0];

                var existencia = item.existenciaBodega - parseInt(linea.cantidad);

                if (existencia >= parseInt(salida.cantidad))
                    return true;
                else {

                    cargarAlert("@SharedLocalizer["noPuedeEliminarlinea"]");
                    return false;
                }
            }

        }

        else
            return true;
    }

    function guardarCompra() {

        $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CrearEditarCotizacion", "CotizacionProducto")',
            data: crearModelo(),
            success: function (data) {
                    
                if (data.success) {
                    lineas[lineas.length - 1].id = data.idCD;
                    lineasAgregadas[lineasAgregadas.length - 1].id = data.idCD;
                    cargarTabla(lineas);
                    if (@Model.IdCotizacion === 0) {

           
                        var url = "@Url.Action("EditarCotizacion", new { id = "__id__" })";
                        window.location.href = url.replace("__id__", data.idCotizacion);
                    }
                }
                else
                    cargarAlert("@SharedLocalizer["numCompraRepitida"]");


               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
        });

    }

    function guardarLinea() {
           var model = {
            idCotizacionDetalle: 0,
            idInventario: $("#ddInventario").val(),
            precioBase:parseFloat( $precio.val()),
            precioDolar:parseFloat($precio.val()*CambioDolar),
            precioEuro: parseInt($precio.val()*CambioEuro),
            fechaCreacion:$("#fecha").val(),
            idUsuarioCreador: $("#lbCreador").text(),
            subTotalBase:0,
            subTotalDolar:0,
            subTotalEuro:0,
            subTotalGravadoBase:0,
            subTotalGravadoDolar:0,
            subTotalGravadoEuro:0,
            subTotalExcentoBase:0,
            subTotalExcentoDolar:0,
            subTotalExcentoEuro:0,
            porcDescuento:0,
            totalDescuentoBase:0,
            totalDescuentoDolar:0,
            totalDescuentoEuro:0,
            subTotalGravadoNetoBase:0,
            subTotalGravadoNetoDolar:0,
            subTotalGravadoNetoEuro:0,
            subTotalExcentoNetoBase:0,
            subTotalExcentoNetoDolar:0,
            subTotalExcentoNetoEuro:0,
            montoIvaBase:0,
            montoIvaDolar:0,
            montoIvaEuro:0,
            totalBase:0,
            totalDolar:0,
            totalEuro: 0,
               idCotizacion:@Model.IdCotizacion,
               cantidad: parseFloat($cantidad.val())

        };

        lineasAgregadas = [];

        lineasAgregadas.push(model);
        lineas.push(model);

        calcularTotales();

    }

        function guardarSalir() {

            guardarCompra();

            window.location.href = "@Url.Action("ListarCotizacionProducto")";
        
    }


         function guardarCompraBorrador() {
        if (lineas.length <= 0) {
            cargarAlert('@SharedLocalizer["compraSinDetalle"]');
        } else
        $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CambiarEstadoBorradorCompra")',
            data: crearModelo(),
            success: function (data) {

                if (!data.success)
                   cargarAlert("@SharedLocalizer["numCompraRepitida"]");

               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
        });

    }

    function calcularTotales() {


        for (var i = 0; i < lineas.length; i++) {

            subTotalExcentoBase += parseFloat(lineas[i].subTotalExcentoBase);
            subTotalExcentoDolar += parseFloat(lineas[i].subTotalExcentoDolar);
            subTotalExcentoEuro += parseFloat(lineas[i].subTotalExcentoEuro);
            subTotalGravadoBase += parseFloat(lineas[i].subTotalGravadoBase);
            subTotalGravadoDolar += parseFloat(lineas[i].subTotalGravadoDolar);
            subTotalGravadoEuro += parseFloat(lineas[i].subTotalGravadoEuro);
            totalBase += parseFloat(lineas[i].subTotalExcentoBase) + parseFloat(lineas[i].subTotalGravadoBase);
            totalDolar += parseFloat(lineas[i].subTotalExcentoDolar) + parseFloat(lineas[i].subTotalGravadoDolar);
            totalEuro += parseFloat(lineas[i].subTotalExcentoEuro) + parseFloat(lineas[i].subTotalGravadoEuro);
            montoIvaBase += parseFloat(lineas[i].montoIvaBase);
            montoIvaDolar += parseFloat(lineas[i].montoIvaDolar);
            montoIvaEuro += parseFloat(lineas[i].montoIvaEuro);
            totalDescuentoBase += parseFloat(lineas[i].totalBase) - ((parseFloat(lineas[i].porcDescuento) * parseFloat(lineas[i].totalBase)) / 100);
            totalDescuentoDolar += (parseFloat(lineas[i].totalBase) - ((parseFloat(lineas[i].porcDescuento) * parseFloat(lineas[i].totalBase)) / 100))*parseFloat(lineas[i].CambioDolar);
            totalDescuentoEuro += (parseFloat(lineas[i].totalBase) - ((parseFloat(lineas[i].porcDescuento) * parseFloat(lineas[i].totalBase)) / 100))*parseFloat(lineas[i].CambioEuro);
            montoIvaBase += parseFloat(lineas[i].montoIvaBase);
            montoIvaDolar += parseFloat(lineas[i].montoIvaBase)*parseFloat(lineas[i].CambioDolar);
            montoIvaEuro += parseFloat(lineas[i].montoIvaBase) * parseFloat(lineas[i].CambioEuro);
            subTotalGravadoBase += parseFloat(lineas[i].subTotalGravadoBase);
            subTotalGravadoDolar += parseFloat(lineas[i].subTotalGravadoBase)*parseFloat(lineas[i].CambioDolar);
            subTotalGravadoEuro += parseFloat(lineas[i].subTotalGravadoBase) * parseFloat(lineas[i].CambioEuro);

        }

    }

    
    function cargarLineas(data) {


        for (var i = 0; i < data.length; i++) {
            var model = {
            idCotizacionDetalle:data[i].idCotizacionDetalle,
            idInventario: data[i].idInventario,
            precioBase:data[i].precioBase ,
            precioDolar: data[i].precioDolar,
            precioEuro: data[i].precioEuro,
            fechaCreacion: data[i].fechaCreacion,
            idUsuarioCreador: data[i].idUsuarioCreador,
            subTotalBase: 0,
            subTotalDolar:0,
            subTotalEuro: 0,
            subTotalGravadoBase: 0,
            subTotalGravadoDolar: 0,
            subTotalGravadoEuro: 0,
            subTotalExcentoBase: 0,
            subTotalExcentoDolar: 0,
            subTotalExcentoEuro:0,
            porDescuento:0,
            totalDescuentoBase: 0,
            totalDescuentoDolar: 0,
            totalDescuentoEuro:0,
            subTotalGravadoNetoBase: 0,
            subTotalGravadoNetoDolar: 0,
            subTotalGravadoNetoEuro: 0,
            subTotalExcentoNetoBase: 0,
            subTotalExcentoNetoEuro: 0,
            montoIvaBase: 0,
            montoIvaDolar: 0,
            montoIvaEuro: 0,
            totalBase: data[i].totalBase,
            totalDolar: 0,
            totalEuro: 0,
            cantidad:data[i].cantidad
            };
            lineas.push(model);
        }


        cargarTabla(lineas);
        calcularTotales();

    }
    
    //////calculos de linea/////////////////////////////////////////////////////////////////////

    function fnSubTotalBase() {
        return parseFloat($cantidad.val() * $precio.val());
    }

    function fnSubTotalDolar() {
        return parseFloat(($cantidad.val() * $precio.val())*CambioDolar);
    }

    function fnSubTotalEuro() {
        return parseFloat(($cantidad.val() * $precio.val()) * CambioEuro);
    }

    function fnSubTotalGravadoBase(IdInventario) {
        for (var i = 0; i < _Inventario.length; i++)
        {
            if (_Inventario[i].idInventario == parseInt(IdInventario)) {

                var imp = parseFloat(_Inventario[i].impuestoVenta);
                if (imp != 0) {
                    return parseFloat(($cantidad.val() * $precio.val()));
                } else {
                    return 0;
                }
            }
        }
     
    }

    function fnSubTotalGravadoDolar(IdInventario) {
        for (var i = 0; i < _Inventario.length; i++) {
            if (_Inventario[i].idInventario == parseInt(IdInventario)) {

                var imp = parseFloat(_Inventario[i].impuestoVenta);
                if (imp != 0) {
                    return parseFloat(($cantidad.val() * $precio.val()) * CambioDolar);
                } else {
                    return 0;
                }
            }
        }

    }

    function fnSubTotalGravadoEuro(IdInventario) {
        for (var i = 0; i < _Inventario.length; i++) {
            if (_Inventario[i].idInventario == parseInt(IdInventario)) {

                var imp = parseFloat(_Inventario[i].impuestoVenta);
                if (imp != 0) {
                    return parseFloat(($cantidad.val() * $precio.val()) * CambioEuro);
                } else {
                    return 0;
                }
            }
        }

    }


</script>

<script src="~/lib/vendors/jsPDF/AM.js"></script>