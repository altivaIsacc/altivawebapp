@model AltivaWebApp.ViewModels.CotizacionViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
@inject IStringLocalizer<SharedResources> SharedLocalizer

@{
    ViewData["Title"] = "CrearCotizacion";
}

<h2>@SharedLocalizer["CrearCotizacion"]</h2>

<form id="CrearCotizacion">

    <div class="form-group">
        <div class="form-row">
            <div class="col-md-2">
                <fieldset>
                    <div class="form-group">
                        <label for="fecha">@SharedLocalizer["Fecha"]:</label>
                        <div class='input-group date' id='fechaPicker'>
                            <input type='text' class="form-control" id="fecha" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="col-md-2">
                <label>@SharedLocalizer["Cliente"]:</label>
                <select id="ddClientes" class="form-control search-key">
                    <option selected value="0">@SharedLocalizer["Seleccione"]</option>

                </select>
            </div>
            <div class="col-md-2">
                <label>@SharedLocalizer["Moneda"]:</label>
                <select id="ddMoneda" class="form-control search-key">
                    <option selected value="0">@SharedLocalizer["Seleccione"]</option>
                </select>
            </div>
            <div class="col-md-2">
                <label>@SharedLocalizer["Usuario"]:</label>
                <label id="lbCreador" class="form-control" disabled></label>
            </div>
            <div class="col-md-2">
                <label>@SharedLocalizer["Vendedor"]:</label>
                <select id="ddVendedor" class="form-control search-key">
                    <option selected value="0">@SharedLocalizer["Seleccione"]</option>
                </select>
            </div>
        </div>
    </div>

</form>
    <div class="form-group">
        <div class="form-row">
            <div class="col-md-12 table-responsive">
                <br />
                <table class=" table table-bordered" style="width:100%" id="tblDetalleCotizacion">
                    <thead>
                        <tr>

                            <th style="width:10%">
                                <span>@SharedLocalizer["Item"]</span>
                            </th>
                            <th style="width:6%;">
                                <span>@SharedLocalizer["Cantidad"]</span>
                            </th>
                            <th style="width:10%;">
                                <span>@SharedLocalizer["PrecioUnitario"]</span>
                            </th>
                            <th style="width:10%;">
                                <span>@SharedLocalizer["Total"]</span>
                            </th>
                            <th style="width:6%;">
                                <span>@SharedLocalizer["accion"]</span>
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        <tr class="lineaForm">
                            <td class="col-md-3"><div class="col-md-9">
                                <select class="form-control" id="ddInventario">
                                <option selected value="0">@SharedLocalizer["Seleccione"]</option>
                                </select>
                                 </div>
                            <div class="col-md-1"><label id="lbExistencia"></label></div>
                         </td>
                        
                            <td><input id="lbCantidad" class="form-control numerico" type="text" min="1" value="1" /></td>
                            <td><input id="lbCostoPromedio" class="form-control moneda" type="text" /></td>
                            <td><input type="text" class="form-control moneda" readonly id="lbTotal" /></td>
                            <td>
                              <button class="btn btn-link btnAccion" onclick="guardarCambios()"><i class="fas fa-save"></i></button>
                            </td>
                        </tr>
                    </tbody>

                </table>

            </div>

        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-12">
            <button class="btn btn-success btnAccion" onclick="guardarSalir()">@SharedLocalizer["Guardar"] <i class="fas fa-save"></i></button>
            <a onclick="cancelar()" class="btn btn-default">@SharedLocalizer["Cancelar"]</a>
        </div>
    </div>




<script>
    var Usuarios = [];
    var bodegas = [];
    var IdUsuarioLogueado = 0;
    var _Inventario = [];
    var arrayItems = [];
    var items = $('#items');
    var _Existencia = 0;
    var contadorFila = 0;
    var LineasAgregadas = [];
    var lineas = [];
    var $precio = $('#lbCostoPromedio');
    var $cantidad = $('#lbCantidad');
    var $unidad = $('#unidad');


    $(document).ready(function () {

        getClientes();
        getMonedas();
        getUsuarios();
        getInventario();

        $('#fechaPicker').datetimepicker({
            defaultDate: new Date(),
            locale: localStorage.getItem("idioma"),
            format: 'DD-MM-YYYY',


        }).on('keypress paste', function (e) {
            e.preventDefault();
            return false;
            });
     
/////////////////////////////GETS///////////////////////////////////////////////////////////////////////////////////////////////
        function getClientes() {
            $.ajax({
                type: "get",
                headers: {
                    "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                },
                dataType: "json",
                url: '@Url.Action("GetAllClientes", "Contacto")',
                success: function (data) {
                    _Clientes = data;
                    cargarddClientes(data);

                },
                error: function (err, scnd) {
                    cargarAlert('@SharedLocalizer["errorGeneral"]');
                    console.log(err.statusText);
                }
            });
        }

            function getMonedas() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetMonedas", "Monedas")',
             success: function (data) {
                 monedas = data;
                 cargarddMoneda(data);

              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }
   
                function getUsuarios() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetUsuariosPorEmpresa", "ManejoUsuarios")',
             success: function (data) {
                 Usuarios = data;

                 getIdUsuarioLogueado();
                 cargarddUsuarios(data);
              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
        }

       function getIdUsuarioLogueado() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetInfoLogueado", "CotizacionProducto")',
             success: function (data) {
                 IdUsuarioLogueado = data;
                 GetUsuarioLogueado();
              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function GetUsuarioLogueado() {

        for (var i = 0; i <Usuarios.length; i++) {
            if (Usuarios[i].id === IdUsuarioLogueado) {
                $("#lbCreador").text(Usuarios[i].nombre);
                return Usuarios[i].nombre;
            }
                }
        }

          function getInventario() {
            ///get inventario
            $.ajax({

            type: "get",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("GetAllInventario", "Inventario")',
           success: function (data) {
               cargarddInventario(data);
               console.log(data);
               _Inventario = data;
                inventario = JSON.parse(JSON.stringify(data));
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }
            });
        }

    });

        function existeItem(id) {

            var flag = false;
            for (var i = 0; i < _Inventario.length; i++) {

                if (parseInt(_Inventario[i].idInventario) === parseInt(id))
                    flag = true;
            }
            return flag;
        }
        
    function validarLinea() {

        var flag = true;
        var exi = parseFloat($("#lbExistencia").text());
        var cant = parseFloat($("#lbCantidad").text());
        if ( exi < cant ){
                flag = false;
                 cargarAlert('@SharedLocalizer["cantidaMayorQueExistencias"]');
        }

        return flag;

    }

///////////////////////////////////AJUSTES/////////////////////////////////////////////////////////////////////
        $("#ddInventario").change(function () {
            var _CostoPromedio = 0;
            for (var i = 0; i < _Inventario.length; i++) {
                if (_Inventario[i].idInventario === parseInt($(this).val())) {
                    _Existencia ="Existencia: "+ _Inventario[i].existenciaGeneral;
                    _CostoPromedio = _Inventario[i].costoPromedioGeneral;
                    $("#lbExistencia").text(_Existencia);
                    $("#lbCostoPromedio").val(_CostoPromedio);
                    setTotalLinea();
                }
            }

        });

        $("#lbCantidad").on('focusout', function () {
            if ($(this).val() <= 0 || $(this).val() === "") 
                $(this).val(1);
            
            setTotalLinea();
        });

        $("#lbCostoPromedio").on('focusout', function () {
            if ($(this).val() <= 0 || $(this).val() === "") 
                $(this).val(1);
            
            setTotalLinea();
    });

        function setTotalLinea() {

            var precio = parseFloat($("#lbCostoPromedio").val());
            var cantidad = parseFloat($("#lbCantidad").val());
           


            $("#lbTotal").val(cantidad * precio);

        }


////////////////////////////////////CARGAR DROPDOWNS//////////////////////////////////////////////////////////////
        function cargarddMoneda(moneda) {

            for (var i = 0; i < moneda.length; i++) {
                var o = "<option value=" + moneda[i].codigo + ">" + moneda[i].nombre + "</option>";
                $("#ddMoneda").append(o);
            }

        }


        function cargarddUsuarios(usuarios) {
            for (var i = 0; i < usuarios.length; i++) {
                var o = "<option value=" + usuarios[i].id + ">" + usuarios[i].nombre + "</option>";
                $("#ddVendedor").append(o);
            }
        }

        function cargarddClientes(clientes) {

            for (var i = 0; i < clientes.length; i++) {
                var o = "<option value=" + clientes[i].idContacto + ">" + clientes[i].nombre + "</option>";
                $("#ddClientes").append(o);
            }

        }

        function cargarddInventario(inventario) {

            for (var i = 0; i < inventario.length; i++) {
                var o = "<option value=" + inventario[i].idInventario + ">" + inventario[i].descripcion + "</option>";
                $("#ddInventario").append(o);
            }

        }




    function cargarTabla(data) {
        $('.filasCargadas').remove();

        contadorFila = 0;


        for (var i = 0; i < data.length; i++) {
            contadorFila++;

            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '"><td style="padding-top:2rem;">' +  data[i].nombreItem + '</td>'
                + '<td style="padding-top:2rem;">' + data[i].cantidad + '</td>'
                + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].costoPromedio + '"/></td>'
                + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].totalMovimiento + '"/></td>'
                + '<td><button  class="btn btn-link" value="' + contadorFila + '" onclick="eliminarLinea(value, ' + data[i].id + ')" ><i class="fas fa-trash"></i></button></td></tr>';
            $('.lineaForm').before(body);
        }

        $(".currency").inputmask('currency', {
            prefix: monedas[0].nombre + ' ',
            rightAlign: true
        });

        inicializaCampos();

    }

    ////////////////////////////////////////////////////////////FUNCIONES DE GUARDADO,EDITAR//////////////////////////////////////


    function guardarCambios() {

        if (validarForm()) {
            guardarLinea();
            guardarCompra();
        }
    }

    function inicializaCampos() {

       $("#ddInventario").val("0");
        $("#lbCantidad").val(0);
        setTotalLinea();
    }

    function inicializarTabla() {
        $('#tblDetalleCotizacion').DataTable().destroy();
        tblCotizacion = $('#tblCotizacion').DataTable({
            "info": false,
            dom: 'Bfrtip',
            language: {
                "decimal": "",
                "emptyTable": "@SharedLocalizer["NoDatos"]",
                "info": "Mostrando _START_ a _END_ de _TOTAL_ Entradas",
                "infoEmpty": "Mostrando 0 to 0 of 0 Entradas",
                "infoFiltered": "(Filtrado de _MAX_ total entradas)",
                "infoPostFix": "",
                "thousands": ",",
                "lengthMenu": "@SharedLocalizer["Mostrar"] _MENU_ @SharedLocalizer["Entradas"]",
                "loadingRecords": "Cargando...",
                "processing": "Procesando...",
                "search": "<i class='fas fa-search'></i>",
                "zeroRecords": "@SharedLocalizer["sinResultados"]",
                "paginate": {
                    "first": "@SharedLocalizer["Primero"]",
                    "last": "@SharedLocalizer["Último"]",
                    "next": "@SharedLocalizer["Sguiente"]",
                    "previous": "@SharedLocalizer["Anterior"]"
                }
            },
            buttons: [
                {
                    extend: 'copyHtml5',
                    text: '<i class="fas fa-copy   " ></i>',
                    titleAttr: 'Copy',
                    title: '@SharedLocalizer["CrarCotizacion"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }

                },
                {
                    extend: 'excelHtml5',
                    text: '<i class="fas fa-file-excel  "></i>',
                    titleAttr: 'Excel',
                    title: '@SharedLocalizer["CrearCotizacion"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }

                },

                {
                    extend: 'pdfHtml5',
                    text: '<i class="fas fa-file-pdf   "></i>',
                    titleAttr: 'PDF',
                    title: '@SharedLocalizer["AjusteManual"]',
                    exportOptions: {
                        columns: [0, 1, 3]
                    }
                }
            ]
        });

        $(".dataTables_searching").hide();
    }

             function crearModelo() {

        var ordenModel = {
            idCotizacion: @Model.IdCotizacion,
            fechaCotizacion: $("#fecha").val(),
            idCliente: $("#ddClientes").val(),
            estado:@Model.Estado,
            idMoneda: $("#ddMoneda").val(),
            idVendedor: $("#ddVendedor").val(),
            idUsuarioCreador: IdUsuarioLogueado ,
            subTotalBase: 1,
            subTotalDolar: 1,
            subTotalEuro: 1,
            subTotalGravadoBase:1,
            subTotalGravadoDolar: 1,
            subTotalGravadoEuro: 1,
            subTotalExcentoBase: 1,
            subTotalExcentoDolar: 1,
            subTotalExcentoEuro: 1,
            porcDescuento: 1,
            totalDescuentoBase: 1,
            totalDescuentoDolar: 1,
            totalDescuentoEuro: 1,
            subTotalGravadoNetoBase: 1,
            subTotalGravadoNetoDolar: 1,
            subTotalGravadoNetoEuro: 1,
            subTotalExcentoNetoBase: 1,
            subTotalExcentoNetoDolar: 1,
            subTotalExcentoNetoEuro: 1,
            montoIvaBase: 1,
            montoIvaDolar: 1,
            montoIvaEuro: 1,
            totalBase: l,
            totalDolar: l,
            totalEuro: l,
            fechaVencimiento: l,
            tipoCambioDolar: l,
            tipoCambioEuro: l,
            cotizacionDetalle: crearModeloDetalle(lineasAgregadas)
        };

        return ordenModel;
    }

    function crearModeloDetalle(model) {

        for (var i = 0; i < model.length; i++) {
            model[i].cantidad = model[i].cantidad.toString().replace(".", ",");
            model[i].precioUnitario = model[i].precioUnitario.toString().replace(".", ",");
            model[i].subTotalGravado = model[i].subTotalGravado.toString().replace(".", ",");
            model[i].subTotalExcento = model[i].subTotalExcento.toString().replace(".", ",");
            model[i].subTotalGravadoNeto = model[i].subTotalGravadoNeto.toString().replace(".", ",");
            model[i].subTotalExcentoNeto = model[i].subTotalExcentoNeto.toString().replace(".", ",");
            model[i].porcIva = model[i].porcIva.toString().replace(".", ",");
            model[i].totalIva = model[i].totalIva.toString().replace(".", ",");
            model[i].porcFa = model[i].porcFa.toString().replace(".", ",");
            model[i].totalFa = model[i].totalFa.toString().replace(".", ",");
            model[i].porcDescuento = model[i].porcDescuento.toString().replace(".", ",");
            model[i].totalDescuento = model[i].totalDescuento.toString().replace(".", ",");
            model[i].total = model[i].total.toString().replace(".", ",");
        }

        return model;
    }

      function cancelar() {
        var msj = "@SharedLocalizer["confirmCancelar"]";

        bootbox.confirm(msj, function (result) {

            if (result)
                window.location.href = "@Url.Action("CrearCotizacion","CotizacionProducto")";

        });
    }

    
    function eliminarLinea(_id, idLinea) {

        bootbox.confirm("@SharedLocalizer["confirmEliminarLinea"]", function (result) {

            if (result) {

                var id = _id - 1;

                if (validarExistencia(id)) {
                    if (idLinea != 0)
                        lineasEliminadas.push(lineas[id].id);
                    else
                        lineasAgregadas.splice($.inArray(lineas[id], lineasAgregadas), 1);

                    //la linea hay que convertirla a salida para que se reste
                    lineas[id].movimiento = "false";
                    recalcularExistencias(lineas[id]);

                    lineas.splice(id, 1);

                    cargarTabla(lineas);

                }


            }

        });


    }

      
    function validarExistencia(idlinea) {

        var salida = "";
        var linea = lineas[idlinea];

        if (linea.movimiento === "true") {


            for (var i = 0; i < lineas.length; i++) {
                if (lineas[i].idInventario === linea.idInventario && lineas[i].movimiento === "false")
                    salida = lineas[i];
            }
            if (salida === "")
                return true;
            else {
                var item = getItem(parseInt(linea.idInventario))[0];

                var existencia = item.existenciaBodega - parseInt(linea.cantidad);

                if (existencia >= parseInt(salida.cantidad))
                    return true;
                else {

                    cargarAlert("@SharedLocalizer["noPuedeEliminarlinea"]");
                    return false;
                }
            }

        }

        else
            return true;
    }

       function guardarCompra() {

        $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CrearEditarCotizacion", "CotizacionProducto")',
            data: crearModelo(),
            success: function (data) {
                    
                if (data.success) {
                    lineas[lineas.length - 1].id = data.idCD;
                    lineasAgregadas[lineasAgregadas.length - 1].id = data.idCD;
                    cargarTabla(lineas);
                    if (@Model.IdCotizacion === 0) {

                        var url = "@Url.Action("EditarCompra", new { id = "__id__" })";
                        window.location.href = url.replace("__id__", data.idCompra);

                    }
                }
                else
                    cargarAlert("@SharedLocalizer["numCompraRepitida"]");


               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
        });

    }

       function guardarLinea() {


           var model = {
            idCotizacion:@Model.IdCotizacion,
            idCotizacionDetalle: 0,
            idInventario: l,
            precioBase: l,
            precioDolar: $descripcion.val(),
            precioEuro: parseInt($('.tipoMoneda').val()),
            fechaCreacion: parseFloat($cantidad.val()),
            idUsuarioCreador: parseFloat($precio.val()),
            subTotalBase: calcularSubtotalGrabadoLinea(),
            subTotalDolar: calcularSubtotalExcentoLinea(),
            subTotalEuro: calcularSubtotalGrabadoNetoLinea(),
            subTotalGravadoBase: calcularSubtotalExcentoNetoLinea(),
            subTotalGravadoDolar: parseFloat($iva.val()),
            subTotalGravadoEuro: 0,
            subTotalExcentoBase: 0,
            subTotalExcentoDolar: 0,
            subTotalExcentoEuro: $('#bodega').val(),
            porDescuento: parseFloat($descuento.val()),
            totalDescuentoBase: calcularTotalDescuentoLinea(),
            totalDescuentoDolar: calcularTotalIvaLinea(),
            totalDescuentoEuro: calcularTotalLinea(),
            subTotalGravadoNetoBase: getBodegaItem($bodega.val()).nombre,
            subTotalGravadoNetoDolar: l,
            subTotalGravadoNetoEuro: 1,
            subTotalExcentoNetoBase: l,
            subTotalExcentoNetoEuro: l,
            montoIvaBase: l,
            montoIvaDolar: l,
            montoIvaEuro: l,
            totalBase: l,
            totalDolar: l,
            totalEuro: l

        };
        lineasAgregadas = [];

        lineasAgregadas.push(model);
        lineas.push(model);

        calcularTotales();

    }

        function guardarSalir() {


        if (validarForm()) {


            if (@Model.Estado === 'Borrador')
                guardarCompraBorrador();
            else
                guardarCompra();

            window.location.href = "@Url.Action("ListarCotizacionProducto")";
        }
    }

         function guardarCompraBorrador() {
        if (lineas.length <= 0) {
            cargarAlert('@SharedLocalizer["compraSinDetalle"]');
        } else
        $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CambiarEstadoBorradorCompra")',
            data: crearModelo(),
            success: function (data) {

                if (!data.success)
                   cargarAlert("@SharedLocalizer["numCompraRepitida"]");

               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
        });

    }

    function calcularTotales() {

        subTotalExcento = 0;
        subTotalGravado = 0;
        subTotalExcentoNeto = 0;
        subTotalGravadoNeto = 0;
        subTotalCompra = 0;
        totalDescuento = 0;
        totalImpuesto = 0;
        totalCompra = 0;


        for (var i = 0; i < lineas.length; i++) {
            subTotalExcento += parseFloat(lineas[i].subTotalExcento);
            subTotalExcentoNeto += parseFloat(lineas[i].subTotalExcentoNeto);
            subTotalGravado += parseFloat(lineas[i].subTotalGravado);
            subTotalGravadoNeto += parseFloat(lineas[i].subTotalGravadoNeto);
            subTotalCompra += parseFloat(lineas[i].subTotalExcento) + parseFloat(lineas[i].subTotalGravado);
            totalImpuesto += parseFloat(lineas[i].totalIva);
            totalDescuento += parseFloat(lineas[i].totalDescuento);
            totalCompra += parseFloat(lineas[i].total);
        }

        $subTotal.val(subTotalCompra);
        $totalImpuesto.val(totalImpuesto);
        $totalDescuento.val(totalDescuento);
        $total.val(totalCompra);
    }

    
    function cargarLineas(data) {

        for (var i = 0; i < data.length; i++) {
            var model = {
            idCotizacion:@Model.IdCotizacion,
            idCotizacionDetalle: 0,
            idInventario: l,
            precioBase: l,
            precioDolar: $descripcion.val(),
            precioEuro: parseInt($('.tipoMoneda').val()),
            fechaCreacion: parseFloat($cantidad.val()),
            idUsuarioCreador: parseFloat($precio.val()),
            subTotalBase: calcularSubtotalGrabadoLinea(),
            subTotalDolar: calcularSubtotalExcentoLinea(),
            subTotalEuro: calcularSubtotalGrabadoNetoLinea(),
            subTotalGravadoBase: calcularSubtotalExcentoNetoLinea(),
            subTotalGravadoDolar: parseFloat($iva.val()),
            subTotalGravadoEuro: 0,
            subTotalExcentoBase: 0,
            subTotalExcentoDolar: 0,
            subTotalExcentoEuro: $('#bodega').val(),
            porDescuento: parseFloat($descuento.val()),
            totalDescuentoBase: calcularTotalDescuentoLinea(),
            totalDescuentoDolar: calcularTotalIvaLinea(),
            totalDescuentoEuro: calcularTotalLinea(),
            subTotalGravadoNetoBase: getBodegaItem($bodega.val()).nombre,
            subTotalGravadoNetoDolar: l,
            subTotalGravadoNetoEuro: 1,
            subTotalExcentoNetoBase: l,
            subTotalExcentoNetoEuro: l,
            montoIvaBase: l,
            montoIvaDolar: l,
            montoIvaEuro: l,
            totalBase: l,
            totalDolar: l,
            totalEuro: l
            };
            lineas.push(model);
        }

        cargarTabla(lineas);
        calcularTotales();

    }
    
    //////calculos de linea/////////////////////////////////////////////////////////////////////

    function setSubTotalLinea() {

        var precio = parseFloat($precio.val());
        var cantidad = parseFloat($cantidad.val());

        $subTotalLinea.val(cantidad * precio);

    }

    function calcularSubtotalGrabadoLinea() {

        var iva = parseFloat($iva.val());
        if (iva > 0)
            return parseFloat($subTotalLinea.val());
        else
            return 0;
    }

    function calcularSubtotalExcentoLinea() {
        var iva = parseFloat($iva.val());
        if (iva === 0)
            return parseFloat($subTotalLinea.val());
        else
            return 0;
    }

    function calcularSubtotalExcentoNetoLinea() {

        var st = calcularSubtotalExcentoLinea();
        var desc = calcularTotalDescuentoLinea();
        if (st > 0)
            return st - desc;
        else
            return 0;

    }

    function calcularSubtotalGrabadoNetoLinea() {
        var st = calcularSubtotalGrabadoLinea();
        var desc = calcularTotalDescuentoLinea();
        if (st > 0)
            return st - desc;
        else
            return 0;

    }


    function calcularTotalIvaLinea() {
        var iva = parseFloat($iva.val());
        var subTotal = parseFloat($subTotalLinea.val()) - calcularTotalDescuentoLinea();
        return (iva / 100) * subTotal;
    }

    function calcularTotalDescuentoLinea() {

        var desc = parseFloat($descuento.val());
        var subTotal = parseFloat($subTotalLinea.val());
        return (desc / 100) * subTotal;

    }
    function calcularTotalLinea() {

        return (calcularSubtotalGrabadoNetoLinea() + calcularSubtotalExcentoNetoLinea()) + calcularTotalIvaLinea();

    }

</script>

<script src="~/lib/vendors/jsPDF/AM.js"></script>