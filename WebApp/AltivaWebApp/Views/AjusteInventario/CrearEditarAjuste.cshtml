@model AltivaWebApp.ViewModels.AjusteViewModel
@inject IStringLocalizer<SharedResources> SharedLocalizer
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "CrearEditarAjuste";

    var usuario = ViewData["usuario"] as TbSeUsuario;

    var estado = "";
    var estado2 = "";

    if (Model.Anulada)
    {
        estado = "disabled";
    }

    if (ViewBag.tieneToma)
    {
        estado2 = "disabled";
    }
}


@if (Model.Id != 0)
{
    <div class="row">
        <div class="col-md-3"><h3>@SharedLocalizer["editarAjuste"]</h3></div>
        <div class="col-md-offset-8 col-md-1"><button style="font-size:2rem; padding-top:1rem" onclick="crearPdf()" class="btn btn-link"><i class="fas fa-file-pdf"></i>PDF</button></div>
    </div>

}
else
{
    <h3>@SharedLocalizer["nuevoAjuste"]</h3>
}

<hr />

<div class="row">
    @if (Model.Id != 0 && !Model.Anulada )
    {
        <div class="col-md-12 text-right"><button class="btn btn-danger btn-sm" onclick="anularAjuste()">@SharedLocalizer["Anular"]</button></div>
    }
    else if (Model.Id != 0)
    {
        <div class="col-md-12 text-left"><h4 class="text-danger">@SharedLocalizer["AjusteAnulado"]</h4></div>
    }
</div>

<div class="row well">

    <div class="row">

        <form class="frmAjuste">
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.Anulada)
            @Html.HiddenFor(x => x.IdUsuario)
            @Html.HiddenFor(x => x.FechaCreacion)

            <div class="form-group col-md-2 col-sm-6 col-xs-12">

                <fieldset @estado2>
                    <div class="form-group">
                        <label for="fecha">@SharedLocalizer["Fecha"]:</label>
                        <div class='input-group date' id='fechaPicker'>
                            <input @estado2 type='text' class="form-control" id="fecha" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>

            <div class="form-group col-md-2 col-sm-6 col-xs-12">
                <label asp-for="IdBodega" class="control-label">@SharedLocalizer["Bodega"]:</label>
                <select class="form-control" asp-for="IdBodega" id="bodegas">
                    @*<option value="0">@SharedLocalizer["Seleccione"]</option>*@
                </select>
            </div>
            <div class="form-group col-md-5 col-sm-6 col-xs-12">
                <label asp-for="Descripcion" class="control-label">@SharedLocalizer["Descripción"]:</label>
                <textarea  data-limit-rows="true" asp-for="Descripcion" id="descripcionAjuste" rows="6" maxlength="500" class="form-control"></textarea>
                <span hidden class="text-danger" id="descripcionAjusteValid">@SharedLocalizer["descripcionValid"]</span>
            </div>

            <div class="form-group col-md-3 col-sm-6 col-xs-12">
                <label class="control-label">@SharedLocalizer["Usuario"]:</label>
                <input type="text" readonly class="form-control" value="@usuario.Nombre" />
            </div>

        </form>
    </div>
    <br />

    <div class="row">
        <h4 class="col-md-12">@SharedLocalizer["LineasAjuste"]</h4>
    </div>




    <div class="table-responsive">
        <table class="table table-striped table-bordered" id="tblAjusteInventario" style="min-width:1200px">
            <thead>
                <tr>
                    <th style="width:19%;">
                        <span>@SharedLocalizer["Item"]</span>
                    </th>
                    <th style="width:13%;">
                        <span>@SharedLocalizer["Movimiento"]</span>
                    </th>
                    <th style="width:6%;">
                        <span>@SharedLocalizer["Cantidad"]</span>
                    </th>
                    <th style="width:10%;">
                        <span>@SharedLocalizer["CostoPromedio"]</span>
                    </th>
                    <th style="width:10%;">
                        <span>@SharedLocalizer["Total"]</span>
                    </th>
                    <th style="width:18%;">
                        <span>@SharedLocalizer["cuentaContable"]</span>
                    </th>
                    <th style="width:18%;">
                        <span>@SharedLocalizer["CuentaCosto"]</span>
                    </th>
                    <th style="width:6%;">
                        <span>@SharedLocalizer["accion"]</span>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr class="lineaForm">
                    <td class="col-md-3"><div class="col-md-9"><select @estado2 class="form-control" id="items"></select></div><div style="padding-top: 1rem" class="col-md-3"><label id="lblItemInfo"></label></div></td>
                    <td>
                        <select @estado2 class="form-control" id="movimiento">
                            <option value="true">@SharedLocalizer["Entrada"]</option>
                            <option value="false">@SharedLocalizer["Salida"]</option>
                        </select>
                    </td>
                    <td><input @estado2 id="cantidad" class="form-control numerico" type="text" min="1" value="1" /></td>
                    <td><input @estado2 id="costoPromedio" class="form-control moneda" type="text" /></td>
                    <td><input type="text" class="form-control moneda" readonly id="total" /></td>
                    <td>
                        <select @estado2 class="form-control selectItem" id="cuentaContable"></select>
                    </td>
                    <td>
                        <select @estado2 class="form-control selectItem" id="cuentaCosto"></select>
                    </td>
                    <td>
                        <button @estado2 class="btn btn-link btnAccion" onclick="guardarLinea()"><i class="fas fa-save"></i></button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="row">
        <form class="col-md-3 col-md-offset-9 frmAjuste2">
            <div class="form-group col-xs-12">
                <label asp-for="TotalEntrada" class="control-label">@SharedLocalizer["Entrada"]</label>
                <input readonly id="entradas" class="form-control currency" type="text" />
                <span asp-validation-for="TotalEntrada" class="text-danger"></span>
            </div>
            <div class="form-group col-xs-12">
                <label asp-for="TotalSalida" class="control-label">@SharedLocalizer["Salida"]</label>
                <input readonly id="salidas" class="form-control currency" type="text" />
                <span asp-validation-for="TotalSalida" class="text-danger"></span>
            </div>
            <div class="form-group col-xs-12">
                <label asp-for="SaldoAjuste" class="control-label">@SharedLocalizer["Saldo"]</label>
                <input readonly id="saldo" class="form-control currency" type="text" />
                <span asp-validation-for="SaldoAjuste" class="text-danger"></span>
            </div>
        </form>
    </div>


</div>
<div class="form-group row">
    <div class="col-md-12">
        <button @estado2 class="btn btn-success btnAccion" onclick="guardarCambios()">@SharedLocalizer["Guardar"] <i class="fas fa-save"></i></button>
        <a onclick="cancelar()" class="btn btn-default">@SharedLocalizer["Cancelar"]</a>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-md-12">
        <div id="comentarios">

        </div>
    </div>
</div>

<div hidden><input hidden id="formater" class="currency" type="text" /></div>

<script src="~/js/comentario.js"></script>
<script src="~/js/base64ImageCreator.js"></script>
<style>
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        /* display: none; <- Crashes Chrome on hover */
        -webkit-appearance: none;
        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */
    }

    input[type=number] {
        -moz-appearance: textfield; /* Firefox */
    }
</style>



<script>

    var bodegas = [];
    var arrayItems = [];
    var arrayAjusteFromDB = [];
    var lineas = [];
    var lineasEliminadas = [];
    var lineasAgregadas = [];
    var cuentaCostoArray = [];
    var cuentaContableArray = [];
    var monedas = [];

    var frmAjuste = $('.frmAjuste');
    var frmAjuste2 = $('.frmAjuste2');
    var items = $('#items');
    var movimiento = $('#movimiento');
    var descripcionLinea = $('#descripcionLinea');
    var cantidad = $('#cantidad');
    var costoPromedio = $('#costoPromedio');
    var total = $('#total');
    var cuentaContable = $('#cuentaContable');
    var cuentaCosto = $('#cuentaCosto');
    var entradas = 0;
    var salidas = 0;
    var saldo = 0;
    var $entradas = $('#entradas');
    var $salidas = $('#salidas');
    var $saldo = $('#saldo');
    var fechaDocumento = $('#fecha');
    var arrayInventario = [];


    $(document).ready(function () {
        if (@Model.Id != 0) {
            GetComentarios("Ajuste", @Model.Id);
            $('#bodegas').attr('disabled', true);
        }

        if ('@ViewBag.tieneToma' === "True") {
            $('#descripcionAjuste').prop('disabled', "disabled");
        }


        getCuentaContable();
        getCuentaCosto();
        getMonedas();


        $('.selectItem').select2();
        getBodegasInventario();

        inicializaTabla();

        validaAnulacion();

        $('#fechaPicker').datetimepicker({
            defaultDate: new Date(),
            locale: localStorage.getItem("idioma")
        });

        $(".moneda").inputmask({
            'alias': 'decimal',
            rightAlign: true,
        });

        $(".numerico").inputmask({
            'alias': 'decimal',
            rightAlign: false,
        });


        $('#items').on('change.select2', function () {

            cargarCostoPromedio(arrayItems);
        });

        $('textarea[data-limit-rows=true]')
            .on('keypress', function (event) {
                var textarea = $(this),
                    text = textarea.val(),
                    numberOfLines = (text.match(/\n/g) || []).length + 1,
                    maxRows = parseInt(textarea.attr('rows'));

                if (event.which === 13 && numberOfLines === maxRows) {
                    return false;
                }
            });


    });


    function getAjusteInventario() {
        if(@Model.Id != 0)
        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetAjusteinventario", "AjusteInventario")',
            data: {id: @Model.Id},
            success: function (data) {
                arrayAjusteFromDB = JSON.parse(JSON.stringify(data.tbPrAjusteInventario));
                cargarLineas(data);
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }


    function guardarCambios() {


        if (validarCampos()) {
            if (lineas.length > 0) {
                if (@Model.Id != 0)
                    editarAjuste();
                else
                    guardarAjuste();
            }
            else
                cargarAlert('@SharedLocalizer["sinLineas"]');

        }

    }


    function guardarLinea() {

        if (validarLinea()) {
             var model = {
                 id: 0,
                 idAjuste: @Model.Id,
                 idInventario: items.val(),
                 descripcion: "n/a",
                 movimiento: movimiento.val(),
                 cantidad: parseFloat(cantidad.val()),
                 costoPromedio: costoPromedio.val(),
                 totalMovimiento: total.val(),
                 idCuentaContable: cuentaContable.val(),
                 idCentroGastos: cuentaCosto.val(),
                 cuentaContable: {
                     codigo: $('#cuentaContable option:selected').text(),
                     descripcion: ""
                 },
                 cuentaCosto: {
                     codigo: $('#cuentaCosto option:selected').text(),
                     descripcion: ""
                 },
                 nombreItem: $('#items option:selected').text().replace(/ /g, " "),
             };

             var model2 = {
                 id: 0,
                 idAjuste: @Model.Id,
                 idInventario: items.val(),
                 descripcion: "n/a",
                 movimiento: movimiento.val(),
                 cantidad: cantidad.val().toString().replace(/\./g, ','),
                 costoPromedio: costoPromedio.val().toString().replace(/\./g, ','),
                 totalMovimiento: total.val().toString().replace(/\./g, ','),
                 idCuentaContable: cuentaContable.val(),
                 idCentroGastos: cuentaCosto.val(),
                 cuentaContable: {
                     codigo: $('#cuentaContable option:selected').text(),
                     descripcion: ""
                 },
                 cuentaCosto: {
                     codigo: $('#cuentaCosto option:selected').text(),
                     descripcion: ""
                 },
                 nombreItem: $('#items option:selected').text().replace(/ /g, ""),
             };

            if (!existeItem(model.idInventario, model.movimiento)) {
                recalcularExistencias(model);
                lineas.push(model);
                cargarTabla(lineas);
                lineasAgregadas.push(model2);
                $('#bodegas').attr("disabled", true);
            }
            else
                cargarAlert('@SharedLocalizer["duplicacionValid"]');
        }

    }

    function eliminarLinea(_id, idLinea) {

        bootbox.confirm("@SharedLocalizer["confirmEliminarLinea"]", function (result) {

            if (result) {

                var id = _id - 1;

                if (validarExistencia(id)) {
                    if (idLinea != 0)
                        lineasEliminadas.push(lineas[id].id);
                    else
                        lineasAgregadas.splice($.inArray(lineas[id], lineasAgregadas), 1);

                    //la linea hay que convertirla a salida para que se reste
                    lineas[id].movimiento = "false";
                    recalcularExistencias(lineas[id]);

                    lineas.splice(id, 1);

                    cargarTabla(lineas);

                    if (lineas.length === 0)
                        $('#bodegas').attr("disabled", false);
                }


            }

        });


    }


    function validarLinea() {

        var flag = true;

        if (movimiento.val() === "false" && getItem(items.val())[0].existenciaBodega < parseFloat(cantidad.val())) {
                flag = false;
                cargarAlert('@SharedLocalizer["cantidaMayorQueExistencias"]');
        }

        return flag;

    }

    function validarExistencia(idlinea) {

        var salida = "";
        var linea = lineas[idlinea];

        if (linea.movimiento === "true") {


            for (var i = 0; i < lineas.length; i++) {
                if (lineas[i].idInventario === linea.idInventario && lineas[i].movimiento === "false")
                    salida = lineas[i];
            }
            if (salida === "")
                return true;
            else {
                var item = getItem(parseInt(linea.idInventario))[0];

                var existencia = item.existenciaBodega - parseInt(linea.cantidad);

                if (existencia >= parseInt(salida.cantidad))
                    return true;
                else {

                    cargarAlert("@SharedLocalizer["noPuedeEliminarlinea"]");
                    return false;
                }
            }

        }

        else
            return true;



    }

    function cargarLineas(array) {

        var data = array.tbPrAjusteInventario;

        for (var i = 0; i < data.length; i++) {
            var model = {
                id: data[i].id,
                idAjuste: @Model.Id,
                idInventario: data[i].idInventario,
                descripcion: data[i].descripcion,
                movimiento: data[i].movimiento.toString(),
                cantidad: data[i].cantidad,
                costoPromedio: data[i].costoPromedio,
                totalMovimiento: data[i].totalMovimiento,
                idCuentaContable: data[i].idCuentaContableNavigation.id,
                idCentroGastos: data[i].idCentroGastosNavigation.id,
                cuentaContable: {
                    codigo: data[i].idCuentaContableNavigation.cuentaContable,
                    descripcion: data[i].idCuentaContableNavigation.descripcion
                },
                cuentaCosto: {
                    codigo: data[i].idCentroGastosNavigation.codigo,
                    descripcion: data[i].idCentroGastosNavigation.nombre
                },
                nombreItem: data[i].idInventarioNavigation.descripcion
            };

            lineas.push(model);
        }

        cargarTabla(lineas);

    }

    function getBodegasInventario() {

          $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetBodegaInventario", "AjusteInventario")',
              success: function (data) {
                  bodegas = data;
                  cargarBodegas(data);
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function getMonedas() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetMonedas", "Monedas")',
             success: function (data) {

                 monedas = data;               

              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    $("#bodegas").change(function () {

        for (var i = 0; i < bodegas.length; i++) {
            if (bodegas[i].id === parseInt($(this).val()))
                cargarItems(bodegas[i].tbPrInventarioBodega);
        }

    });

    costoPromedio.on('keyup, change, focusout', function () {

        calcularTotalMovimiento();

    });

    cantidad.on('focusout', function () { if ($(this).val() === "" || $(this).val() === "0") cantidad.val(0.1); });

    movimiento.change(function () {

        if ($(this).val() === "true")
            costoPromedio.attr('disabled', false);
        else {
            costoPromedio.attr('disabled', true);
            $('#items').trigger('change'); 
        }
            
    });

    fechaDocumento.on('keyup', function () {
        $('#fechaPicker').datetimepicker('defaultDate', new Date());
    });



    cantidad.on("keyup, change, focusout", function () {

        if (parseFloat(cantidad.val()) < 0)
            cantidad.val(0);

        calcularTotalMovimiento();

    });

    function cargarTabla(data) {
        $('.filasCargadas').remove();

        contadorFila = 0;


        for (var i = 0; i < data.length; i++) {
            contadorFila++;


            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '"><td style="padding-top:2rem;">' +  data[i].nombreItem + '</td>'
                + '<td style="padding-top:2rem;"><input style="width:100%; border:0; background-color : #F7F7F7" value="' + getMovimiento(data[i].movimiento) + '"/></td>'
                + '<td style="padding-top:2rem;">' + data[i].cantidad + '</td>'
                + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].costoPromedio + '"/></td>'
                + '<td style="padding-top:2rem;"><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].totalMovimiento + '"/></td>'
                + '<td style="padding-top:2rem;"><a class"btn btn-link" href="#">' + data[i].cuentaContable.codigo + ' - ' + data[i].cuentaContable.descripcion + '</a></td>'
                + '<td style="padding-top:2rem;"><a class"btn btn-link" href="#">' + data[i].cuentaCosto.codigo + ' - ' + data[i].cuentaCosto.descripcion + '</a></td>'
                + '<td><button @estado2  @estado class="btn btn-link" value="' + contadorFila + '" onclick="eliminarLinea(value, ' + data[i].id + ')" ><i class="fas fa-trash"></i></button></td></tr>';

            $('.lineaForm').before(body);

        }

        $(".currency").inputmask('currency', {
            prefix: monedas[0].simbolo + ' ',
            rightAlign: true
        });

        calcularTotales();
        inicializaTabla();
        inicializaCampos(data[data.length -1]);

    }

    function cargarBodegas(data) {

        var flag = true;

        for (var i = 0; i < data.length; i++) {
            var o = new Option(data[i].nombre, data[i].id);
            if (data[i].id === @Model.IdBodega) {
                $(o).attr('selected', true);
                cargarItems(data[i].tbPrInventarioBodega);
                flag = false;
            }

            $("#bodegas").append(o);
        }

        if (flag)
            cargarItems(data[0].tbPrInventarioBodega);

        getAjusteInventario();

    }

    function cargarItems(data) {

        arrayInventario = data;

        $('#items option').remove();

        arrayItems = [];

        for (var i = 0; i < data.length; i++) {

            if (!data[i].idInventarioNavigation.inactiva) {
                var o = new Option(data[i].idInventarioNavigation.codigo + ' - ' + data[i].idInventarioNavigation.descripcion, data[i].idInventarioNavigation.idInventario);
                items.append(o);
                arrayItems.push(data[i].idInventarioNavigation);
            }

        }

        $('#items').select2({ width: null, language: localStorage.getItem("idioma") });
        cargarCostoPromedio(arrayItems);


    }


    function cargarCostoPromedio(data) {


        for (var i = 0; i < data.length; i++) {
            if (parseInt(items.val()) === data[i].idInventario) {
                costoPromedio.val(data[i].costoPromedioGeneral);
                $('#lblItemInfo').text(getItem(data[i].idInventario)[0].existenciaBodega + " " + data[i].idUnidadMedidaNavigation.abreviatura);
                break;
            }
        }

       calcularTotalMovimiento();
    }
    function calcularTotalMovimiento() {

        var res = parseFloat(cantidad.val()) * parseFloat(costoPromedio.val());
        if (cantidad.val() === '')
            res = 0;
        total.val(res);
    }

    function getItem(id) {

        var it = [];
        for (var i = 0; i < arrayInventario.length; i++) {
            if (arrayInventario[i].idInventarioNavigation.idInventario === parseInt(id))
                it.push(arrayInventario[i]);
        }

        return it;
    }

    function existeItem(id, mov) {

        var flag = false;
        for (var i = 0; i < lineas.length; i++) {

            if (parseInt(lineas[i].idInventario) === parseInt(id) && lineas[i].movimiento.toString() === mov)
                flag = true;
        }
        return flag;
    }

    function getMovimiento(key) {
        if (key === "true")
            return "@SharedLocalizer["Entrada"]";
        else
            return "@SharedLocalizer["Salida"]";
    }

    function calcularTotales() {

        $entradas.val("");
        $salidas.val("");
        entradas = 0;
        salidas = 0;


        for (var i = 0; i < lineas.length; i++) {
            if (lineas[i].movimiento === "true")
                entradas += parseFloat(lineas[i].totalMovimiento);
            else
                salidas += parseFloat(lineas[i].totalMovimiento);
        }

        $entradas.val(entradas);
        $salidas.val(salidas);
        saldo = entradas - salidas;
        $saldo.val(saldo);
    }

    function recalcularExistencias(linea) {



        var item = getItem(parseInt(linea.idInventario))[0];

        if (linea.movimiento === "true") {
            item.existenciaBodega += parseInt(linea.cantidad);
        }
        else if (linea.movimiento === "false") {
            item.existenciaBodega -= parseInt(linea.cantidad);
        }

    }

    function inicializaTabla() {

    }

    function guardarAjuste() {

       $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CrearEditarAjuste", "AjusteInventario")',
            data: crearModelo(),
            success: function (data) {
                //console.log(data);
                window.location.href = "@Url.Action("ListarAjustes","AjusteInventario")";
               },
           error: function (err, scnd) {
                var msj = '@SharedLocalizer["errorGeneral"]';
                  cargarAlert(msj);
                  console.log(err.statusText);
              }
        });

    }
    function editarAjuste() {

        $.ajax({
              type: "POST",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("CrearEditarAjuste", "AjusteInventario")',
            data: crearModeloEditar(),
            success: function (data) {
                //console.log(data);
                if (lineasAgregadas.length > 0)
                    guardarAjusteInventario();
                if (lineasEliminadas.length > 0)
                    eliminarAjusteInventario();

                window.location.href = "@Url.Action("ListarAjustes","AjusteInventario")";
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
        });




    }

    function guardarAjusteInventario() {

        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("CrearAjusteInventario", "AjusteInventario", new { idBodega = Model.IdBodega })',
            data: { viewModel: lineasAgregadas},
            success: function (data) {
                //console.log(data);

               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }
    function eliminarAjusteInventario() {
        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("EliminarAjusteInventario", "AjusteInventario", new { idAjuste = Model.Id })',
            data: { id: lineasEliminadas },
            success: function (data) {
               // console.log(data);

               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function crearModelo() {


        var frm = frmAjuste.serializeArray();
        console.log(frm);


        var ajusteModel = {
            id: @Model.Id,
            anulada: frm[1].value,
            totalEntrada: entradas,
            totalSalida: salidas,
            saldoAjuste: saldo,
            idUsuario: frm[2].value,
            idBodega: $('#bodegas').val(),
            descripcion: $('#descripcionAjuste').val(),
            fechaDocumento: fechaDocumento.val(),
            ajusteInventario: lineas
        };

        return ajusteModel;

    }

    function crearModeloEditar() {


        var frm = frmAjuste.serializeArray();



        var ajusteModel = {
            id: @Model.Id,
            anulada: frm[1].value,
            totalEntrada: entradas,
            totalSalida: salidas,
            saldoAjuste: saldo,
            idUsuario: frm[2].value,
            idBodega: $('#bodegas').val(),
            descripcion: frm[4].value,
            fechaDocumento: fechaDocumento.val(),
            ajusteInventario: null
        };

        return ajusteModel;

    }

    function crearPdf() {

        generate_cutomPDF(crearModeloPDF());

    }

    function crearModeloPDF() {

        var empresaModel = JSON.parse(localStorage.getItem("empresaInfo"));

        var modelo = {
            empresa: {
                nombre: localStorage.getItem("empresa"),
                telefono: empresaModel.tel,
                correo: empresaModel.correo,
                cedJuridica: empresaModel.ced,
                logo: getImgFromUrl(localStorage.getItem("fotoEmpresa")),
                nombreTitulo: "@SharedLocalizer["Nombre"]:",
                telTitulo: "@SharedLocalizer["Tel"]:",
                correoTitulo: "@SharedLocalizer["Correo"]:",
                cedTitulo: getTittulos().cedJuridica
            },
            entrada: formatTotales().entradas,//$entradas.val().replace("₡", "CRC.\ \ "),
            salida: formatTotales().salidas,
            saldo: formatTotales().saldo,
            nombreDoc: '@SharedLocalizer["AjusteManual"] ' + '#@Model.Id',
            nombreDescarga: '@SharedLocalizer["ajustemanual"]_' + @Model.Id + '.pdf',
            columnas: {
                item: "Item",
                movimiento: "@SharedLocalizer["Movimiento"]",
                cantidad: "@SharedLocalizer["Cantidad"]",
                costo: "@SharedLocalizer["Costo"]",
                total: "@SharedLocalizer["Total"]",
                cuentaContable: "@SharedLocalizer["cuentaContable"]",
                cuentaCosto: "@SharedLocalizer["CuentaCosto"]",
                nombreCuentaCosto: "@SharedLocalizer["Nombre"]",
                nombreCuentaContable: "@SharedLocalizer["Nombre"]"
            },
            filas: crearFilasPdf(),
            resumen: {
                entrada: "@SharedLocalizer["Entrada"]",
                salida: "@SharedLocalizer["Salida"]",
                saldo: "@SharedLocalizer["Saldo"]",
                autorizado: "@SharedLocalizer["Autorizado por"]:______________________"
            },
            bodega: $('#bodegas option:selected').text(),
            fecha: $('#fecha').val(),
            descripcion: getDescripcion($('#descripcionAjuste').val()),
            bodegaTitulo: "@SharedLocalizer["Bodega"]:",
            descripcionTitulo: getTittulos().desc,
            fechaTitulo: "@SharedLocalizer["Fecha"]:",
            estado: getEstado()

        };

        return modelo;

    }


    function formatTotales() {
        var tam = 0;
        var space = 0;
        var s = "";
        var e = "";
        var saldo = "";

        if ($salidas.val().length > $entradas.val().length && $salidas.val().length > $saldo.val().length)
            tam = $salidas.val().length;
        else if ($entradas.val().length > $salidas.val().length && $entradas.val().length > $saldo.val().length)
            tam = $entradas.val().length;
        else if ($saldo.val().length > $salidas.val().length && $saldo.val().length > $entradas.val().length)
                tam = $saldo.val().length;

        else
            tam = $saldo.val().length;

        tam = tam - 1;
        if ($saldo.val().indexOf("-") > -1)
            tam = tam + 1;

        for (var i = $saldo.val().length; i < tam; i++) {
            saldo += "\ \ ";
        }
        for (var i = $salidas.val().length; i < tam; i++) {
            s += "\ \ ";
        }
        for (var i = $entradas.val().length; i < tam; i++) {
            e += "\ \ ";
        }


        return {
            salidas: s + $salidas.val(),
            entradas: e + $entradas.val(),
            saldo: saldo + $saldo.val()
        }

    }
    function getEstado() {
        if ('@Model.Anulada' === "True")
            return "@SharedLocalizer["AjusteAnulado"]";
        else
            return "";
    }

    function getTittulos() {
        var idioma = localStorage.getItem("idioma");
        if (idioma === "es")
            return {
                desc: "Descripción:",
                cedJuridica: "Cédula Jurídica:"
            };
        else
            return {
                desc: "Description:",
                cedJuridica: "Legal Number:"
            };
    }




    function getDescripcion(data) {
        var desc = data.match(/.{1,125}/g).join("\n");
        return desc;

    }

    function crearFilasPdf() {

        var row = [];
        for (var i = 0; i < lineas.length; i++) {
            var model = {
                item: lineas[i].nombreItem,
                movimiento: getMovimiento(lineas[i].movimiento),
                cantidad: lineas[i].cantidad,
                costo: formatearMoneda(lineas[i].costoPromedio),
                total: formatearMoneda(lineas[i].totalMovimiento),
                cuentaContable: lineas[i].cuentaContable.nombre,
                nombreCuentaContable: getCContInfo(lineas[i].idCuentaContable).descripcion,
                cuentaCosto: lineas[i].cuentaCosto,
                nombreCuentaCosto: getCCostInfo(lineas[i].idCentroGastos).nombre
            };

            row.push(model);
        }
        return row;
    }

    function formatearMoneda(val) {
        $('#formater').val(val);
        return $('#formater').val();
    }

    function validarCampos() {

        var frm = frmAjuste.serializeArray();
        if (frm[4].value.replace(/ /g, "") === "") {
            $('#descripcionAjusteValid').attr('hidden', false);
            return false;
        }
        return true;
    }

    function inicializaCampos(linea) {

        //console.log(linea);
        $('#items').trigger('change.select2');
        descripcionLinea.val("");
        cantidad.val(0);
        calcularTotalMovimiento();

        if (linea != undefined)
            movimiento.val(linea.movimiento);
    }

    function cancelar() {
        var msj = "@SharedLocalizer["confirmCancelar"]";

        bootbox.confirm(msj, function (result) {

            if (result)
                window.location.href = "@Url.Action("ListarAjustes","AjusteInventario")";

        });
    }

    function anularAjuste() {

        bootbox.prompt({
            title: "@SharedLocalizer["confirmAnularAjuste"]",
            message: '<p>@SharedLocalizer["Justificación"]</p>',
            inputType: 'textarea',
            callback: function (result) {

                if (result != null) {
                    if (result.replace(/ /g, "") != "") {
                    $.ajax({
                        type: "get",
                        headers: {
                            "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                        },
                        dataType: "json",
                        url: '@Url.Action("AnularAjuste", "AjusteInventario", new { id = Model.Id })',
                        success: function (data) {
                            if (data.success) {
                                cargarJustificacion(result);
                                cargarAlert('@SharedLocalizer["AjusteAnulado"]');
                                window.location.href = "@Url.Action("ListarAjustes","AjusteInventario")";
                            }
                            else
                                cargarAlert('@SharedLocalizer["anulacionInvalida"]');


                        },
                        error: function (err, scnd) {
                            cargarAlert('@SharedLocalizer["errorGeneral"]');
                            console.log(err.statusText);
                        }
                    });

                }
                else
                    cargarAlert('@SharedLocalizer["JustificacionInvalida"]');
                }


            }
        });

    }
    function validaAnulacion() {

        if ('@Model.Anulada' === 'True') {
            $('input').attr('readonly', 'readonly');
            $('textarea').attr('disabled', 'true');
            $('select').attr('disabled', 'true');
            $('.btnAccion').attr('disabled', 'true');   
        }


    }

    function cargarJustificacion(mensaje) {
        setMensajeFromOut(mensaje);
    }

    function deshabilitaComentarioFromOut() {
        deshabilitaComentarios();
    }


    function getCuentaCosto() {

        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetCuentaCosto", "AjusteInventario")',
            success: function (data) {
                cuentaCostoArray = data;
                for (var i = 0; i < data.length; i++) {
                    var o = new Option(data[i].codigo + ' - ' + data[i].nombre , data[i].id);
                    $("#cuentaCosto").append(o);
                }
            },
            error: function (err, scnd) {
                cargarAlert('@SharedLocalizer["errorGeneral"]');
                console.log(err.statusText);
            }
        });
    }
    function getCuentaContable() {

        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetCuentaContable", "AjusteInventario")',
            success: function (data) {
                cuentaContableArray = data;
                for (var i = 0; i < data.length; i++) {
                    var o = new Option(data[i].cuentaContable + ' - ' + data[i].descripcion, data[i].id);
                    $("#cuentaContable").append(o);
                }

            },
            error: function (err, scnd) {
                cargarAlert('@SharedLocalizer["errorGeneral"]');
                console.log(err.statusText);
            }
          });
    }


    function getCContInfo(id) {
        for (var i = 0; i < cuentaContableArray.length; i++) {
            if (cuentaContableArray[i].id === id) {
                return cuentaContableArray[i];
            }
        }
    }

    function getCCostInfo(id) {
        for (var i = 0; i < cuentaCostoArray.length; i++) {
            if (cuentaCostoArray[i].id === id) {
                return cuentaCostoArray[i];
            }
        }
    }

    function encode_utf8(s) {
        return unescape(encodeURIComponent(s));
    }

    function decode_utf8(s) {
        return decodeURIComponent(escape(s));
    }

</script>


<script src="~/lib/vendors/jsPDF/AM.js"></script>
