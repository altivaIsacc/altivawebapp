@model AltivaWebApp.ViewModels.AjusteViewModel
@inject IStringLocalizer<SharedResources> SharedLocalizer

@inject IStringLocalizer<SharedResources> Lb
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{

    if (Model.Id != 0)
    {
        ViewData["Title"] = SharedLocalizer["editarAjuste"];
    }
    else
    {
        ViewData["Title"] = SharedLocalizer["nuevoAjuste"];
    }


    var usuario = ViewData["usuario"] as TbSeUsuario;

    var estado = "";
    var estado2 = "";

    if (Model.Anulada)
    {
        estado = "disabled";
    }

    if (ViewBag.tieneToma)
    {
        estado2 = "disabled";
    }
}


@if (Model.Id != 0)
{
    <div class="row">
        <div class="col-md-3"><h3>@SharedLocalizer["editarAjuste"]</h3></div>
        <div class="col-md-offset-8 col-md-1"><button style="font-size:2rem; padding-top:1rem" onclick="crearPdf()" class="btn btn-link"><i class="fas fa-file-pdf"></i>PDF</button></div>
    </div>

}
else
{
    <h3>@SharedLocalizer["nuevoAjuste"]</h3>
}

<hr />

<div class="row">
    @if (Model.Id != 0 && !Model.Anulada)
    {
        <div class="col-md-12 text-right"><button @estado2 class="btn btn-danger btn-sm" onclick="anularAjuste()">@SharedLocalizer["Anular"]</button></div>
    }
    else if (Model.Id != 0)
    {
        <div class="col-md-12 text-left"><h4 class="text-danger">@SharedLocalizer["AjusteAnulado"]</h4></div>
    }
    @if (ViewBag.tieneToma)
    {
        <div class="col-md-12 text-left"><h5 class="text-danger">@SharedLocalizer["DocumentoConToma"]</h5></div>
    }
</div>

<div class="row well">

    <div class="row">

        <form class="frmAjuste">
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.Anulada)
            @Html.HiddenFor(x => x.IdUsuario)
            @Html.HiddenFor(x => x.FechaCreacion)

            <div class="form-group col-md-3 col-sm-6 col-xs-12">

                <fieldset @estado2>
                    <div class="form-group">
                        <label for="fecha">@SharedLocalizer["Fecha"]:</label>
                        <div class='input-group date' id='fechaPicker'>
                            <input @estado2 type='text' class="form-control" id="fecha" />
                            <span class="input-group-addon">
                                <span class="fas fa-calendar"></span>
                            </span>
                        </div>
                    </div>
                </fieldset>
            </div>

            <div class="form-group col-md-3 col-sm-6 col-xs-12">
                <label asp-for="IdBodega" class="control-label">@SharedLocalizer["Bodega"]:</label>
                <select class="form-control" asp-for="IdBodega" id="bodegas">
                    @*<option value="0">@SharedLocalizer["Seleccione"]</option>*@
                </select>
            </div>
            <div class="form-group col-md-6 col-sm-6 col-xs-12">
                <label asp-for="Descripcion" class="control-label">@SharedLocalizer["Descripción"]:</label>
                <textarea data-limit-rows="true" asp-for="Descripcion" id="descripcionAjuste" rows="6" maxlength="500" class="form-control"></textarea>
                <span hidden class="text-danger" id="descripcionAjusteValid">@SharedLocalizer["descripcionValid"]</span>
            </div>

            <div hidden class="form-group col-md-3 col-sm-6 col-xs-12">
                <label class="control-label">@SharedLocalizer["Usuario"]:</label>
                <input type="text" readonly class="form-control" value="@usuario.Nombre" />
            </div>

        </form>
    </div>
    <br />

    <div class="row">
        <h4 class="col-md-12">@SharedLocalizer["LineasAjuste"]</h4>
    </div>

    <div class="row">

        <div class="form-group col-md-3 col-sm-3 col-xs-12">
            <label id="lblItem" class="control-label">@Lb["Item"]: <span style="font-size:1.1rem" class="text-info"><a id="lblInfoItem"></a></span></label>
            <input @estado2 id="items" onkeyup="pasarSigCampo(event,'movimiento')" class="form-control autocomplete" autofocus type="text" />
            @*<select id="items" onkeyup="pasarSigCampo(event,'movimiento')" class="form-control autocomplete" autocomplete="off" autofocus type="text">

            </select>*@
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-6">
            <label class="control-label">@Lb["Movimiento"]:</label>
            <select @estado2 class="form-control" id="movimiento" onchange="pasarSigCampo(event,'cantidad')">
                <option value="true">@SharedLocalizer["Entrada"]</option>
                <option value="false">@SharedLocalizer["Salida"]</option>
            </select>
        </div>

        <div class="form-group col-md-1 col-sm-1 col-xs-6">
            <label class="control-label">@Lb["Cantidad"]:</label>
            <input @estado2 id="cantidad" onkeyup="pasarSigCampo(event,'costoPromedio'), calcularTotalMovientoLinea()" class="form-control numerico" value="1" type="text" />


        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-12">
            <label class="control-label">@Lb["CostoPromedio"]:</label>
            <input @estado2 id="costoPromedio" onkeyup="pasarSigCampo(event,'cuentaContable'), calcularTotalMovientoLinea()" class="form-control  moneda" type="text" />

        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-12">
            <label class="control-label">@Lb["cuentaContable"]:</label>
            <select @estado2 class="form-control selectItem" id="cuentaContable"></select>
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-12">
            <label class="control-label">@Lb["CuentaCosto"]:</label>
            <select @estado2 class="form-control selectItem" id="cuentaCosto"></select>
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-10">
            <label class="control-label">@Lb["Total"]:</label>
            <input type="text" class="form-control moneda" onkeyup="pasarSigCampo(event,'submitFrmAI')" readonly id="total" />
        </div>

        <div class="form-group col-md-1 col-sm-1 col-xs-2" style="padding-top: 2.3rem;">
            <button onkeyup="pasarSigCampo(event,'items')" onclick="prepararLinea()" id="submitFrmAI" class="btn btn-success"><span><i class="fas fa-save"></i></span></button>
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-12" style="padding-top: 2.5rem;">
            <span style="padding-top: 2.3rem; font-size: 1.5rem">@Lb["Existencia"]: </span><span class="text-info" id="lblExistencia"></span>
        </div>

        <div class="form-group col-md-12 col-sm-12 col-xs-12">
            <p hidden id="cantidadValid" class="text-danger">@Lb["cantidadValid"].</p>
            <p hidden id="costoValid" class="text-danger">@Lb["costoPromedioValidacion"].</p>
            <p hidden id="cantidadExistenciaNuevaValid" class="text-danger">@Lb["cantidaMayorQueExistencias"].</p>
        </div>

    </div>

    <div class="row">
        <div class="table-responsive col-md-12 col-sm-12 col-xs-12">
            <span hidden id="sinDetalleValid" class="text-danger">@SharedLocalizer["docSinDetalle"].</span>
            <table class="table table-striped table-bordered" id="tblAjusteInventario" style="min-width:1200px">
                <thead>
                    <tr>
                        <th style="width:22%;">
                            <span>@SharedLocalizer["Item"]</span>
                        </th>
                        <th style="width:12%;">
                            <span>@SharedLocalizer["Movimiento"]</span>
                        </th>
                        <th style="width:8%;">
                            <span>@SharedLocalizer["Cantidad"]</span>
                        </th>
                        <th style="width:8%;">
                            <span>@SharedLocalizer["CostoPromedio"]</span>
                        </th>
                        <th style="width:8%;">
                            <span>@SharedLocalizer["Total"]</span>
                        </th>
                        <th style="width:18%;">
                            <span>@SharedLocalizer["cuentaContable"]</span>
                        </th>
                        <th style="width:18%;">
                            <span>@SharedLocalizer["CuentaCosto"]</span>
                        </th>
                        <th style="width:6%;">
                            <span>@SharedLocalizer["accion"]</span>
                        </th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>


    <div class="row">
        <form class="col-md-3 col-md-offset-9 frmAjuste2">
            <div class="form-group col-xs-12">
                <label asp-for="TotalEntrada" class="control-label">@SharedLocalizer["Entrada"]</label>
                <input readonly id="entradas" class="form-control currency" type="text" />
            </div>
            <div class="form-group col-xs-12">
                <label asp-for="TotalSalida" class="control-label">@SharedLocalizer["Salida"]</label>
                <input readonly id="salidas" class="form-control currency" type="text" />
            </div>
            <div class="form-group col-xs-12">
                <label asp-for="SaldoAjuste" class="control-label">@SharedLocalizer["Saldo"]</label>
                <input readonly id="saldo" class="form-control currency" type="text" />
            </div>
        </form>
    </div>

</div>


<div class="modal fade" id="lineaModal" tabindex="-1" role="dialog" aria-labelledby="lineaModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header row">
                <div class="col-md-10 col-sm-10 col-xs-10" style="text-align:left">
                    <h4 class="modal-title" id="lineaModalLabel">@Lb["Editar"] @Lb["Línea"]</h4>
                </div>
                <div class="col-md-2 col-sm-2 col-xs-2" style="text-align:right">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
            <div class="modal-body row">

                <div hidden class="form-group col-md-2 col-sm-2 col-xs-12">
                    <input readonly id="idLinea" class="form-control" type="number" />
                </div>

                <form>

                    <div class="form-group col-md-6 col-sm-6 col-xs-12">
                        <label class="control-label">@Lb["Cantidad"]:</label>
                        <input @estado id="cantidadEditar" class="form-control numerico" value="1" type="text" />
                        <span hidden id="cantidadEditarValid" class="text-danger">@Lb["cantidadValid"].</span>
                        <span hidden id="cantidadExistenciaValid" class="text-danger">@Lb["cantidaMayorQueExistencias"].</span>
                    </div>
                    <div class="form-group col-md-6 col-sm-6 col-xs-12">
                        <label class="control-label">@Lb["Costo"]:</label>
                        <input @estado id="costoEditar" class="form-control moneda" type="text" />
                        <span hidden id="costoEditarValid" class="text-danger">@Lb["costoPromedioValidacion"].</span>
                    </div>

                    <div class="form-group col-md-12 col-sm-12 col-xs-12"></div>

                    <div class="form-group col-md-6 col-sm-6 col-xs-12">
                        <label class="control-label">@Lb["cuentaContable"]:</label>
                        <select @estado class="form-control selectItem" id="cuentaContableEditar"></select>
                    </div>

                    <div class="form-group col-md-6 col-sm-6 col-xs-12">
                        <label class="control-label">@Lb["CuentaCosto"]:</label>
                        <select @estado class="form-control selectItem" id="cuentaCostoEditar"></select>
                    </div>

                </form>
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <button @estado type="button" onclick="editarLinea()" class="btn btn-success">@Lb["Guardar"]</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
                </div>
            </div>

        </div>
    </div>
</div>





<div class="form-group row">
    <div class="col-md-12">
        <button @estado class="btn btn-success btnAccion" onclick="guardarCambios()">@SharedLocalizer["Guardar"] <i class="fas fa-save"></i></button>
        <a onclick="cancelar()" class="btn btn-default">@SharedLocalizer["Cancelar"]</a>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-md-12">
        <div id="comentarios">

        </div>
    </div>
</div>

<div hidden><input hidden id="formater" class="currency" type="text" /></div>

<script src="~/js/comentario.js"></script>
<script src="~/js/base64ImageCreator.js"></script>
<style>
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        /* display: none; <- Crashes Chrome on hover */
        -webkit-appearance: none;
        margin: 0; /* <-- Apparently some margin are still there even though it's hidden */
    }

    input[type=number] {
        -moz-appearance: textfield; /* Firefox */
    }
</style>



<script>

    var bodegas = [];
    var arrayItems = [];
    var arrayAjusteFromDB = [];
    var lineas = [];
    var lineasEliminadas = [];
    var lineasAgregadas = [];
    var lineasCrOrUp = [];


    var cuentaCostoArray = [];
    var cuentaContableArray = [];
    var monedas = [];

    var frmAjuste = $('.frmAjuste');
    var frmAjuste2 = $('.frmAjuste2');
    var $items = $('#items');
    var $movimiento = $('#movimiento');
    var $descripcionLinea = $('#descripcionLinea');
    var $cantidad = $('#cantidad');
    var $costoPromedio = $('#costoPromedio');
    var $total = $('#total');
    var $cuentaContable = $('#cuentaContable');
    var $cuentaCosto = $('#cuentaCosto');
    var $lblInfoItem = $('#lblInfoItem');
    var $lblExistencia = $('#lblExistencia');


    var entradas = 0;
    var salidas = 0;
    var saldo = 0;
    var $entradas = $('#entradas');
    var $salidas = $('#salidas');
    var $saldo = $('#saldo');
    var $fechaDocumento = $('#fecha');
    var arrayInventario = [];


    $(document).ready(function () {

        var date = new Date();

        if (@Model.Id != 0) {
            GetComentarios("Ajuste", @Model.Id);
            $('#bodegas').attr('disabled', true);
            date = new Date(formatearFecha());
        }

        if ('@ViewBag.tieneToma' === "True") {
            $('#descripcionAjuste').prop('disabled', "disabled");
        }

        $('.selectItem').select2({ width: null, language: localStorage.getItem("idioma") });

        getCuentaContable();
        getCuentaCosto();
        getMonedas();


        getBodegasInventario();

        validaAnulacion();

        $('#fechaPicker').datetimepicker({
            defaultDate: date,
            locale: localStorage.getItem("idioma")
        });


        $(".numerico").inputmask({
            'alias': 'decimal',
            rightAlign: false,
            min: 0
        });

        $(".moneda").inputmask('currency', {
            prefix: '',
            rightAlign: true,
            min: 0
        });

        $('textarea[data-limit-rows=true]')
            .on('keypress', function (event) {
                var textarea = $(this),
                    text = textarea.val(),
                    numberOfLines = (text.match(/\n/g) || []).length + 1,
                    maxRows = parseInt(textarea.attr('rows'));

                if (event.which === 13 && numberOfLines === maxRows) {
                    return false;
                }
            });

    });


    function formatearFecha() {

        return '@Model.FechaDocumento.Month' + "/" + '@Model.FechaDocumento.Day' + "/" + '@Model.FechaDocumento.Year' + " " + '@Model.FechaDocumento.TimeOfDay';

    }

    ////////////////////////////movimientos de linea

    $('#items').on('focusout', function (evt, item) {

        setTimeout(function () {
            if ($('#items').val().replace(/ /g, "") !== "")
                cargarInfoItem($('#items').val());
            else
                limpiarLinea();
        }, 100);

    });

    $movimiento.change(function () {

        if (this.value === "false") {
            $costoPromedio.prop('readonly', true);
            cargarInfoItem($items.val());
        }
        else
            $costoPromedio.prop('readonly', false);
    });

    function cargarInfoItem(cod) {


        var item = getItemPorCodigo(cod);


        if (item !== undefined) {



            var itemBodega = getItem(item.idInventario)[0];

            $costoPromedio.val(item.costoPromedioGeneral);
            $lblInfoItem.text(item.descripcion.substr(0, 32) + (item.descripcion.length > 25 ? '...' : '')).prop('href', '@Url.Action("EditarInventario", "Inventario", new { id = "__id__" })'.replace("__id__", item.idInventario));
            $lblExistencia.text(itemBodega.existenciaBodega + " " + item.idUnidadMedidaNavigation.abreviatura);
            calcularTotalMovientoLinea();
        }
        else
            cargarAlert('@Lb["itemInvalido"]');


    }

    function calcularTotalMovientoLinea() {

        var totalLinea = parseFloat($cantidad.val()) * parseFloat($costoPromedio.val().replace(/,/g, ""));

        $('#total').val(totalLinea);

    }

    function guardarLinea(item) {

        var model = {
            id: 0,
            idAjuste: @Model.Id,
            idInventario: item.idInventario,
            descripcion: "n/a",
            movimiento: $movimiento.val(),
            cantidad: parseFloat($cantidad.val()),
            costoPromedio: parseFloat($costoPromedio.val().replace(/,/g, "")),
            totalMovimiento: parseFloat($total.val().replace(/,/g, "")),
            idCuentaContable: $cuentaContable.val(),
            idCentroGastos: $cuentaCosto.val(),
            cuentaContable: $('#cuentaContable option:selected').text(),
            cuentaCosto: $('#cuentaCosto option:selected').text(),
            nombreItem: item.descripcion,
            codItem: item.codigo
        };


        lineasCrOrUp.push(model);
        lineas.push(model);
        recalcularExistencias(model);
        cargarTabla(lineas);

    }

    function prepararLinea() {

        var item = getItemPorCodigo($items.val());

        if (validarLinea(item)) {
            guardarLinea(item);
            limpiarLinea();
            $('#bodegas').prop('disabled', true);
            setTimeout(function () { $('#items').focus(); }, 1);
        }

    }

    function limpiarLinea() {
        $items.val("");
        $lblInfoItem.text("");
        $costoPromedio.val(0);
        $cantidad.val(1);
        $total.val(0);
        $lblExistencia.text("");
    }

    function cargarLineas(array) {

        var data = array.tbPrAjusteInventario;

        console.log(array);

        for (var i = 0; i < data.length; i++) {

            var item = data[i];


            var desCCont = getCContInfo(item.idCuentaContable);
            var desCCost = getCCostInfo(item.idCentroGastos);

            var model = {

                id: item.id,
                idAjuste: @Model.Id,
                idInventario: item.idInventario,
                descripcion: "n/a",
                movimiento: item.movimiento.toString(),
                cantidad: item.cantidad,
                costoPromedio: item.costoPromedio,
                totalMovimiento: item.totalMovimiento,
                idCuentaContable: item.idCuentaContable,
                idCentroGastos: item.idCentroGastos,
                cuentaContable: desCCont.cuentaContable + " - " + desCCont.descripcion,
                cuentaCosto: desCCost.codigo + " - " + desCCost.nombre,
                nombreItem: item.idInventarioNavigation.descripcion,
                codItem: item.idInventarioNavigation.codigo

            };

            lineas.push(model);

        }



        cargarTabla(lineas);

    }


    function modalEditarLinea(key) {

        $('#cantidadEditarValid').prop('hidden', true);
        $('#costoEditarValid').prop('hidden', true);
        $('#cantidadExistenciaValid').prop('hidden', true);

        var linea = lineas[key];


        if (linea.movimiento.toString() === "false")
            $('#costoEditar').prop('readonly', true);
        else
            $('#costoEditar').prop('readonly', false);

        $('#idLinea').val(key);
        $('#cantidadEditar').val(linea.cantidad);
        $('#costoEditar').val(linea.costoPromedio);
        $('#cuentaContableEditar').val(linea.idCuentaContable);
        $('#cuentaCostoEditar').val(linea.idCentroGastos);

        $('#lineaModal').modal('show');

    }

    function editarLinea() {



        var key = $('#idLinea').val();

        if (!validarLineaEditar(lineas[key])) {
            return;
        }

        lineas[key].cuentaContable = $('#cuentaContableEditar option:selected').text();
        lineas[key].cuentaCosto = $('#cuentaCostoEditar option:selected').text();
        lineas[key].cantidad = parseFloat($('#cantidadEditar').val());
        lineas[key].costoPromedio = parseFloat($('#costoEditar').val().replace(/,/g, ""));
        lineas[key].totalMovimiento = lineas[key].cantidad * lineas[key].costoPromedio;

        var flag = false;
        for (var i = 0; i < lineasCrOrUp.length; i++) {
            if (lineasCrOrUp[i].idInventario == lineas[key].idInventario) {
                lineasCrOrUp[i] = lineas[key];
                flag = true;
                break;
            }
        }

        if (!flag)
            lineasCrOrUp.push(lineas[key]);

        cargarTabla(lineas);

        $('#lineaModal').modal('hide');

    }




    function eliminarLinea(id, idLinea) {

        bootbox.confirm("@SharedLocalizer["confirmEliminarLinea"]", function (result) {

            if (result) {

                if (validarExistencia(id)) {
                    if (idLinea != 0)
                        lineasEliminadas.push(lineas[id].id);
                    else
                        lineasCrOrUp.splice($.inArray(lineas[id], lineasCrOrUp), 1);

                    //la linea hay que convertirla a salida para que se reste o al revez para que se sume
                    if (lineas[id].movimiento === "true")
                        lineas[id].movimiento = "false";
                    else
                        lineas[id].movimiento = "true";

                    recalcularExistencias(lineas[id]);

                    lineas.splice(id, 1);

                    cargarTabla(lineas);

                    if (lineas.length === 0)
                        $('#bodegas').prop("disabled", false);
                }


            }

        });


    }

    function validarLineaEditar(item) {

        var flag = true;

        if (parseFloat($('#cantidadEditar').val()) <= 0) {
            flag = false;
            $('#cantidadEditarValid').prop('hidden', false);
        }
        else
            $('#cantidadEditarValid').prop('hidden', true);

        if (parseFloat($('#costoEditar').val()) <= 0) {
            flag = false;
            $('#costoEditarValid').prop('hidden', false);
        }
        else
            $('#costoEditarValid').prop('hidden', true);


        if (item.movimiento.toString() === "false" && getItem(item.idInventario)[0].existenciaBodega < parseFloat($('#cantidadEditar').val())) {
            flag = false;
            $('#cantidadExistenciaValid').prop('hidden', false);
        }
        else
            $('#cantidadExistenciaValid').prop('hidden', true);


        return flag;

    }

    function validarLinea(item) {

        if ($('#items').val().replace(/ /g, "") === "")
            return false;

        var flag = true;
        if (item !== undefined) {

            if (existeItem(item.idInventario, $movimiento.val())) {
                cargarAlert('@Lb["duplicacionValid"]');
                return false;
            }
            if ($movimiento.val() === "false" && getItem(item.idInventario)[0].existenciaBodega < parseFloat($cantidad.val())) {
                flag = false;
                $('#cantidadExistenciaNuevaValid').prop('hidden', false);
            }
            else
                $('#cantidadExistenciaNuevaValid').prop('hidden', true);

            if (parseFloat($costoPromedio.val().replace(/,/g, "")) <= 0) {
                flag = false;
                $('#costoValid').prop('hidden', false);
            }
            else {
                $('#costoValid').prop('hidden', true);
            }
            if (parseFloat($cantidad.val().replace(/,/g, "")) <= 0) {
                flag = false;
                $('#cantidadValid').prop('hidden', false);
            }
            else {
                $('#cantidadValid').prop('hidden', true);
            }
        }
        else {
            cargarAlert('@Lb["itemInvalido"]');
        }


        return flag;

    }

    function validarExistencia(idlinea) {
        var salida = "";
        var linea = lineas[idlinea];
        if (linea.movimiento === "true") {
            for (var i = 0; i < lineas.length; i++) {
                if (lineas[i].idInventario === linea.idInventario && lineas[i].movimiento === "false")
                    salida = lineas[i];
            }
            if (salida === "")
                return true;
            else {
                var item = getItem(parseInt(linea.idInventario))[0];
                var existencia = item.existenciaBodega - parseInt(linea.cantidad);
                if (existencia >= parseInt(salida.cantidad))
                    return true;
                else {
                    cargarAlert("@SharedLocalizer["anulacionInvalida"]");
                    return false;
                }
            }
        }
        else
            return true;
    }

    function recalcularExistencias(linea) {
        var item = getItem(parseInt(linea.idInventario))[0];
        if (linea.movimiento === "true") {
            item.existenciaBodega += parseInt(linea.cantidad);
        }
        else if (linea.movimiento === "false") {
            item.existenciaBodega -= parseInt(linea.cantidad);
        }
    }

    ////////////////////////////fin mov de linea/////////////////////////


    ////////////////////////////calculos de ajuste//////////////////////
    function calcularTotales() {

        $entradas.val("");
        $salidas.val("");
        entradas = 0;
        salidas = 0;



        for (var i = 0; i < lineas.length; i++) {
            if (lineas[i].movimiento.toString() === "true")
                entradas += parseFloat(lineas[i].totalMovimiento);
            else
                salidas += parseFloat(lineas[i].totalMovimiento);
        }

        console.log(lineas);

        $entradas.val(entradas);
        $salidas.val(salidas);
        saldo = entradas - salidas;
        $saldo.val(saldo);
    }

    ////////////////////////////fin calculos de ajuste//////////////////////


    function guardarCambios() {

        if (validarCampos()) {
            guardarAjuste();
        }

    }

    function cargarItems(data) {


        arrayInventario = data;

        arrayItems = [];

        for (var i = 0; i < data.length; i++) {

            if (!data[i].idInventarioNavigation.inactiva) {
                arrayItems.push(data[i].idInventarioNavigation);
            }

        }

        var items = [];
        items = arrayItems;

        //$('#items').remove();
        //$('#lblItem').after('<input id="items" onkeyup="pasarSigCampo(event,movimiento)" class="form-control autocomplete" autofocus type="text" />');

        $('.autocomplete').unbind().removeData();

        $('.autocomplete').autoComplete({
            resolver: 'custom',
            formatResult: function (item) {

                return {
                    value: item.idInventario,
                    text:  item.codigo,
                    html: [
                        item.codigo + ' - ',
                        item.descripcion
                    ]
                };
            },
            events: {
                search: function (_keyword, callback) {
                    var keyword = _keyword.toUpperCase();
                    var filtrado = [];

                    if (keyword.replace(/ /g, "") === "") {
                        filtrado = [];
                    }
                    else {
                        for (var i = 0; i < items.length; i++) {

                            var keyArray = items[i].codigo.toUpperCase();
                            var keyArray2 = items[i].descripcion.toUpperCase();

                            if (keyArray.indexOf(keyword) > -1  )
                                filtrado.push(items[i]);
                            else
                                if (keyArray2.indexOf(keyword) > -1)
                                    filtrado.push(items[i]);
                        }

                    }



                    callback(filtrado);
                }
            },
            noResultsText: '@Lb["sinResultados"]',
            autoSelect: true,
            minLength: 2,

        });

    }


    function getItemPorCodigo(codigo) {
        for (var i = 0; i < arrayItems.length; i++) {
            if (codigo === arrayItems[i].codigo) {
                return arrayItems[i];
            }
        }
    }



    $("#bodegas").change(function () {

        for (var i = 0; i < bodegas.length; i++) {
            if (bodegas[i].id === parseInt($(this).val()))
                cargarItems(bodegas[i].tbPrInventarioBodega);
        }

    });


    function cargarTabla(data) {
        $("#tblAjusteInventario > tbody").remove();
        $('#tblAjusteInventario').append('<tbody></tbody>');

        contadorFila = 0;


        for (var i = 0; i < data.length; i++) {

            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '"><td >' +  data[i].nombreItem + '</td>'
                + '<td >' + getMovimiento(data[i].movimiento) + '</td>'
                + '<td >' + data[i].cantidad + '</td>'
                + '<td ><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].costoPromedio + '"/></td>'
                + '<td ><input style="border:0; background-color : #F7F7F7" class="currency" value="' + data[i].totalMovimiento + '"/></td>'
                + '<td ><a class"btn btn-link" href="#">' + data[i].cuentaContable +'</a></td>'
                //+ '<td style="padding-top:2rem;"><a class"btn btn-link" href="#">' + data[i].cuentaContable.codigo + ' - ' + data[i].cuentaContable.descripcion + '</a></td>'
                //+ '<td style="padding-top:2rem;"><a class"btn btn-link" href="#">' + data[i].cuentaCosto.codigo + ' - ' + data[i].cuentaCosto.descripcion + '</a></td>'
                + '<td><a class"btn btn-link" href="#">' + data[i].cuentaCosto +'</a></td>'
                + '<td><a  href="#" style="font-size:1.8rem;" onclick="modalEditarLinea(' + contadorFila + ', ' + data[i].id + ')" ><i class="fas fa-edit"></i></a>&nbsp;&nbsp; <a href="#" style="font-size:1.8rem;" value="' + contadorFila + '" onclick="eliminarLinea(' + contadorFila + ', ' + data[i].id + ')" ><i class="fas fa-trash"></i></a></td></tr>';

            $('#tblAjusteInventario > tbody').append(body);

            contadorFila++;
        }

        $(".currency").inputmask('currency', {
            prefix: monedas[0].simbolo + ' ',
            rightAlign: true
        });

        calcularTotales();
    }



    function cargarBodegas(data) {

        var flag = true;

        for (var i = 0; i < data.length; i++) {
            var o = new Option(data[i].nombre, data[i].id);
            if (data[i].id === @Model.IdBodega) {
                $(o).attr('selected', true);
                cargarItems(data[i].tbPrInventarioBodega);
                flag = false;
            }

            $("#bodegas").append(o);
        }

        if (flag)
            cargarItems(data[0].tbPrInventarioBodega);

        getAjusteInventario();

    }


    function getItem(id) {

        var it = [];
        for (var i = 0; i < arrayInventario.length; i++) {
            if (arrayInventario[i].idInventarioNavigation.idInventario === parseInt(id))
                it.push(arrayInventario[i]);
        }

        return it;
    }

    function existeItem(id, mov) {

        var flag = false;
        for (var i = 0; i < lineas.length; i++) {

            if (parseInt(lineas[i].idInventario) === parseInt(id) && lineas[i].movimiento.toString() === mov)
                flag = true;
        }
        return flag;
    }

    function getMovimiento(key) {
        if (key === "true")
            return "@SharedLocalizer["Entrada"]";
        else
            return "@SharedLocalizer["Salida"]";
    }




    /////////////////////////////////////////////////////////////////ajax///////////////////////////////////////////////////////////////////////

    function getAjusteInventario() {
        var ajuste = @Model.Id;
        if (ajuste != 0)
        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetAjusteinventario", "AjusteInventario")',
            data: {id: @Model.Id},
            success: function (data) {
                arrayAjusteFromDB = JSON.parse(JSON.stringify(data.tbPrAjusteInventario));
                cargarLineas(data);
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
        });
    }

    function guardarAjuste() {

        console.log(lineasCrOrUp);

        if (lineasCrOrUp.length > 0) {
            for (var i = 0; i < lineasCrOrUp.length; i++) {
                lineasCrOrUp[i].totalMovimiento = lineasCrOrUp[i].totalMovimiento.toString().replace(/,/g, "").replace(".", ",");
                lineasCrOrUp[i].costoPromedio = lineasCrOrUp[i].costoPromedio.toString().replace(/,/g, "").replace(".", ",");
            }
        }


        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("CrearEditarAjuste", "AjusteInventario")',
            data: { viewModel: crearModelo(), detalle: lineasCrOrUp, eliminadas: lineasEliminadas },
            success: function (data) {
                window.location.href = "@Url.Action("ListarAjustes","AjusteInventario")";
            },
            error: function (err, scnd) {
                var msj = '@SharedLocalizer["errorGeneral"]';
                cargarAlert(msj);
                console.log(err.statusText);
            }
        });

    }


    function guardarAjusteInventario() {

        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("CrearAjusteInventario", "AjusteInventario", new { idBodega = Model.IdBodega })',
            data: { viewModel: lineasAgregadas},
            success: function (data) {
                //console.log(data);

               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }
    function eliminarAjusteInventario() {
        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("EliminarAjusteInventario", "AjusteInventario", new { idAjuste = Model.Id })',
            data: { id: lineasEliminadas },
            success: function (data) {
               // console.log(data);

               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function getBodegasInventario() {

          $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetBodegaInventario", "AjusteInventario")',
              success: function (data) {
                  bodegas = data;
                  cargarBodegas(data);
               },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }

    function getMonedas() {
         $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
              url: '@Url.Action("GetMonedas", "Monedas")',
             success: function (data) {

                 monedas = data;

              },
              error: function (err, scnd) {
                  cargarAlert('@SharedLocalizer["errorGeneral"]');
                  console.log(err.statusText);
              }
          });
    }




    function crearModelo() {


        var ajusteModel = {
            id: @Model.Id,
            anulada: '@Model.Anulada',
            totalEntrada: entradas.toString().replace(".", ","),
            totalSalida: salidas.toString().replace(".", ","),
            saldoAjuste: saldo.toString().replace(".", ","),
            idUsuario: @Model.IdUsuario,
            idBodega: $('#bodegas').val(),
            descripcion: $('#descripcionAjuste').val(),
            fechaDocumento: $('#fecha').val(),
            fechaCreacion: $('#FechaCreacion').val(),
            ajusteInventario: null
        };

        return ajusteModel;

    }

    function pasarSigCampo(e, id) {


        (e.keyCode) ? k = e.keyCode : k = e.which;

        if (k == 13) {
            if (id == "submitFrmAI") {


                prepararLinea();


            }
            else {
                document.getElementById(id).focus();

            }

            $('#' + id).select();
        }
    }


    function crearPdf() {

        generate_cutomPDF(crearModeloPDF());

    }

    function crearModeloPDF() {

        var empresaModel = JSON.parse(localStorage.getItem("empresaInfo"));

        var modelo = {
            empresa: {
                nombre: localStorage.getItem("empresa"),
                telefono: empresaModel.tel,
                correo: empresaModel.correo,
                cedJuridica: empresaModel.ced,
                logo: getImgFromUrl(localStorage.getItem("fotoEmpresa")),
                nombreTitulo: "@SharedLocalizer["Nombre"]:",
                telTitulo: "@SharedLocalizer["Tel"]:",
                correoTitulo: "@SharedLocalizer["Correo"]:",
                cedTitulo: getTittulos().cedJuridica
            },
            entrada: formatTotales().entradas,//$entradas.val().replace("₡", "CRC.\ \ "),
            salida: formatTotales().salidas,
            saldo: formatTotales().saldo,
            nombreDoc: '@SharedLocalizer["AjusteManual"] ' + '#@Model.Id',
            nombreDescarga: '@SharedLocalizer["ajustemanual"]_' + @Model.Id + '.pdf',
            columnas: {
                item: "Item",
                movimiento: "@SharedLocalizer["Movimiento"]",
                cantidad: "@SharedLocalizer["Cantidad"]",
                costo: "@SharedLocalizer["Costo"]",
                total: "@SharedLocalizer["Total"]",
                cuentaContable: "@SharedLocalizer["cuentaContable"]",
                cuentaCosto: "@SharedLocalizer["CuentaCosto"]",
                nombreCuentaCosto: "@SharedLocalizer["Nombre"]",
                nombreCuentaContable: "@SharedLocalizer["Nombre"]"
            },
            filas: crearFilasPdf(),
            resumen: {
                entrada: "@SharedLocalizer["Entrada"]",
                salida: "@SharedLocalizer["Salida"]",
                saldo: "@SharedLocalizer["Saldo"]",
                autorizado: "@SharedLocalizer["Autorizado por"]:______________________"
            },
            bodega: $('#bodegas option:selected').text(),
            fecha: $('#fecha').val(),
            descripcion: getDescripcion($('#descripcionAjuste').val()),
            bodegaTitulo: "@SharedLocalizer["Bodega"]:",
            descripcionTitulo: getTittulos().desc,
            fechaTitulo: "@SharedLocalizer["Fecha"]:",
            estado: getEstado()

        };

        return modelo;

    }


    function formatTotales() {
        var tam = 0;
        var space = 0;
        var s = "";
        var e = "";
        var saldo = "";

        if ($salidas.val().length > $entradas.val().length && $salidas.val().length > $saldo.val().length)
            tam = $salidas.val().length;
        else if ($entradas.val().length > $salidas.val().length && $entradas.val().length > $saldo.val().length)
            tam = $entradas.val().length;
        else if ($saldo.val().length > $salidas.val().length && $saldo.val().length > $entradas.val().length)
                tam = $saldo.val().length;

        else
            tam = $saldo.val().length;

        tam = tam - 1;
        if ($saldo.val().indexOf("-") > -1)
            tam = tam + 1;

        for (var i = $saldo.val().length; i < tam; i++) {
            saldo += "\ \ ";
        }
        for (var i = $salidas.val().length; i < tam; i++) {
            s += "\ \ ";
        }
        for (var i = $entradas.val().length; i < tam; i++) {
            e += "\ \ ";
        }


        return {
            salidas: s + $salidas.val(),
            entradas: e + $entradas.val(),
            saldo: saldo + $saldo.val()
        }

    }
    function getEstado() {
        if ('@Model.Anulada' === "True")
            return "@SharedLocalizer["AjusteAnulado"]";
        else
            return "";
    }

    function getTittulos() {
        var idioma = localStorage.getItem("idioma");
        if (idioma === "es")
            return {
                desc: "Descripción:",
                cedJuridica: "Cédula Jurídica:"
            };
        else
            return {
                desc: "Description:",
                cedJuridica: "Legal Number:"
            };
    }




    function getDescripcion(data) {
        var desc = data.match(/.{1,125}/g).join("\n");
        return desc;

    }

    function crearFilasPdf() {

        var row = [];
        for (var i = 0; i < lineas.length; i++) {
            var model = {
                item: lineas[i].nombreItem,
                movimiento: getMovimiento(lineas[i].movimiento),
                cantidad: lineas[i].cantidad,
                costo: formatearMoneda(lineas[i].costoPromedio),
                total: formatearMoneda(lineas[i].totalMovimiento),
                cuentaContable: lineas[i].cuentaContable.nombre,
                nombreCuentaContable: getCContInfo(lineas[i].idCuentaContable).descripcion,
                cuentaCosto: lineas[i].cuentaCosto,
                nombreCuentaCosto: getCCostInfo(lineas[i].idCentroGastos).nombre
            };

            row.push(model);
        }
        return row;
    }

    function formatearMoneda(val) {
        $('#formater').val(val);
        return $('#formater').val();
    }

    function validarCampos() {
        var flag = true;

        if ($('#descripcionAjuste').val().replace(/ /g, "") === "") {
            $('#descripcionAjusteValid').attr('hidden', false);
            flag = false;
        } else
            $('#descripcionAjusteValid').attr('hidden', true);

        if (lineas.length <= 0) {
            $('#sinDetalleValid').prop('hidden', false);
            flag = false;
        } else
            $('#sinDetalleValid').prop('hidden', true);

        return flag;
    }



    function cancelar() {
        var msj = "@SharedLocalizer["confirmCancelar"]";

        bootbox.confirm(msj, function (result) {

            if (result)
                window.location.href = "@Url.Action("ListarAjustes","AjusteInventario")";

        });
    }

    function anularAjuste() {

        bootbox.prompt({
            title: "@SharedLocalizer["confirmAnularAjuste"]",
            message: '<p>@SharedLocalizer["Justificación"]</p>',
            inputType: 'textarea',
            callback: function (result) {

                if (result != null) {
                    if (result.replace(/ /g, "") != "") {
                    $.ajax({
                        type: "get",
                        headers: {
                            "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                        },
                        dataType: "json",
                        url: '@Url.Action("AnularAjuste", "AjusteInventario", new { id = Model.Id })',
                        success: function (data) {
                            if (data.success) {
                                cargarJustificacion(result);
                                cargarAlert('@SharedLocalizer["AjusteAnulado"]');
                                window.location.href = "@Url.Action("ListarAjustes","AjusteInventario")";
                            }
                            else
                                cargarAlert('@SharedLocalizer["anulacionInvalida"]');


                        },
                        error: function (err, scnd) {
                            cargarAlert('@SharedLocalizer["errorGeneral"]');
                            console.log(err.statusText);
                        }
                    });

                }
                else
                    cargarAlert('@SharedLocalizer["JustificacionInvalida"]');
                }


            }
        });

    }
    function validaAnulacion() {

        if ('@Model.Anulada' === 'True') {
            $('input').attr('readonly', 'readonly');
            $('textarea').attr('disabled', 'true');
            $('select').attr('disabled', 'true');
            $('.btnAccion').attr('disabled', 'true');
        }


    }

    function cargarJustificacion(mensaje) {
        setMensajeFromOut(mensaje);
    }

    function deshabilitaComentarioFromOut() {
        deshabilitaComentarios();
    }


    function getCuentaCosto() {

        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetCuentaCosto", "AjusteInventario")',
            success: function (data) {
                cuentaCostoArray = data;
                for (var i = 0; i < data.length; i++) {
                    var o = new Option(data[i].codigo + ' - ' + data[i].nombre, data[i].id);
                    var o2 = new Option(data[i].codigo + ' - ' + data[i].nombre, data[i].id);
                    $("#cuentaCosto").append(o);
                    $("#cuentaCostoEditar").append(o2);
                }
            },
            error: function (err, scnd) {
                cargarAlert('@SharedLocalizer["errorGeneral"]');
                console.log(err.statusText);
            }
        });
    }
    function getCuentaContable() {

        $.ajax({
              type: "get",
              headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("GetCuentaContable", "AjusteInventario")',
            success: function (data) {
                cuentaContableArray = data;
                for (var i = 0; i < data.length; i++) {
                    var o = new Option(data[i].cuentaContable + ' - ' + data[i].descripcion, data[i].id);
                    var o2 = new Option(data[i].cuentaContable + ' - ' + data[i].descripcion, data[i].id);

                    $("#cuentaContable").append(o);
                    $("#cuentaContableEditar").append(o2);
                }

            },
            error: function (err, scnd) {
                cargarAlert('@SharedLocalizer["errorGeneral"]');
                console.log(err.statusText);
            }
          });
    }


    function getCContInfo(id) {
        for (var i = 0; i < cuentaContableArray.length; i++) {
            if (cuentaContableArray[i].id === id) {
                return cuentaContableArray[i];
            }
        }
    }

    function getCCostInfo(id) {
        for (var i = 0; i < cuentaCostoArray.length; i++) {
            if (cuentaCostoArray[i].id === id) {
                return cuentaCostoArray[i];
            }
        }
    }

    function encode_utf8(s) {
        return unescape(encodeURIComponent(s));
    }

    function decode_utf8(s) {
        return decodeURIComponent(escape(s));
    }

</script>


<script src="~/lib/vendors/jsPDF/AM.js"></script>
