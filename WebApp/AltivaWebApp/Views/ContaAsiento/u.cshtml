@model AltivaWebApp.DomainsConta.Asiento
@inject IStringLocalizer<SharedResources> Lb
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    var estado = "";
    var estado2 = "";
    var usuario = ViewData["usuario"] as TbSeUsuario;
    if (Model.Estado == 3)
    {
        estado = "disabled";
    }

    var numDocumento = Model.IdDocumento;
    ViewData["Title"] = Lb["Asiento"];
}
    <div id="contenido">
      
        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
                @if (Model.IdAsientoContable != 0)
                {
                    <div class="col-md-3"><h3>@Lb["editarAsiento"]</h3></div>
                    <div class="col-md-offset-3 col-md-3"><button style="font-size:2rem; padding-top:1rem" onclick="crearPdf()" class="btn btn-link"><i class="fas fa-file-pdf"></i>PDF</button></div>
                }
                else
                {
                    <div class="col-md-3"><h3>@Lb["nuevoAsiento"]</h3></div>
                } 
            </div>
        </div>


        <div hidden><input hidden id="formater" class="currency" type="text" /></div>
        <div class="row well">
            <div class="container">

                @Html.HiddenFor(x => x.IdAsientoContable)
                @Html.HiddenFor(x => x.Estado)
                @Html.HiddenFor(x => x.FechaCreacion)
                @Html.HiddenFor(x => x.IdUsuarioCreador)
                @Html.HiddenFor(x => x.Frecuente)
                <div class="form-group col-md-3 col-sm-12 col-xs-12">
                    <div class="row">
                        <label for="fecha">@Lb["Fecha"]:</label>
                        <input id="dtFechaAsiento" type="date" asp-for="Fecha" onchange="CambioFecha()" class="form-control date" name="fecha" min="@ViewBag.FechaDesdePeriodo.ToString("yyyy-MM-dd")" max="@ViewBag.FechaHastaPeriodo.ToString("yyyy-MM-dd")"  value="@DateTime.Now.ToString("yyyy-MM-dd")">
                        <span hidden id="fechaCorregir" class="text-danger">@Lb["fechaCorregir"]</span>
                    </div>
                    <div class="row">
                        <label asp-for="IdPeriodoTrabajo" class="control-label">@Lb["Periodo"]:</label>
                        <input readonly id="LtPeriodos" list="LtPeriodoTrabajo" class="form-control" autocomplete=on onchange="cambioPeriodo()">
                        <datalist id="LtPeriodoTrabajo">
                            @{
                                foreach (var item in ViewBag.Periodos)
                                {
                                    <option value="@item.Nombre">@item.FechaInicio.ToString("yyyy/MM/dd") | @item.FechaFinal.ToString("yyyy/MM/dd") </option>
                                }
                            }
                        </datalist>
                        <span hidden id="periodoCorregir" class="text-danger">@Lb["periodoCorregir"]</span>
                    </div>
                    <div class="row">
                        <label asp-for="Codigo" class="control-label">@Lb["Asiento"]:</label>
                        <input readonly="readonly" asp-for="Codigo" id="CodigoAsiento" class="form-control" />
                        <span hidden id="codigoCorregir" class="text-danger">@Lb["asientoCorregir"]</span>
                    </div>

                </div>
                <div class="form-group col-md-3 col-sm-6 col-xs-12" style="margin-left:1rem">
                    <div class="row">
                        <label asp-for="Estado" class="control-label">@Lb["Estado"]:</label>
                        <input id="LtEstados" list="LtEstado" class="form-control" autocomplete=on>
                        <datalist id="LtEstado">
                            <option value="@Lb["ACTIVO"]">@Lb["ACTIVO"]</option>
                            <option value="@Lb["BLOQUEADO"]">@Lb["BLOQUEADO"]</option>
                            <option value="@Lb["ANULADO"]">@Lb["ANULADO"]</option>

                        </datalist>
                        <span hidden id="estadoCorregir" class="text-danger">@Lb["estadoCorregir"]</span>
                    </div>
                    <div class="row">
                        <label asp-for="CodigoMoneda" class="control-label">@Lb["Moneda"]:</label>
                        <input id="LtMonedas" list="LtCodigoMoneda" class="form-control" autocomplete=on onchange="cambioMoneda()">
                        <datalist id="LtCodigoMoneda">
                            @{
                                foreach (var item in ViewBag.Monedas)
                                {
                                    <option>@item.Simbolo</option>
                                }
                            }
                        </datalist>
                        <span hidden id="monedaCorregir" class="text-danger">@Lb["monedaCorregir"]</span>
                    </div>
                    <div class="row">
                        <label asp-for="IdTipoDocumento" class="control-label">@Lb["Tipo"]:</label>
                        <input id="LtTipos" list="LtTipoDoc" class="form-control" autocomplete=on onchange="cambioTipoDoc()">
                        <datalist id="LtTipoDoc">
                            @{
                                foreach (var item in ViewBag.Tipos)
                                {
                                    <option>@Lb[item.Descripcion]</option>
                                }
                            }

                        </datalist>
                        <span hidden id="tipoDocCorregir" class="text-danger">@Lb["tipoDocCorregir"]</span>
                    </div>
                </div>
                <div class="form-group col-md-4 col-sm-12 col-xs-12">
                    <div class="form-group shadow-textarea">
                        <label for="exampleFormControlTextarea2">@Lb["Descripción"]</label>
                        <textarea asp-for="Descripcion" maxlength="400" class="form-control rounded-0" id="descripcionAsiento" rows="8"></textarea>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-4 col-sm-6 col-xs-6">
                    <label class="control-label">@Lb["Cuenta"]:</label>
                    <input list="ltCuentas" class="form-control" id="catalogoCuentas" onkeydown="pasarSigCampo(event,'tipoCambioDolar')">
                    <datalist id="ltCuentas">
                        @{
                            foreach (var item in ViewBag.Catalogo)
                            {
                                <option value="@Lb[item.Descripcion]">@Lb[item.CuentaContable]</option>
                            }
                        }
                    </datalist>
                    <span hidden id="cuentaCorregir" class="text-danger">@Lb["cuentaCorregir"]</span>
                </div>
                <div class="form-group col-md-6 col-sm-6 col-xs-6">
                    <div class="form-group col-md-6 col-sm-6 col-xs-6">
                        <label id="lblItem" class="control-label">@Lb["TipoCambio"] $: <span style="font-size:1.1rem" class="text-info"><a id="lblInfoItem"></a></span></label>
                        <input class="form-control" id="tipoCambioDolar" autofocus onkeyup="pasarSigCampo(event,'tipoCambioEuro')" style="text-align:right" />
                        <span hidden id="tipoCambioDolarCorregir" class="text-danger">@Lb["tipoCambioDolarCorregir"]</span>
                    </div>
                    <div class="form-group col-md-6 col-sm-6 col-xs-6">
                        <label id="lblItem" class="control-label">@Lb["TipoCambio"] Eur: <span style="font-size:1.1rem" class="text-info"><a id="lblInfoItem"></a></span></label>
                        <input class="form-control" id="tipoCambioEuro" autofocus onkeyup="pasarSigCampo(event,'MontoBase')" style="text-align:right" />
                        <span hidden id="tipoCambioEuroCorregir" class="text-danger">@Lb["tipoCambioEuroCorregir"]</span>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-10 col-sm-12 col-xs-12">
                        <div class="form-group col-md-4 col-sm-4 col-xs-12">
                            <label class="control-label">@Lb["Monto"] CRC:</label>
                            <input type="number" class="form-control" id="MontoBase" onchange="fnMontoColon()" autofocus onkeyup="pasarSigCampo(event,'Monto2')" style="text-align:right" />
                            <span hidden id="montoBaseCorregir" class="text-danger">@Lb["montoBaseCorregir"]</span>
                        </div>
                        <div class="form-group col-md-4 col-sm-4 col-xs-12">
                            <label id="lblItem" class="control-label">@Lb["Monto"] $: <span style="font-size:1.1rem" class="text-info"><a id="lblInfoItem"></a></span></label>
                            <input type="number" class="form-control" id="Monto2" onchange="fnMontoDolar()" autofocus onkeyup="pasarSigCampo(event,'Monto3')" style="text-align:right" />
                            <span hidden id="montoDolarCorregir" class="text-danger">@Lb["montoDolarCorregir"]</span>
                        </div>
                        <div class="form-group col-md-4 col-sm-4 col-xs-12">
                            <label id="lblItem" class="control-label">@Lb["Monto"] EUR: <span style="font-size:1.1rem" class="text-info"><a id="lblInfoItem"></a></span></label>
                            <input type="number" class="form-control" id="Monto3" onchange="fnMontoEuro()" autofocus onkeyup="pasarSigCampo(event,'btnAgregarDebe')" style="text-align:right" />
                            <span hidden id="montoEuroCorregir" class="text-danger">@Lb["montoEuroCorregir"]</span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-4 col-sm-6 col-xs-6">
                        <button id="btnAgregarDebe" onclick="agregarLinea('Debe')" class="btn btn-success"><span>@Lb["Debe"] </span><span><i class="fas fa-save"></i></span></button>
                        <button id="btnAgregarHaber" onclick="agregarLinea('Haber')" class="btn btn-success"><span>@Lb["Haber"] </span><span><i class="fas fa-save"></i></span></button>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-bordered table-striped" id="tbAsientoDetalle" style="min-width:1250px">
                        <thead>
                            <tr>
                                <th style="width:10%"><span>@Lb["Cuenta"]</span></th>
                                <th style="width:18%"><span>@Lb["Nombre"]</span></th>
                                <th style="width:11%"><span>@Lb["Debe"] @ViewBag.SimboloBse</span></th>
                                <th style="width:11%"><span>@Lb["Haber"] @ViewBag.SimboloBse</span></th>
                                <th style="width:11%"><span>@Lb["Debe"] @ViewBag.SimboloDolar</span></th>
                                <th style="width:11%"><span>@Lb["Haber"] @ViewBag.SimboloDolar</span></th>
                                <th style="width:11%"><span>@Lb["Debe"] @ViewBag.SimboloEuro</span></th>
                                <th style="width:11%"><span>@Lb["Haber"] @ViewBag.SimboloEuro</span></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="lineaForm">
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="container">

                    <div class="row">
                        <div class="col-lg-4 col-md-12 col-xs-12">
                            <label class="control-label">@Lb["TotalDebe"] @ViewBag.SimboloBase:</label>
                            <input readonly id="totalDebeBase" class="form-control" style="text-align: right" />
                        </div>
                        <div class="col-lg-4 col-md-12 col-xs-12">
                            <label class="control-label">@Lb["TotalHaber"] @ViewBag.SimboloBase:</label>
                            <input readonly id="totalHaberBase" class="form-control" style="text-align: right" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4 col-md-12 col-xs-12">
                            <label class="control-label">@Lb["TotalDebe"] @ViewBag.SimboloDolar:</label>
                            <input readonly id="totalDebeDolar" class="form-control" style="text-align: right" />
                        </div>
                        <div class="col-lg-4 col-md-12 col-xs-12">
                            <label class="control-label">@Lb["TotalHaber"] @ViewBag.SimboloDolar:</label>
                            <input readonly id="totalHaberDolar" class="form-control" style="text-align: right" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4 col-md-12 col-xs-12">
                            <label class="control-label">@Lb["TotalDebe"] @ViewBag.SimboloEuro:</label>
                            <input readonly id="totalDebeEuro" class="form-control" style="text-align: right" />
                        </div>
                        <div class="col-lg-4 col-md-12 col-xs-12">
                            <label class="control-label">@Lb["TotalHaber"] @ViewBag.SimboloEuro:</label>
                            <input readonly id="totalHaberEuro" class="form-control" style="text-align: right" />
                        </div>
                    </div>
                </div>

            </div>
            <div class="row" style="margin-top:10px">
                <div class="col-md-12">
                    <div class="form-group col-md-3">
                        <button class="btn btn-success btnAccion" onclick="guardar()">@Lb["Guardar"] <i class="fas fa-save"></i></button>
                        <a onclick="cancelar()" class="btn btn-default">@Lb["Cancelar"]</a>
                        <span style="margin-top:4px" hidden id="totalCorregir" class="text-danger">@Lb["totalCorregir"]</span>
                        <span style="margin-top:4px" hidden id="lineasCorregir" class="text-danger">@Lb["lineasCorregir"]</span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <p>@Lb["Creación"]:@ViewBag.UsuarioCreador.Nombre | @Model.FechaCreacion<p>
                </div>

            </div>
            <div class="row">
                <div class="col-md-12">
                    <div id="comentarios">

                    </div>
                </div>
            </div>

        </div>
        <input readonly hidden id="monedaFormater" />
    </div>
<script src="~/js/comentario.js"></script>
<script src="~/js/base64ImageCreator.js"></script>
<script src="~/lib/vendors/jsPDF/CI.js"></script>
<script src="~/js/XMLtoJSON.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/x2js/1.2.0/xml2json.min.js"></script>
<script type="text/javascript">
        var periodos = [];
        var catalogo = [];
        var monedas = [];
        var tiposDoc = [];
        var tipoDoc;
        var monedaItem;
        var cuenta;
        var periodo;

        @foreach (var item in ViewBag.Periodos)
        {
        @:      periodo = {FechaInicio:'@item.FechaInicio.ToString("yyyy/MM/dd")',FechaFinal:'@item.FechaFinal.ToString("yyyy/MM/dd")',Nombre: '@item.Nombre',IdPeriodoTrabajo: '@item.IdPeriodoTrabajo'};
        @:      periodos.push(periodo);
        }
          @foreach (var item in ViewBag.Catalogo)
        {
        @:      cuenta = {IdCuentaContable:'@item.IdCuentaContable',Descripcion:'@item.Descripcion',CuentaContable: '@item.CuentaContable'};
        @:      catalogo.push(cuenta);
        }
         @foreach (var item in ViewBag.Monedas)
        {
        @:      monedaItem = {Codigo:'@item.Codigo',Nombre:'@item.Nombre',Simbolo: '@item.Simbolo'};
        @:      monedas.push(monedaItem);
        }
          @foreach (var item in ViewBag.Tipos)
        {
        @:      tipoDoc = { IdTipoDocumento: '@item.IdTipoDocumento', Descripcion: '@item.Descripcion', Abreviatura: '@item.Abreviatura', Automatico: '@item.Automatico' };
        @:      tiposDoc.push(tipoDoc);
        }
    var TipoCambioDolar = '@ViewBag.TipoCambioDolar';
    var TipoCambioEuro = '@ViewBag.TipoCambioEuro';
    var IdAsiento = '@Model.IdAsientoContable';
    var lineas = [];
    Cargar();

    function Cargar() {
        IdAsiento = '@Model.IdAsientoContable';
        console.log('IdAsiento:' + IdAsiento);
        if (IdAsiento == '0') {
            document.getElementById('tipoCambioDolar').value = TipoCambioDolar;
            document.getElementById('tipoCambioEuro').value = TipoCambioEuro;
          
            CambioFecha();
        }
        else {

            document.getElementById('LtEstados').value = obtenerNombreEstado('@Model.Estado');
            document.getElementById('LtMonedas').value = '@ViewBag.Moneda.Nombre';
            document.getElementById('LtTipos').value = '@ViewBag.TipoDoc.Descripcion';
            document.getElementById('LtPeriodos').value = '@ViewBag.Periodo.Nombre';
            document.getElementById('tipoCambioDolar').value = TipoCambioDolar;
            document.getElementById('tipoCambioEuro').value = TipoCambioEuro;
            var linea
            var tipolinea
            @foreach (AltivaWebApp.DomainsConta.AsientoDetalle item in Model.detalle)
            {
            @: var EsDebe = '@item.Debe'
            @: if (EsDebe == 'True') { tipolinea = 'Debe'; }
            @: if (EsDebe != 'True') { tipolinea = 'Haber'; }
            @:  linea = { MDolar: '@item.MontoDolares', MEuro: '@item.MontoEuro', MBase: '@item.MontoColones', cuenta: obtenerCuentaPorId('@item.IdCuentaContable'), Tipo: tipolinea, TCDolar: '@item.TipoCambioDolar', TCEuro: '@item.TipoCambioEuro', Id: '@item.IdDetalleAsientoContable' };
            @:  lineas.push(linea);
            }
            tabla();
        }



    }
    function obtenerNombreEstado(estadoId) {
        if (estadoId == '1') {
            return 'ACTIVO';
        }
        if (estadoId == '3') {
            return 'ANULADO';
        }
        if (estadoId == '2') {
            return 'BLOQUEADO';
        }
        return '';
    }
        var fechaAsiento;
        function CambioFecha() {
            fechaAsiento = document.getElementById("dtFechaAsiento").value;
            document.getElementById("LtPeriodos").value = fnPeriodoExacto(fechaAsiento);
        }

        function fnPeriodoExacto(_fecha) {
            var nombre = '';

            periodos.forEach(function (element) {
                var fDesde = fnFecha(element.FechaInicio);
                var fHasta = fnFecha(element.FechaFinal);
                var fech = fnFecha(_fecha);

                if (fDesde <= fech && fHasta >= fech) {
                    nombre = element.Nombre;
                }
            });
           
          
            return nombre;

        }
        function fnMontoColon() {
            obtenerLinea();
            montoDolar = 0;
            if (TipoCambioDolar > 0) {
                montoDolar = montoBase / TipoCambioDolar;
                 document.getElementById("Monto2").value = montoDolar;
            }
            montoEuro=0
            if (TipoCambioDolar > 0) {
                montoEuro = montoBase / TipoCambioEuro;
                 document.getElementById("Monto3").value = montoEuro;
            }
            document.getElementById("MontoBase").value = montoBase;
        }
        function fnMontoDolar() {
            obtenerLinea();
            if (TipoCambioDolar > 0) {
                montoBase = montoDolar * TipoCambioDolar;
                 document.getElementById("MontoBase").value = montoBase;
            }
            if (TipoCambioEuro > 0) {
                montoEuro = montoDolar * TipoCambioDolar / TipoCambioEuro;
                document.getElementById("Monto3").value = montoEuro;
            }

            document.getElementById("Monto2").value = montoDolar;

        }
        function fnMontoEuro() {
            obtenerLinea();
            if (TipoCambioDolar > 0) {
                montoBase = montoEuro * TipoCambioEuro;
                document.getElementById("MontoBase").value = montoBase;
            }
            if (TipoCambioEuro > 0) {
                montoDolar = montoEuro * TipoCambioEuro / TipoCambioDolar;
                 document.getElementById("Monto2").value = montoDolar;
            }
            document.getElementById("Monto3").value = montoEuro;
        }
        function fnFecha(_fecha) {
            var date = _fecha.substring(0, 10);
            date = date.replace('/', '');
            date = date.replace('/', '');
            date = date.replace('-', '');
            date = date.replace('-', '');
            var num = parseFloat(date);
            return num;
        }
        function pasarSigCampo(e, id) {
            (e.keyCode) ? k = e.keyCode : k = e.which;
            if (k == 13) {
                if (id == "btn") {
                    agregar();
                }
                else {
                    document.getElementById(id).focus();
                }
                $('#' + id).select();
            }
        }
    var cuentaSeleccionada;
    function agregarLinea(tipo) {
        cuentaSeleccionada = obtenerCuenta(cuenta);
        obtenerLinea();
        if (validarLinea() == true) {
            var linea = { MDolar: montoDolar, MEuro: montoEuro, MBase: montoBase, cuenta: cuentaSeleccionada, Tipo: tipo, TCDolar: TipoCambioDolar, TCEuro: TipoCambioEuro, Id: lineas.length * -1 };
            lineas.push(linea);
            tabla();
        }
    }
    var TotalDebeBase = 0;
    var TotalHaberBase = 0;
    var TotalDebeDolar = 0;
    var TotalHaberDolar = 0;
    var TotalDebeEuro = 0;
    var TotalHaberEuro = 0;
        function tabla() {
            $("#tbAsientoDetalle > tbody").remove();
            $('#tbAsientoDetalle').append('<tbody></tbody>');

            contadorFila = 0;
            TotalDebeBase = 0;
            TotalHaberBase = 0;
            TotalDebeDolar = 0;
            TotalHaberDolar = 0;
            TotalDebeEuro = 0;
            TotalHaberEuro = 0;
            lineas.forEach(function (linea) {
                var montoDebeBase = 0;
                var montoHaberBase = 0;
                var montoDebeDolar = 0;
                var montoHaberDolar = 0;
                var montoDebeEuro = 0;
                var montoHaberEuro = 0;
                if (linea.Tipo == 'Debe') {
                    montoDebeBase = linea.MBase;
                    montoDebeDolar = linea.MDolar;
                    montoDebeEuro = linea.MEuro;
                }
                if (linea.Tipo == 'Haber') {
                    montoHaberBase = linea.MBase;
                    montoHaberDolar = linea.MDolar;
                    montoHaberEuro = linea.MEuro;
                }

                var body = '<tr class="filasCargadas" id="fila' + contadorFila + '"><td >' + linea.cuenta.CuentaContable + '</td>'
                    + '<td>' + linea.cuenta.Descripcion + '</td>'
                     + '<td style="text-align: right">' + darFomatoMoneda(montoDebeBase,'1') + '</td>'
                     + '<td style="text-align: right">' + darFomatoMoneda(montoHaberBase,'1') + '</td>'
                     + '<td style="text-align: right">' + darFomatoMoneda(montoDebeDolar,'2') + '</td>'
                     + '<td style="text-align: right">' + darFomatoMoneda(montoHaberDolar, '2') + '</td>'
                     + '<td style="text-align: right">' + darFomatoMoneda(montoDebeEuro, '3') + '</td>'
                     + '<td style="text-align: right">' + darFomatoMoneda(montoHaberEuro, '3') + '</td>'
                     + '<td> <button class="btn btn-link" style="margin:0; padding:0; font-size:1.8rem;" onclick="modalEditarLinea(' + contadorFila + ', ' + linea.Id + ')" ><i class="fas fa-edit"></i></button>&nbsp;&nbsp; <button @estado @estado2 class="btn btn-link" style="margin:0; padding:0; font-size:1.8rem;" value="' + contadorFila + '" onclick="elimarCompraDetalle(' + contadorFila + ', ' + linea.Id + ')" ><i class="fas fa-trash"></i></button></td></tr>';
                    $('#tbAsientoDetalle > tbody').append(body);
                     contadorFila++;
                TotalDebeBase = parseFloat(TotalDebeBase) + parseFloat(montoDebeBase);
                TotalHaberBase = parseFloat(TotalHaberBase) + parseFloat(montoHaberBase);
                TotalDebeDolar =  parseFloat(TotalDebeDolar) + parseFloat(montoDebeDolar);
                TotalHaberDolar = parseFloat(TotalHaberDolar) + parseFloat(montoHaberDolar);
                TotalDebeEuro = parseFloat(TotalDebeEuro) + parseFloat(montoDebeEuro);
                TotalHaberEuro = parseFloat(TotalHaberEuro) + parseFloat(montoHaberEuro);
            });
            $('#totalDebeBase').val(darFomatoMoneda(TotalDebeBase,'1'));
            $('#totalHaberBase').val(darFomatoMoneda(TotalHaberBase,'1'));
            $('#totalDebeDolar').val(darFomatoMoneda(TotalDebeDolar,'2'));
            $('#totalHaberDolar').val(darFomatoMoneda(TotalHaberDolar,'2'));
            $('#totalDebeEuro').val(darFomatoMoneda(TotalDebeEuro,'3'));
            $('#totalHaberEuro').val(darFomatoMoneda(TotalHaberEuro,'3'));

        }

        function darFomatoMoneda(_value,moneda) {

            var value = parseFloat(_value);
            var simbolo = "";

            if (moneda === "1") {
                simbolo = '@ViewBag.SimboloBase';
            }
            else if (moneda === "2") {
                simbolo = '@ViewBag.SimboloDolar';
            }
            else if (moneda === "3") {
                simbolo = '@ViewBag.SimboloEuro';
            }

            MASK(document.getElementById('monedaFormater'), value, '-##,###,##0.00', 1);

            return simbolo + ' ' + document.getElementById('monedaFormater').value;

    }
    // formatea un numero según una mascara dada ej: "-$###,###,##0.00"
    //
    // elm   = elemento html <input> donde colocar el resultado
    // n     = numero a formatear
    // mask  = mascara ej: "-$###,###,##0.00"
    // force = formatea el numero aun si n es igual a 0
    //
    // La función devuelve el numero formateado

    function MASK(form, n, mask, format) {
        if (format == "undefined") format = false;
        if (format || NUM(n)) {
            dec = 0, point = 0;
            x = mask.indexOf(".") + 1;
            if (x) { dec = mask.length - x; }

            if (dec) {
                n = NUM(n, dec) + "";
                x = n.indexOf(".") + 1;
                if (x) { point = n.length - x; } else { n += "."; }
            } else {
                n = NUM(n, 0) + "";
            }
            for (var x = point; x < dec; x++) {
                n += "0";
            }
            x = n.length, y = mask.length, XMASK = "";
            while (x || y) {
                if (x) {
                    while (y && "#0.".indexOf(mask.charAt(y - 1)) == -1) {
                        if (n.charAt(x - 1) != "-")
                            XMASK = mask.charAt(y - 1) + XMASK;
                        y--;
                    }
                    XMASK = n.charAt(x - 1) + XMASK, x--;
                } else if (y && "$0".indexOf(mask.charAt(y - 1)) + 1) {
                    XMASK = mask.charAt(y - 1) + XMASK;
                }
                if (y) { y-- }
            }
        } else {
            XMASK = "";
        }
        if (form) {
            form.value = XMASK;
            if (NUM(n) < 0) {
                form.style.color = "#FF0000";
            } else {
                form.style.color = "#000000";
            }
        }
        return XMASK;
    }

    // Convierte una cadena alfanumérica a numérica (incluyendo formulas aritméticas)
    //
    // s   = cadena a ser convertida a numérica
    // dec = numero de decimales a redondear
    //
    // La función devuelve el numero redondeado

    function NUM(s, dec) {
        for (var s = s + "", num = "", x = 0; x < s.length; x++) {
            c = s.charAt(x);
            if (".-+/*".indexOf(c) + 1 || c != " " && !Number.isNaN(c)) { num += c; }
        }
        if (Number.isNaN(num)) { num = eval(num); }
        if (num == "") { num = 0; } else { num = parseFloat(num); }
        if (dec != undefined) {
            r = .5; if (num < 0) r = -r;
            e = Math.pow(10, (dec > 0) ? dec : 0);
            return parseInt(num * e + r) / e;
        } else {
            return num;
        }
    }
        var cuenta;
        var montoDolar;
        var montoEuro;
        var montoBase;
        var monedaSeleccionada = [];
        function obtenerMoneda(nombre) {
            monedas.forEach(function (item) {
                if (nombre == item.Simbolo) {
                    monedaSeleccionada = item;
                }
            });
        }
        function cambioMoneda() {
            var nombreMoneda = document.getElementById("LtMonedas").value;
            obtenerMoneda(nombreMoneda);

        }
    var periodoSeleccionado;
    function obtenerPeriodo(nombre) {
        periodoSeleccionado = null;
        periodos.forEach(function (item) {
            if (nombre == item.Nombre) {
                periodoSeleccionado = item;
            }
        });
    }
        function cambioPeriodo() {
            var nombrePeriodo = document.getElementById("LtPeriodos").value;
            obtenerPeriodo(nombrePeriodo);

        }
        var tipoSeleccionado
        function obtenerTipoDoc(nombre) {
            tipoSeleccionado = null;
            tiposDoc.forEach(function (item) {
                if (nombre == item.Descripcion) {
                    tipoSeleccionado = item;
                }
            });
        }
        function cambioTipoDoc() {
            var nombreTipoDoc = document.getElementById("LtTipos").value;
            obtenerTipoDoc(nombreTipoDoc);

    }
    var anulado = '@Lb["ANULADO"]'
    var activo = '@Lb["ACTIVO"]'
    var bloqueado = '@Lb["BLOQUEADO"]'
    var IdEstadoSeleccionado = 0;
      function cambioEstado() {
          var estadoNombre = document.getElementById("LtEstados").value;

          IdEstadoSeleccionado = 0;
          if (estadoNombre == anulado) {
              IdEstadoSeleccionado = 3
          }
          if (estadoNombre == activo) {
               IdEstadoSeleccionado = 1
          }
          if (estadoNombre == bloqueado) {
               IdEstadoSeleccionado = 2
          }
       

        }
        function obtenerLinea() {
            montoDolar = document.getElementById("Monto2").value;
            montoEuro = document.getElementById("Monto3").value;
            montoBase = document.getElementById("MontoBase").value;
            cuenta = document.getElementById("catalogoCuentas").value;
            TipoCambioDolar = document.getElementById("tipoCambioDolar").value;
            TipoCambioEuro = document.getElementById("tipoCambioEuro").value;
        }
        function obtenerCuenta(_DescripcionCuenta) {
            var cuenta = null;
            catalogo.forEach(function (item) {
                if (_DescripcionCuenta == item.Descripcion) {
                    cuenta = item;
                }
            });
            return cuenta;
    }
     function obtenerCuentaPorId(_IdCuentaContable) {
            var cuenta;
         catalogo.forEach(function (item) {
             if (_IdCuentaContable == item.IdCuentaContable) {
                    cuenta = item;
                }
            });
            return cuenta;
        }
    function guardar() {
        var asiento = crearModelo();
        if (asiento != null) {
           enviarAjax(asiento);
        }       

    }
    function cancelar() {
         window.location.href = "@Url.Action("Index")";
    }
    function enviarAjax(asiento) {
           $.ajax({
            type: "POST",
            headers: {
                  "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
              },
              dataType: "json",
            url: '@Url.Action("upAsiento")',
            data: asiento,
            success: function (data) {
                if (data.success) {
                    window.location.href = "@Url.Action("Index")";
                }
                else {

                }
                 },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
        });
    }
    function crearModelo() {
        var codigoAsiento = document.getElementById("CodigoAsiento").value;
        var DescripcionAsiento = document.getElementById("descripcionAsiento").value;
        cambioEstado();
        CambioFecha();
        cambioPeriodo();
        cambioTipoDoc();
        cambioMoneda();
        tabla();

        if (IdAsiento == 0) {
            IdAsiento = '';
        }
        if (validarModelo()) {
            var asientoModelo = {
                IdAsientoContable: IdAsiento,
                Fecha: fechaAsiento,
                Codigo: codigoAsiento,
                Estado: IdEstadoSeleccionado,
                Descripcion: DescripcionAsiento,
                CodigoMoneda: monedaSeleccionada.Codigo,
                MontoColones: String(TotalDebeBase).replace('.', ','),
                MontoDolar: String(TotalDebeDolar).replace('.', ','),
                MontoEuro: String(TotalDebeEuro).replace('.', ','),
                Modulo: tipoSeleccionado.Descripcion,
                IdPeriodoTrabajo: periodoSeleccionado.IdPeriodoTrabajo,
                IdTipoDocumento: tipoSeleccionado.IdTipoDocumento,
                IdDocumento: 0,
                IdUsuarioCreador: 1,
                IdUsuarioMod: 1,
                FechaCreacion: fechaAsiento,
                FechaMod: fechaAsiento,
                Frecuente: 0,
                detalle: generarLineas(lineas)
            };

            return asientoModelo;

        }
        else { return null; }

    }
    function validarLinea() {

        var estado = true;

        if (cuentaSeleccionada == null) {
            document.getElementById('cuentaCorregir').style.display = 'block';
            estado = false;

        } else {
            document.getElementById('cuentaCorregir').style.display = 'none';

        }
        montoDolar = document.getElementById("Monto2").value;
        montoEuro = document.getElementById("Monto3").value;
        montoBase = document.getElementById("MontoBase").value;
      
        pasBase = parseFloat(montoBase);
        pasEuro = parseFloat(montoEuro);
        pasDolar = parseFloat(montoDolar);
        console.log("pasBase:" + pasBase);
        console.log("Val Base:" + Number.isNaN(pasBase));
        pasTCD = parseFloat(TipoCambioDolar);
        pasTCE = parseFloat(TipoCambioEuro);
        if (montoBase == null) {
           
                document.getElementById('montoBaseCorregir').style.display = 'block';
                estado = false;
         
        } else {
            if (Number.isNaN(pasBase) == true) {
                document.getElementById('montoBaseCorregir').style.display = 'block';
                estado = false;

            } else {
                document.getElementById('montoBaseCorregir').style.display = 'none';

            }
        }
         if (montoDolar == null) {
           
                document.getElementById('montoDolarCorregir').style.display = 'block';
                estado = false;
         
        } else {
            if (Number.isNaN(pasDolar) == true) {
                document.getElementById('montoDolarCorregir').style.display = 'block';
                estado = false;

            } else {
                document.getElementById('montoDolarCorregir').style.display = 'none';

            }
        }

         if (montoEuro == null) {
           
                document.getElementById('montoEuroCorregir').style.display = 'block';
                estado = false;
         
        } else {
            if (Number.isNaN(pasEuro) == true) {
                document.getElementById('montoEuroCorregir').style.display = 'block';
                estado = false;

            } else {
                document.getElementById('montoEuroCorregir').style.display = 'none';

            }
        }

        if (TipoCambioDolar == null) {
           
                document.getElementById('tipoCambioDolarCorregir').style.display = 'block';
                estado = false;
         
        } else {
            if (Number.isNaN(pasTCD) == true) {
                document.getElementById('tipoCambioDolarCorregir').style.display = 'block';
                estado = false;

            } else {
                document.getElementById('tipoCambioDolarCorregir').style.display = 'none';

            }
        }
        if (TipoCambioEuro == null) {
           
                document.getElementById('tipoCambioEuroCorregir').style.display = 'block';
                estado = false;
         
        } else {
            if (Number.isNaN(pasTCE) == true) {
                document.getElementById('tipoCambioEuroCorregir').style.display = 'block';
                estado = false;

            } else {
                document.getElementById('tipoCambioEuroCorregir').style.display = 'none';

            }
        }
        return estado;

    }
    function validarModelo() {

        var estado = true;

        if (periodoSeleccionado == null) {
            document.getElementById('fechaCorregir').style.display = 'block';
            estado = false;

        } else {
            
            if (fechaAsiento == '') {
                document.getElementById('fechaCorregir').style.display = 'block';
                estado = false;

            } else {
                document.getElementById('fechaCorregir').style.display = 'none';

            }
        }

       

        if (IdEstadoSeleccionado == 0) {
            document.getElementById('estadoCorregir').style.display = 'block';
            estado = false;

        } else {
            document.getElementById('estadoCorregir').style.display = 'none';

        }
        if (monedaSeleccionada == 0) {
            document.getElementById('monedaCorregir').style.display = 'block';
            estado = false;

        } else {
            document.getElementById('monedaCorregir').style.display = 'none';

        }
        if (tipoSeleccionado == null) {
            document.getElementById('tipoDocCorregir').style.display = 'block';
            estado = false;

        } else {document.getElementById('tipoDocCorregir').style.display = 'none';

        }

        document.getElementById('lineasCorregir').style.display = 'none';

        if (TotalDebeBase != TotalHaberBase || TotalHaberDolar != TotalDebeDolar || TotalDebeEuro != TotalHaberEuro) {
            document.getElementById('totalCorregir').style.display = 'block';
            estado = false;

        } else {
            if (TotalDebeBase == 0 && TotalHaberDolar == 0 && TotalDebeEuro == 0) {
                document.getElementById('lineasCorregir').style.display = 'block';
                estado = false;
            } else {
                document.getElementById('lineasCorregir').style.display = 'none';
            }
            document.getElementById('totalCorregir').style.display = 'none';
        }
        return estado;
        
    }
   

        function generarLineas(lineas) {
            var lineasAsiento = [];
            for (var i = 0; i < lineas.length; i++) {
                var detalle = {
                    IdDetalleAsientoContable: lineas[i].Id,
                    IdAsientoContable: IdAsiento,
                    Observacion: '',
                    IdCuentaContable: lineas[i].cuenta.IdCuentaContable,
                    MontoColones: String(lineas[i].MBase).replace('.',','),
                    MontoDolares: String(lineas[i].MDolar).replace('.',','),
                    MontoEuro:  String(lineas[i].MEuro).replace('.',','),
                    Debe : lineas[i].Tipo == 'Debe',
                    Haber: lineas[i].Tipo == 'Haber',
                    TipoCambioDolar: parseFloat(lineas[i].TCDolar),
                    TipoCambioEuro: parseFloat(lineas[i].TCEuro),
                    IdCentroDeGastos: 0
                }
                lineasAsiento.push(detalle);
            }

            return lineasAsiento;
        }

</script>



