@model AltivaWebApp.ViewModels.DocumentoViewModel
@inject IStringLocalizer<SharedResources> Lb
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{ 
    ViewData["Title"] = @Lb["Documento"];

    var select = "checked";
    var select1 = "";
    var guardar = "guardarCambios()";
    var estado = "";
    var estado2 = "disabled";
    var titulo = @Lb["Nuevo"];
    if (Model.IdDocumento != 0)
    {
        if (Model.Estado == 2)
        {
            select1 = "checked";
            select = "";

        }
        titulo = @Lb["Editar"];
        estado = "disabled";
        estado2 = "";
        guardar = "Guardar()";
    }

}

<div class="row">
    <div class="col-md-3"><h3>@titulo @Lb["Movimiento"]</h3></div>
    <div class="col-md-9 pull-right">
        <a class="btn btn-default pull-right" href="#" onclick="GetReporte()">@Lb["generarReporte"] <i class="fa fa-print"></i></a>
    </div>
</div>
<div class="row well">
    <input type="hidden" id="IdMovimiento" value="0" />
    <input type="hidden" id="IdUsuario"  />

    <div class="row">

        <div class="form-group col-md-3 col-sm-4 col-xs-6" style="margin: 0; padding:0; margin-left:1rem">
            <label for="fecha">@Lb["Fecha"]:</label>
            <div class='input-group date' id='fechaPicker'>
                <input type='text' asp-for="Fecha" class="form-control" id="fecha" />
                <span class="input-group-addon">
                    <span class="fas fa-calendar"></span>
                </span>
            </div>
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-4">
            <label>@Lb["tipo"]:</label>
            <select class="form-control" id="tipo" @estado>
                <option value="1"> @Lb["CXP"]</option>
                <option value="2">@Lb["CXC"]</option>
            </select>
        </div>

        <div class="form-group col-md-3 col-sm-4 col-xs-12">
            <label>@Lb["TipoDocumento"]:</label>
            <select class="form-control" @estado id="tipoDocumento"></select>
        </div>
        <div class="form-group col-md-3 col-sm-4 col-xs-12">
            <label class="control-label">@Lb["Contacto"]:</label>
            <select class="selectItems form-control" data-live-search="true" id="contactos" @estado></select>
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-6">
            <label class="control-label">@Lb["Moneda"]:</label>
            <select class="selectItems form-control" data-live-search="true" id="tipoMoneda">
                <option value="1">@Lb["CRC"]</option>
                <option value="2">@Lb["USD"]</option>
                <option value="3">@Lb["EUR"]</option>
            </select>
        </div>
        <div class="form-group col-md-2 col-sm-2 col-xs-6">
            <label class="control-label">@Lb["Dolar"]:</label>
            <input class="form-control moneda" value="@ViewBag.DolarVenta" id="dolarVenta" @estado />
            <input class="form-control moneda" type="hidden" value="@ViewBag.Dolar" id="dolar" />
        </div>
        <div class="form-group  col-md-2 col-sm-2 col-xs-6">
            <label class="control-label">@Lb["Euro"]:</label>
            <input class="form-control moneda" value="@ViewBag.EuroVenta" id="euroVenta" @estado />
            <input class="form-control moneda" type="hidden" value="@ViewBag.Euro" id="euro" />

        </div>
        <div class="form-group col-md-4 col-sm-6 col-xs-12">
            <label class="control-label">@Lb["Nota"]:</label>
            <textarea class="form-control" asp-for="Nota" maxlength="250" rows="4" id="nota"></textarea>
            <span hidden id="notaValid" class="text-danger">@Lb["notaValid"]</span>
        </div>

        <div class="form-group col-md-2 col-sm-2 col-xs-4" style="padding-top:25px;">
            <label for="activo1"><input id="activo1" type="checkbox" value="1" name="estado1" @select /> @Lb["activo"]</label>
            <label for="inactivo1"><input id="inactivo1" type="checkbox" value="2" name="estado1" @select1 />@Lb["inactivo"]</label>
        </div>

    </div>


    <div class="row">
        <div class="col-md-12" id="notaDetalleContainer">
            <input type="checkbox" class="form-check-input" id="notaDetalle" /> @Lb["Total"]  <span>@Lb["Detalle"]</span><span readonly id="totalDetalle" class=" currency total tdetalle"></span>
       </div>
        <div class="col-md-12" id="preDetalleContainer">
            <span>@Lb["Total"] @Lb["Detalle"]</span> <span id="totalDetallePrepago" class=" currency total tdetalle"></span><a class="btn btn-link" style="margin:0; padding:0; padding-bottom:0.5rem" onclick="validarCajasAbiertas()">@Lb["Editar"]</a>
        </div>
    </div>

    <div class="collapse notaDetalleForm">

        <div class="row">
            <div class="form-group col-md-3 col-sm-3 col-xs-6">
                <label class="control-label">@Lb["Descripción"]:</label>
                <input class="form-control" id="descripcion" />
                <span hidden id="descripcionValid" class="text-danger">@Lb["descripcionValid"]</span>

            </div>

            <div class="form-group col-md-2 col-sm-2 col-xs-6">
                <label class="control-label">@Lb["tipo"]:</label>
                <select class="selectItems form-control" data-live-search="true" id="tipoJustificante"></select>
            </div>
            <div class="form-group col-md-1 col-sm-1 col-xs-12">
                <br />
                <a style="padding:0; margin:0; margin-top:1rem" class="btn btn-link" id="crearJustificante">
                    <span><i style="font-size: 2rem" class="fas fa-plus-circle"></i></span>
                </a>
                <a style="padding:0; margin:0; margin-top:1rem" class="btn btn-link" id="editarJustificante">
                    <span><i style="font-size: 2rem" class="fas fa-edit"></i></span>
                </a>
            </div>
            <div class="form-group col-md-2 col-sm-2 col-xs-12">
                <label class="control-label">@Lb["Monto"]:</label>
                <input class="form-control moneda" type="text" min="1" id="monto" />
                <span hidden id="montoValid" class="text-danger">@Lb["montoValid"]</span>
            </div>

            <div class="form-group col-md-1 col-sm-1 col-xs-12" style="padding-top: 2.3rem;">
                <button onclick=" guardarLinea()" id="guardar" class="btn btn-success"><span><i class="fas fa-save"></i></span></button>
            </div>

        </div>

        <div class=" row  col-md-8 col-sm-8 col-xs-12">
            <div class="table-responsive " style="overflow-y:scroll;height:200px;">
                <table class="table table-bordered table-fixed" id="tblOrdenCompra">
                    <thead>
                        <tr>
                            <th><span>@Lb["Descripción"]</span></th>
                            <th><span>@Lb["tipo"]</span></th>
                            <th><span>@Lb["Monto"]</span></th>
                            <th><span>@Lb["Acción"]</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="lineaForm"></tr>
                    </tbody>
                </table>
            </div>
            <div class="col-md-offset-9 col-md-3">
                <div class="form-group">
                    <label class="control-label">@Lb["Total"]</label>
                    <input readonly id="total" class="form-control currency total" />
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <input @estado2 type="checkbox" class="form-check-input" id="aplicado" /> @Lb["Aplicado"] <span readonly id="totalAplicado" class="currency"></span>
        </div>
    </div>
    <div class="collapse aplicadoForm">
        <div class=" row col-md-8 col-sm-8 col-xs-12">
            <div class="table-responsive " style="overflow-y:scroll;height:200px;">

                <table class="table table-bordered table-striped" id="tblOrdenCompra">
                    <thead>
                        <tr>
                            <th><span>@Lb["Nombre"]</span></th>
                            <th><span>@Lb["Documento"]</span></th>
                            <th><span>@Lb["Monto"]</span></th>
                            <th><span>@Lb["Acción"]</span></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="lineasTotalesForm"></tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="form-group col-md-8 col-sm-8 col-xs-12" style="padding-top: 1.3rem;">
            <a onclick="getEnlace()" id=""><span><i class="fas fa-plus-circle"></i></span> @Lb["Agregar"]</a>
        </div>
    </div>
    <div class="row">
        <div @estado2 class="col-md-12">
            @Lb["Disponible"] <span readonly id="totalDisponible" class="currency"></span>
        </div>
    </div>
</div>

<span hidden id="lineasValid" class="text-danger">@Lb["lineasValid"]</span>
<div class="row">
    <div class="form-group col-md-8">
        <button class="btn btn-success btnAccion" onclick="guardarCambios()">@Lb["Guardar"] <i class="fas fa-save"></i></button>
        <a onclick="cancelar()" class="btn btn-default">@Lb["Cancelar"]</a>
    </div>
</div>
<div class="row">
    <!-- Modal -->
    <div class="modal fade" id="modalNotas" tabindex="-1" role="dialog" aria-labelledby="departamentoModallabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body row" id="crearEditarPartial">
                    <div class="form-group col-md-10 col-sm-10 col-xs-12">
                        <input id="IdMovimientoJ" type="hidden" class="form-control" style="text-align:right;" />

                        <div class="form-group col-md-8 col-sm-10 col-xs-12">
                            <label class="control-label">@Lb["Descripción"]:</label>
                            <input id="editDescripcion" class="form-control" style="text-align:right;" />
                            <span hidden id="editDescripcionValid" class="text-danger">@Lb["descripcionValid"]</span>


                        </div>
                        <div class="form-group  col-md-8 col-sm-8 col-xs-12">
                            <label class="control-label">@Lb["tipo"]:</label>
                            <select class="selectItems form-control" data-live-search="true" dir="rtl" id="editTipoJustificante"></select>
                        </div>
                        <div class="form-group col-md-8 col-sm-8 col-xs-12">
                            <label class="control-label">@Lb["Monto"]:</label>
                            <input class="form-control moneda" type="text" min="1" id="editMonto" />
                            <span hidden id="editMontoValid" class="text-danger">@Lb["montoValid"]</span>
                        </div>

                        <div class="form-group col-sm-7">

                            <button id="btnEditOrden" onclick="EditarLinea()" class="btn btn-success"><span>@Lb["Guardar"] </span><span><i class="fas fa-save"></i></span></button>

                            <button class="btn btn-default" data-dismiss="modal"><span>@Lb["Cancelar"]</span></button>

                        </div>
                    </div>


                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="formatter" class="currency" />
<div class="row">
    <!-- Modal -->
    <div class="modal fade bd-example-modal-lg" id="modalTipoJustificante" tabindex="-1" role="dialog" aria-labelledby="departamentoModallabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-body" id="EditarPartial">


                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <!-- Modal -->
    <div class="modal fade" id="modalEditAplicado" tabindex="-1" role="dialog" aria-labelledby="departamentoModallabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body row" id="edicionAplicado">
                    <h5 class="col-md-11 col-sm-11 col-xs-11" id="departamentoModallabel"> @Lb["EnlaceAutomatico"]</h5>
                    <div class="col-md-1 col-sm-1 col-xs-1">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <input class="form-control" type="hidden" id="idFila" />

                    <div class="col-md-5 col-sm-5 col-xs-12">
                        <label>@Lb["Aplicado"]:</label>
                        <input class="form-control currency" id="editAplicado" />
                        <span id="aplicadoValid" class="text-danger" hidden>@Lb["aplicadoValid"]</span>

                        <br />
                    </div>

                    <div class="col-md-10 col-sm-10 col-xs-12">

                        <button id="btnEditOrden" onclick="editarAplicado()" class="btn btn-success"><span>@Lb["Guardar"] </span><span><i class="fas fa-save"></i></span></button>

                        <button class="btn btn-default" data-dismiss="modal"><span>@Lb["Cancelar"]</span></button>
                        <button class="btn btn-link" onclick="eliminarMovimientoDetalle()"><i class="fas fa-trash"></i></button>

                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<div id="formaPagoPartial">

</div>

<input hidden readonly id="estadoDocumento" value="false" />
<input hidden readonly id="documentoTipo" />
<input hidden readonly id="docT" />

<div class="row">
    <div class="col-md-12">
        <div id="comentarios">

        </div>
    </div>
</div>

<script src="~/js/comentario.js"></script>
<script>
    var $idNotaCredito = '@Model.IdDocumento';
    var editDescripcion = "";
    var editMonto = 0;
    var lineas = [];
    var lineasAgregadas = [];
    var lineasActualizadas = [];
    var lineasEliminadas = [];
    var lineasTJustificante = [];
    var lineasCargadas = [];
    var tipoDocumento = [];
    var movimientosDetalle = [];
    var idCajaPuntoVenta = 0;
    var formasPagoDoc = [];
    var monedas = [];
    var arrayMovimiento  = [];


    var saldoAplicable = 0;
    var docSinAplicar = [];
    var docAplicados = [];
    var ObjetoMovimiento = [];


    $(document).ready(function () {      
       $('#enlaceContenedor').prop('hidden', true);       
        var date = new Date();
        $("#monto").val(0.00);
        if (@Model.IdDocumento != 0) {

            GetComentarios("DOCS", @Model.IdDocumento, '@Url.Action("Nuevo-Comentario", "Mensajes")');
            var valor = 3;
            $("#contactos option[value="+ valor +"]").attr("selected",true);
            $("#tipoDocumento").val(@Model.IdTipoDocumento).prop('selected', true);

            date = new Date(formatearFecha());

        }
        $('#fechaPicker').datetimepicker({
            defaultDate: date,
            locale: localStorage.getItem("idioma")
        });

            getAllMovimientos();
            getTipoJustificante();            
         if (@Model.IdDocumento == 0){
             $("#activo1").attr('checked', true);
             getContactos(2);
            $('#preDetalleContainer').prop('hidden', true);
             $('#notaDetalleContainer').prop('hidden', true);           
        }
        
    });
    //eventos directos

    $("#tipoDocumento").on("change", function () {
        toggleTipoDocumento();
    });

    function toggleTipoDocumento() {
        
        if (@Model.IdDocumento == 0) {
            var esN = false;     
            for (var i = 0; i < tipoDocumento.length; i++) {
                if (parseInt($("#tipoDocumento option:selected").val()) == tipoDocumento[i].idTipoDocumento)
                    esN = tipoDocumento[i].esNota;             
            }
            if (esN) {
                $('#notaDetalleContainer').prop('hidden', false);
            } if (!esN) {
                $('#notaDetalleContainer').prop('hidden', true);
            }
        }
        if (@Model.IdDocumento != 0) {
            if ( $("#documentoTipo").val() == "true") {
                $('#preDetalleContainer').prop('hidden', true);
                $('#notaDetalleContainer').prop('hidden', false);
            } if ($("#documentoTipo").val() == "false") {
                $('#preDetalleContainer').prop('hidden', false);
                $('#notaDetalleContainer').prop('hidden', true);
            }
        }

    }

    $('#aplicado').change(function () {
        $('.aplicadoForm').collapse('toggle');
        if ($('#aplicado').val() === "False") {
            $('#aplicado').val("True");
        } else {
            $('#aplicado').val("False");
        }
    });

    $('#notaDetalle').change(function () {
        $('.notaDetalleForm').collapse('toggle');
        if ($('#notaDetalle').val() === "False") {
            $('.tdetalle').attr('hidden', false);
            $('#notaDetalle').val("True");
        } else {
            $('#notaDetalle').val("False");
            $('.tdetalle').attr('hidden', true);
        }
    });



    $("#btnTipo").on("click", function () {
        cargarTabla(lineas);
    });

    $('#tipo').change(function () {
        if ($(this).val() == 1) {
            getContactos(2);
            getTipoDocumento(1);
        }
        if ($(this).val() == 2) {
            getContactos(1);
            getTipoDocumento(2);
        }

    });

    $("#tipoMoneda").on("change", function () {
        if (@Model.IdDocumento==0) {
            for (var i = 0; i < lineas.length; i++) {
                lineas[i].monto = recalcularMonto(lineas[i]);
                lineas[i].idMoneda = parseInt($('#tipoMoneda').val());
            }
            if (lineasAgregadas > 0) {
                for (var i = 0; i < lineasAgregadas.length; i++) {
                    lineasAgregadas[i].monto = recalcularMonto(lineasAgregadas[i]);
                    lineasAgregadas[i].idMoneda = parseInt($('#tipoMoneda').val());
                }
            }
        }

        if (@Model.IdDocumento != 0) {            
            for (var i = 0; i < lineas.length; i++) {
                for (var j = 0; j < lineasCargadas.length; j++) {
                    if (lineas[i].id == lineasCargadas[j].idMovimientoJustificante)
                       lineas[i].monto = recuperarMonto(lineasCargadas[j]);

                }
            }
            $(".total").text(recalcularMonto(ObjetoMovimiento));
             $("#totalDisponible").val(recuperarDisponible(ObjetoMovimiento));
             $("#totalAplicado").val(recuperarAplicado(ObjetoMovimiento));
            cargarTablaDocAplicados(docAplicados);

        }

        setTotal();
        cargarTabla(lineas);
    });

    $('#activo1').change(function () {
        if ($(this).prop('checked') == true)
            $('#inactivo1').prop('checked', false);
    });
    $('#inactivo1').change(function () {
        if ($(this).prop('checked') == true)
            $('#activo1').prop('checked', false);
    });
    $("#editarJustificante").on("click", function () {
        var id = parseInt($("#tipoJustificante").val());
        getCrearEditarPartial(id);
    });
    $("#crearJustificante").on("click", function () {
        getCrearEditarPartial(0);
    });


    //AJAX

    function getMonedas() {
         $.ajax({
              type: "get",
              dataType: "json",
              url: '@Url.Action("GetMonedas", "Monedas")',
             success: function (data) {
                 monedas = data;
                if ('@Model.IdDocumento' != 0) {
                    getMovimiento();

                }
             },
             error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
             }
         });
    }
    function getAllMovimientos() {
             $.ajax({
              type: "get",
              dataType: "json",
              url: '@Url.Action("GetAllMovimientos", "Nota")',
                 success: function (data) {
                     arrayMovimiento = data;
                    getTipoDocumento(1);        
           
             },
             error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
             }
         });
    }
    function getMovimiento() {
        var idNota = @Model.IdDocumento;
        $.ajax({
              type: "get",
              dataType: "json",
              url: '@Url.Action("GetMovimiento", new { id = Model.IdDocumento, tipoDoc = Model.IdTipoDocumento })',

            success: function (data) {  
                ObjetoMovimiento = data;
                    $("#tipoMoneda").val(data.idMoneda);
                    if (data.cxp)
                        $("#tipo").val("1");
                    else
                    $("#tipo").val("2");

                $("#IdMovimiento").val(data.idMovimiento);
                $("#IdUsuario").val(data.idUsuario);
                $(".total").text(recalcularMonto(data));
                $("#totalDisponible").text(recuperarDisponible(data));
                $("#totalAplicado").text(recuperarAplicado(data));

                esNota2();
                if ($("#documentoTipo").val() == "true") {                   
                      getMovimientoJustificante(data.idMovimiento);
                  }
                if ($("#documentoTipo").val() == "false") {
                        $("#dolar").val(monedas[1].valorCompra);
                        $("#euro").val(monedas[2].valorCompra);
                        $("#dolarVenta").val(monedas[1].valorVenta);
                        $("#euroVenta").val(monedas[2].valorVenta);

                      getFomasPagoDoc();

                  }

              },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
        });
            getContactos(2);
            toggleTipoDocumento();

    }

    function getEnlace()
    {
        var url = "@Url.Action("_EnlaceAutomatico", "Nota", new { idContacto = Model.IdContacto })";
        $.ajax({
            type: "GET",
            url: url,
            success: function (data) {              
                 $('#EditarPartial').html(data);
                $('#modalTipoJustificante').modal('show');
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }

        });
    }

    function getFomasPagoDoc() {

        getDocumentosEnlazados();

    }

    function getDocumentosEnlazados() {
        var idMovimiento = parseInt($("#IdMovimiento").val());
        var url = '@Url.Action("GetDocumentosEnlazados", "Nota", new { idMovimiento = "__id__" })'.replace("__id__", idMovimiento);
        $.ajax({
           type: "get",
           dataType: "json",
           url: url,
            success: function (data) {
                docAplicados = data;     
                cargarTablaDocAplicados(data);

           },
           error: function (err, scnd) {
               console.log(err.statusText);
           }

        });
    }

    function cargarFormaPago() {

        var model = {
            idCaja: idCajaPuntoVenta,
            idDocumento: @Model.IdDocumento,
            monto: 0,
            tcDolar: $('#dolar').inputmask('unmaskedvalue'),
            tcEuro: $('#euro').inputmask('unmaskedvalue'),
            moneda: $('#tipoMoneda').val(),
            idContacto: $('#contactos').val(),
            esPagoContado: false,
            idTipoDocumento: $('#tipoDocumento').val()
        };

        if (model.idCaja == 0)
            return;

        $.ajax({
            type: "POST",
            url: '@Url.Action("_FormaPago", "MovimientoCaja")',
            data: { viewModel: model, tipo : 2 },
            success: function (data) {
                $('#formaPagoPartial').html(data);

                if (formasPagoDoc.length > 0)
                    cargarFPLocal(formasPagoDoc);

                $('#formaPagoModal').modal('show');
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }

        });

    }

    function validarCajasAbiertas() {

        $.ajax({
            type: "POST",
            dataType: "json",
            url: '@Url.Action("GetEstadoCajasPuntoVenta", "PuntoVenta")',
            data: { idPV: 0, idUsuario: @User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value },
            success: function (data) {
                if (data <= 0) {
                    cargarAlert('@Lb["PuntoVentaSinCajasAbiertas"]');
                    idCajaPuntoVenta = data;
                }
                else {
                    idCajaPuntoVenta = data;
                    cargarFormaPago();
                }

             },
             error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
             }
        });

    }
    function cancelar() {
          window.location.href = '@Url.Action("ListarNotas")';
    }
    function procesarPagoDoc() {

        formasPagoDoc = formasPago;
         $('#formatter').val(totalFomasPago());
        $(".total").val($('#formatter').inputmask('unmaskedvalue'));
        $('#totalDisponible').val(parseFloat($("#formatter").inputmask('unmaskedvalue')) - $('#totalAplicado').inputmask('unmaskedvalue'));
        procesarPago('@Model.IdDocumento');
        $('#formaPagoModal').modal('hide');

    }

    function getCrearEditarPartial(id)
    {
        var url = "@Url.Action("_CrearTipoJustificante", "TipoJustificante",  new {tipo = 2}))";
        if (id != 0) {
            url = '@Url.Action("_EditarTipoJustificante", "TipoJustificante", new { id = "__id__", tipo = 2})';
            url = url.replace("__id__", id);
        }

        $.ajax({
            type: "GET",
            url: url,
            success: function (data) {
                $('#EditarPartial').html(data);
                $('#modalTipoJustificante').modal('show');
            },
            error: function (err, scnd) {
                console.log(err.statusText);
            }

        });
    }

    function getContactos(tipo) {
            $('#contactos').html('');
            $.ajax({
                type: "get",
                dataType: "json",
                url: '@Url.Action("GetAllContactos", "Contacto")',
                success: function (data) {
                    if (@Model.IdDocumento == 0) {

                            for (var i = 0; i < data.length; i++) {
                                 if (tipo == 1) {
                                     var nombre = "";
                                     if (data[i].cliente) {
                                         if (data[i].persona)
                                             nombre = data[i].nombre + ' ' + data[i].apellidos;
                                         else
                                             nombre = data[i].nombreComercial;

                                         var o = new Option(nombre, data[i].idContacto);
                                         $("#contactos").append(o);
                                     }
                                 }
                                if (tipo == 2) {

                                      if (data[i].proveedor) {
                                          if (data[i].persona)
                                             nombre = data[i].nombre + ' ' + data[i].apellidos;
                                         else
                                            nombre = data[i].nombreComercial;
                                        var o = new Option(nombre, data[i].idContacto);
                                        $("#contactos").append(o);
                                      }
                                }

                            }
                    }
                    if (@Model.IdDocumento != 0) {
                        for (var i = 0; i < data.length; i++) {
                             var nombre = "";
                            if (data[i].idContacto == @Model.IdContacto) {
                                 if (data[i].persona)
                                nombre = data[i].nombre + ' ' + data[i].apellidos;
                            else
                                nombre = data[i].nombreComercial;
                            var o = new Option(nombre, data[i].idContacto);
                            $("#contactos").append(o);
                            }

                        }
                    }

                },
                error: function (err, scnd) {
                    cargarAlert('@Lb["errorGeneral"]');
                    console.log(err.statusText);
                }
            });
    }

    function getTipoJustificante() {
        $("#tipoJustificante").html('');
        $("#editTipoJustificante").html('');
        $.ajax({
            type: "get",
            dataType: "json",
            url: '@Url.Action("GetTipoJustificante", "TipoJustificante")',
            success: function (data) {
                lineasTJustificante = data;
                for (var i = 0; i < data.length; i++) {
                    if (data[i].estado == 1) {
                        var o = new Option(data[i].nombre, data[i].idTipoJustificante);
                        var e = new Option(data[i].nombre, data[i].idTipoJustificante);
                        $("#tipoJustificante").append(o);
                        $("#editTipoJustificante").append(e);
                    }
                }
            },
            error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
            }
        });
    }
    function esNota2() {
        $.ajax({
            type: "get",
            dataType: "json",
            url: '@Url.Action("GetAllTipoDocumento", "Nota")',
            success: function (data) {
              for (var j = 0; j < data.length; j++) {
                  if ($("#tipoDocumento option:selected").val() == data[j].idTipoDocumento) {
                     $("#documentoTipo").val(data[j].esNota);
                  }
              }
            },
            error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
            }
        });
    }

    function getTipoDocumento(tipo) {
        $("#tipoDocumento").html('');
        $.ajax({
            type: "get",
            dataType: "json",
            url: '@Url.Action("GetAllTipoDocumento", "Nota")',
            success: function (data) {
                tipoDocumento = data;
                 if (@Model.IdDocumento != 0) {
                     for (var i = 0; i < data.length; i++) {
                         if (@Model.IdTipoDocumento == data[i].idTipoDocumento) {
                             var o = new Option(data[i].nombre, data[i].idTipoDocumento);
                             $("#tipoDocumento").append(o);
                             $("#documentoTipo").val(data[i].esNota);
                            
                         }
                     }
                 }
                 else {
                     for (var i = 0; i < data.length; i++) {

                         if (data[i].esNota || !data[i].esDebito) {

                             if (tipo == 1) {
                                 if (data[i].cxc == false) {
                                     var j = new Option(data[i].nombre, data[i].idTipoDocumento);
                                     $("#tipoDocumento").append(j);
                                 }
                             }
                             if (tipo == 2) {
                                 if (data[i].cxc) {
                                     var o = new Option(data[i].nombre, data[i].idTipoDocumento);
                                     $("#tipoDocumento").append(o);
                                 }

                             }
                         }

                     }
                 }
                 getMonedas();           
            },
            error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
            }
        });
    }
    function guardarCambios() {
                          var esN = false;     
            for (var i = 0; i < tipoDocumento.length; i++) {
                if (parseInt($("#tipoDocumento option:selected").val()) == tipoDocumento[i].idTipoDocumento)
                    esN = tipoDocumento[i].esNota;             
            }
        if (esN) {
            crearEditarNota();
        }
        else {
            crearEditarPago();
        }

    }

    function esNota() {
        $.ajax({
            type: "get",
            dataType: "json",
            url: '@Url.Action("GetAllTipoDocumento", "Nota")',
            success: function (data) {
              for (var j = 0; j < data.length; j++) {
                  if (data[j].idTipoDocumento == parseInt('@Model.IdTipoDocumento')) {                                       
                      $("#docT").val(data[j].esNota);
                     
                  }
                }
                 
            },
            error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
            }
        });
        
    }


    function postProcesarPago(idDocumento) {
        if (@Model.IdDocumento == 0)
            window.location.href = "@Url.Action("EditarPago","Nota", new { id = "__id__" })".replace("__id__", idDocumento);
       
    }

    function crearEditarPago() {

        $.ajax({
                type: "post",
                dataType: "json",
                data: { modelPago: crearModeloNota(), modelMovimiento: crearModeloMovimiento()},
                url: '@Url.Action("CrearEditarPago", "Nota")',
                success: function (data) {
                  if (@Model.IdDocumento == 0)
                    window.location.href = "@Url.Action("EditarPago","Nota", new { id = "__id__" })".replace("__id__", data.idPago);
                 else
                     window.location.href = '@Url.Action("ListarNotas")';
                },
                error: function (err, scnd) {
                    cargarAlert('@Lb["errorGeneral"]');
                    console.log(err.statusText);
                }
        });

    }

    function crearEditarNota() {
        if (validarCampoNota()) {
            if (lineasEliminadas.length > 0)
                eliminarMovimientoJustificante();
            $.ajax({
                type: "post",
                dataType: "json",
                data: { modelNota: crearModeloNota(), modelMovimiento: crearModeloMovimiento(), modelMovimientoJustificante: crearLineasActualizadas(lineasActualizadas) },
                url: '@Url.Action("CrearEditarNota", "Nota")',
                success: function (data) {
                    if ('@Model.IdDocumento' == 0)
                        window.location.href = "@Url.Action("EditarNota","Nota", new { id = "__id__" })".replace("__id__", data.idNotaCredito);
                    if('@Model.IdDocumento' != 0)
                    window.location.href = '@Url.Action("ListarNotas")';
                },
                error: function (err, scnd) {
                    cargarAlert('@Lb["errorGeneral"]');
                    console.log(err.statusText);
                }
            });
        }
    }

    function getMovimientoJustificante(id) {
          $.ajax({
            type: "get",
              dataType: "json",
              url: '@Url.Action("GetMovimientoJustificante", new { id = "__id__"} )'.replace("__id__",id),
              success: function (data) {
                   getTipoJustificante();            
                  lineasCargadas = data;
                  $("#dolar").val(data[0].compraDolarTc);
                  $("#euro").val(data[0].compraEuroTc);
                  $("#dolarVenta").val(data[0].ventaDolatTc);
                  $("#euroVenta").val(data[0].ventaEuroTc);
                  getDocumentosEnlazados(2);
                  cargarLineas(data);


             },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
         });
    }

     function eliminarMovimientoJustificante() {


        $.ajax({
            type: "POST",
            headers: {
                "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
            },
            dataType: "json",
            url: '@Url.Action("EliminarMovimientoJustificante", new { id = "__id__" })'.replace("__id__", parseInt($("#IdMovimiento").val())),
            data: { viewModel: lineasEliminadas },
            success: function (data) {

               },
              error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
              }
        });
     }

    //helpers
    function eliminarMovimientoDetalle() {
        bootbox.confirm("@Lb["confirmEliminarLinea"]", function (result) {
            if (result) {
                var pos = parseInt($("#idFila").val());   
                var aplicado = recuperarAplicado(docAplicados[pos]);
                var idMovD =  docAplicados[pos].idMovimientoDetalle;
                $.ajax({
                         type: "post",
                         dataType: "json",
                         data: { id: idMovD },
                         url: '@Url.Action("EliminarMovimientoDetalle", "Nota")',
                        success: function (data) {
                           $("#totalDisponible").val(parseFloat($("#totalDisponible").inputmask('unmaskedvalue')) + parseFloat(aplicado));
                           $("#totalAplicado").val(parseFloat($("#totalAplicado").inputmask('unmaskedvalue')) - parseFloat(aplicado));
                           getDocumentosEnlazados();
                          $("#modalEditAplicado").modal("hide");
                        },
                       error: function (err, scnd) {
                           cargarAlert('@Lb["errorGeneral"]');
                           console.log(err.statusText);
                       }
               });

             }

         });


    }
    function eliminarLinea(id, idLinea) {
        var aplicado =  $("#totalAplicado").inputmask('unmaskedvalue');
         var total = $(".total").inputmask('unmaskedvalue');
        var result = parseFloat(total) - parseFloat(lineas[id].monto);
        if (result < parseFloat(aplicado)) {
           cargarAlert('@Lb["aplicadoValid"]');
        }
        else {
            bootbox.confirm("@Lb["confirmEliminarLinea"]", function (result) {
                if (result) {
                    if (idLinea != 0) {
                        lineasEliminadas.push(lineas[id].id);
                        lineasActualizadas.splice(id, 1);
                    }

                    else {
                        if (lineasAgregadas.length > 0) {
                            for (var i = 0; i < lineasAgregadas.length; i++) {
                                if (lineasAgregadas[i].descripcion.toString() === lineas[id].descripcion.toString())
                                    lineasAgregadas.splice(i, 1);
                            }
                        }
                    }
                     lineas.splice(id, 1);
                     setTotal();
                    cargarTabla(lineas);
                }

            });
        }
    }

    function comprobarRepetido(nombre, id) {
        var flag = true;
        for (var i = 0; i < lineasTJustificante.length; i++) {
            if (lineasTJustificante[i].nombre === nombre && lineasTJustificante[i].idTipoJustificante != parseInt(id))
                flag = false;
        }
        return flag;
    }
    function validarCampoNota() {
        var flag = true;
        $('#notaValid').attr('hidden', true);
        $('#lineasValid').attr('hidden', true);

        if ($("#nota").val() === "") {
            $('#notaValid').attr('hidden', false);
            flag = false;
        }
        if (lineas.length <= 0 /*|| formasPagoDoc.length <= 0*/) {
           $('#lineasValid').attr('hidden', false);
            flag = false;
        }
        return flag;
    }

    function validarCampos() {
        var flag = true;
         $('#montoValid').attr('hidden', true);
        $('#descripcionValid').attr('hidden', true);

        if ($("#descripcion").val() === "") {
            $('#descripcionValid').attr('hidden', false);
            flag = false;
        }
        if ($("#monto").inputmask('unmaskedvalue') == 0) {
            $('#montoValid').attr('hidden', false);
            flag = false;
        }
        return flag;
    }

    function validarCamposEditar() {

       var flag = true;
         $('#editMontoValid').attr('hidden', true);
        $('#editDescripcionValid').attr('hidden', true);

        if ($("#editDescripcion").val() === "") {
            $('#editDescripcionValid').attr('hidden', false);
            flag = false;
        }
        if ($("#editMonto").inputmask('unmaskedvalue') == null) {
            $('#editMontoValid').attr('hidden', false);
            flag = false;
        }
        if (flag) {
            var monto = $("#editMonto").inputmask('unmaskedvalue');
            if (monto < editMonto) {
               var aplicado =  $("#totalAplicado").inputmask('unmaskedvalue');
                var total = $(".total").inputmask('unmaskedvalue');
                var result = editMonto - parseFloat(monto);
                var result1 = parseFloat(total) - result;
                if (result1 < aplicado) {
                    cargarAlert('@Lb["aplicadoValid"]');
                    flag = false;
                }
            }
        }
        return flag;

    }
    function cargarModalEditNota(i) {
        editDescripcion = lineas[i].descripcion;
        editMonto = lineas[i].monto;
        $("#IdMovimientoJ").val(lineas[i].id);
        $("#editDescripcion").val(lineas[i].descripcion);
        $("#editTipoJustificante").val(lineas[i].tipo);
        $("#editMonto").val(lineas[i].monto);
        $("#modalNotas").modal("show");
    }
    function cargarModalEditAplicado(i) {
        $("#idFila").val(i);
        $("#editAplicado").val(recuperarAplicado(docAplicados[i]));
        $("#modalEditAplicado").modal("show");
    }
    function editarAplicado() {
        $('#aplicadoValid').prop('hidden', true);
        var pos = parseInt($("#idFila").val());
         var aplicadoAnterior = recuperarAplicado(docAplicados[pos]);
        var aplicado = $("#editAplicado").inputmask('unmaskedvalue');
         var model = {
                    num: docAplicados[pos].idDocumento,
                    IdMovimientoDetalle: docAplicados[pos].idMovimientoDetalle,
                    IdMovimientoDesde: parseInt($("#IdMovimiento").val()),
                    IdMovimientoHasta: docAplicados[pos].idMovimientoHasta,
                    Aplicado: parseFloat(aplicado).toString().replace(".", ","),
                    CompraDolarTC: parseFloat($("#dolar").inputmask('unmaskedvalue')),
                    VentaDolarTC: parseFloat($("#dolarVenta").inputmask('unmaskedvalue')),
                    CompraEuroTC: parseFloat($("#euro").inputmask('unmaskedvalue')),
                    VentaEuroTC: parseFloat($("#euroVenta").inputmask('unmaskedvalue')),
                    IdMoneda: parseInt($("#tipoMoneda").val()),
         };
         $.ajax({
                type: "post",
                dataType: "json",
             data: { viewModel: model},
                url: '@Url.Action("EditarMovimientosDetalle", "Nota")',
             success: function (data) {
                 $("#totalAplicado").val(parseFloat($("#totalAplicado").inputmask('unmaskedvalue')) - parseFloat(aplicadoAnterior));
                 $("#totalAplicado").val(parseFloat($("#totalAplicado").inputmask('unmaskedvalue')) + parseFloat(aplicado));
                 $("#totalDisponible").val(parseFloat($(".total").inputmask('unmaskedvalue')) - parseFloat($("#totalAplicado").inputmask('unmaskedvalue')));

                 getDocumentosEnlazados();
                  $("#modalEditAplicado").modal("hide");
              },
             error: function (err, scnd) {
                    cargarAlert('@Lb["errorGeneral"]');
                    console.log(err.statusText);
              }
         });

       

        
    }
    function EditarLinea() {
        var flag = false;
        var id = $("#IdMovimientoJ").val();
        if (validarCamposEditar()) {
            for (var i = 0; i < lineas.length; i++) {
                if (id == lineas[i].id && editDescripcion == lineas[i].descripcion) {
                    if (id == 0 && @Model.IdDocumento == 0) {
                        lineas[i].descripcion = $("#editDescripcion").val();
                        lineas[i].monto = parseFloat($("#editMonto").inputmask('unmaskedvalue'));
                        lineas[i].tipo = $("#editTipoJustificante").val();
                        for (var j = 0; j < lineasAgregadas.length; j++) {
                            if (editDescripcion == lineasAgregadas[j].descripcion)
                                lineasAgregadas[j] = lineas[i];

                        }
                    }
                    else if (id == 0 && @Model.IdDocumento != 0) {
                        for (var j = 0; j < lineasAgregadas.length; j++) {
                            if (editDescripcion == lineasAgregadas[j].descripcion) {
                                lineasAgregadas[j].descripcion = $("#editDescripcion").val();
                                lineasAgregadas[j].monto = parseFloat($("#editMonto").inputmask('unmaskedvalue'));
                                lineasAgregadas[j].tipo = $("#editTipoJustificante").val();
                                lineas[i] = lineasAgregadas[j];
                            }
                        }
                    }
                    else {
                        lineas[i].descripcion = $("#editDescripcion").val();
                        lineas[i].monto = parseFloat($("#editMonto").inputmask('unmaskedvalue'));
                        lineas[i].tipo = $("#editTipoJustificante").val();
                        lineasActualizadas.push(lineas[i]);
                    }
                }
            }
            setTotal();
            cargarTabla(lineas);
            $("#modalNotas").modal("hide");
        }
    }
    function cargarLineas(data) {
        for (var i = 0; i < data.length; i++) {
            var model = {
                id: data[i].idMovimientoJustificante,
                idMoneda: data[i].idMoneda,
                idNotaCredito: @Model.IdDocumento,
                descripcion: data[i].descripcion,
                monto: recuperarMonto(data[i]),
                tipo: data[i].idTipoJustificante
            };
            lineas.push(model);

        }
        setTotal();
        cargarTabla(lineas);
    }
    function guardarLinea() {

        if (validarCampos()) {
          $('#lineasValid').attr('hidden', true);
            var model = {
                id: 0,
                idMoneda: parseInt($("#tipoMoneda").val()),
                idNotaCredito: @Model.IdDocumento,
                descripcion: $("#descripcion").val(),
                monto: parseFloat($("#monto").inputmask('unmaskedvalue')),
                tipo: $("#tipoJustificante").val()
            };
            lineasAgregadas.push(model);
            lineas.push(model);
            setTotal();
            cargarTabla(lineas);
            $("#descripcion").val("");
            $("#monto").val(0.00);
        }
    }

    function setTotal() {
        var monto = 0;
        for (var i = 0; i < lineas.length; i++) {
            monto = lineas[i].monto + monto;
        }       
        $('#formatter').val(monto);
        $(".total").text($('#formatter').inputmask('unmaskedvalue'));
        $("#total").val($('#formatter').inputmask('unmaskedvalue'));
        $("#totalDisponible").val($('#formatter').inputmask('unmaskedvalue') - $("#totalAplicado").inputmask('unmaskedvalue'));


    }

    function cargarTabla(data) {
        $('.filasCargadas').remove();
        contadorFila = 0;
        for (var i = 0; i < data.length; i++) {
            contadorFila++;
            var body = '<tr class="filasCargadas" id="fila' + contadorFila + '"><td style="padding-top:2rem;">' + data[i].descripcion + '</td>'
                + '<td style="padding-top:2rem;" ><span>' + getTipo(data[i].tipo) + '</span></td>'
                + '<td style="padding-top:2rem;" ><span class="currency">' + data[i].monto + '</span></td>'
                + '<td><button  class="btn btn-link" value="' + contadorFila + '" onclick="cargarModalEditNota(' + i + ')" ><i class="fas fa-edit"></i></button><button  class="btn btn-link" value="' + i + '" onclick="eliminarLinea(value, ' + data[i].id + ')" ><i class="fas fa-trash"></i></button></td></tr>';

            $('.lineaForm').before(body);

        }
           var simbolo = "₡";
        if (parseInt($('#tipoMoneda').val()) === 2)
            simbolo = "$";
        else if (parseInt($('#tipoMoneda').val()) === 3)
            simbolo = "€";
         $(".currency").inputmask('currency', {
            prefix: simbolo,
            rightAlign: true
          });

          $(".moneda").inputmask('currency', {
           prefix: '',
           rightAlign: true,
           min: 0
       });

    }


    function retornaMontoAlCambioDoc(data){
        var moneda = parseInt($('#tipoMoneda').val());
        var monto = 0;
        switch (moneda) {
            case 1:
                monto = data.aplicadoBase;
                break;
            case 2:
                monto = data.aplicadoDolar;
                break;
            case 3:
                monto = data.aplicadoEuro;
        }
        return monto;
    }

 
    function formatInput(monto) {

        $('#formatter').val(monto);
        return $('#formatter').val();

    }

    function crearModeloNota() {
         var NotaModel = {
            idNotaCredito: @Model.IdDocumento,
             idContacto: parseInt($("#contactos").val()),
            IdDocumento: parseInt(@Model.IdDocumento),
            fecha: $('#fecha').val(),
            idTipoDocumento:parseInt($("#tipoDocumento").val()),
            estado: parseInt($('input:checkbox[name=estado1]:checked').val()),
            nota:$("#nota").val()
        };
        return NotaModel;
    }
    function crearModeloMovimiento() {
                               var esN = false;     
            for (var i = 0; i < tipoDocumento.length; i++) {
                if (parseInt($("#tipoDocumento option:selected").val()) == tipoDocumento[i].idTipoDocumento)
                    esN = tipoDocumento[i].esNota;             
            }
         var MovimientoModel = {
             IdMovimiento: parseInt($("#IdMovimiento").val()),
             IdContacto: parseInt($("#contactos").val()),
             IdDocumento: parseInt(@Model.IdDocumento),
             IdTipoDocumento:parseInt($("#tipoDocumento").val()),
             IdUsuario: parseInt($("#IdUsuario").val()),
             IdMoneda: parseInt($("#tipoMoneda").val()),
             Cxp:getCx(1),
             Cxc:getCx(2),
             Monto:parseFloat($(".total").inputmask('unmaskedvalue').replace(".", ",")),
             DisponibleBase:  0,
             DisponibleDolar: 0,
             DisponibleEuro:  0,
             AplicadoBase:  0,
             AplicadoDolar:  0,
             AplicadoEuro:  0,
             SaldoBase: 0,
             SaldoDolar: 0,
             SaldoEuro: 0,
             FechaCreacion: $("#fecha").val(),
             MovimientoJustificante: esN ? crearModeloMJustificante(lineasAgregadas) : null

        };

        if (!esNota()) {
            MovimientoModel = montoAlCambioDoc(MovimientoModel);

        }


        return MovimientoModel;
    }

    function montoAlCambioDoc(model) {

        var monto = parseFloat(model.Monto);
        var tcDolar = parseFloat($("#dolar").inputmask('unmaskedvalue'));
        var tcEuro = parseFloat($("#euro").inputmask('unmaskedvalue'));

        if ('@Model.IdDocumento' == 0) {
           
                model.monto = 0;

            
        } else {
            var disponible = parseFloat($("#totalDisponible").inputmask('unmaskedvalue'));
            var aplicado = parseFloat($("#totalAplicado").inputmask('unmaskedvalue'));
             switch (parseInt(model.IdMoneda)) {
                case 1:
                    model.AplicadoBase = aplicado;
                    model.AplicadoDolar = aplicado / tcDolar;
                    model.AplicadoEuro = aplicado / tcEuro;

                    model.DisponibleBase = disponible;
                    model.DisponibleDolar = disponible / tcDolar;
                    model.DisponibleEuro = disponible / tcEuro;
                    break;
                case 2:
                    model.AplicadoBase = aplicado * tcDolar;
                    model.AplicadoDolar = aplicado;
                    model.AplicadoEuro = (aplicado * tcDolar) / tcEuro;

                    model.DisponibleBase = disponible * tcDolar;
                    model.DisponibleDolar = disponible;
                    model.DisponibleEuro = (disponible * tcDolar) / tcEuro;
                    break;
                case 3:
                    model.AplicadoBase = aplicado * tcEuro;
                    model.AplicadoDolar = (aplicado * tcEuro) / tcDolar;
                    model.AplicadoEuro = aplicado;

                    model.DisponibleBase = disponible * tcEuro;
                    model.DisponibleDolar = (disponible * tcEuro) / tcDolar;
                    model.DisponibleEuro = disponible;
                    break;

             }
             model.DisponibleBase = model.DisponibleBase.toString().replace(".", ",");
        model.DisponibleDolar = model.DisponibleDolar.toString().replace(".", ",");
        model.DisponibleEuro = model.DisponibleEuro.toString().replace(".", ",");

        model.AplicadoBase = model.AplicadoBase.toString().replace(".", ",");
        model.AplicadoDolar = model.AplicadoDolar.toString().replace(".", ",");
        model.AplicadoEuro = model.AplicadoEuro.toString().replace(".", ",");
        }

       

        return model;
    }

    function crearModeloMJustificante(model) {
        var array = [];
        for (var i = 0; i < model.length; i++) {
            var MJustificante = {
                IdMovimientoJustificante : 0,
                 IdMovimiento: parseInt($("#IdMovimiento").val()),
                idTipoJustificante: parseInt(model[i].tipo),
                IdUsuario: parseInt($("#IdUsuario").val()),
                estado: parseInt($('input:checkbox[name=estado1]:checked').val()),
                idMoneda: parseInt($("#tipoMoneda").val()),
                CompraDolarTC:parseFloat($("#dolar").inputmask('unmaskedvalue')),
                VentaDolatTC:parseFloat($("#dolarVenta").inputmask('unmaskedvalue')),
                CompraEuroTC:parseFloat($("#euro").inputmask('unmaskedvalue')),
                VentaEuroTC: parseFloat($("#euroVenta").inputmask('unmaskedvalue')),
                Monto: parseFloat(model[i].monto.toFixed(2)).toString().replace(".", ","),
                descripcion: model[i].descripcion
            };
            array.push(MJustificante);
        }
        return array;
    }
    function crearLineasActualizadas(model) {
         var array = [];
        for (var i = 0; i < model.length; i++) {
            var MJustificante = {
                IdMovimientoJustificante:parseInt(model[i].id),
                IdMovimiento: parseInt($("#IdMovimiento").val()),
                idTipoJustificante: parseInt(model[i].tipo),
                IdUsuario: parseInt($("#IdUsuario").val()),
                estado: parseInt($('input:checkbox[name=estado1]:checked').val()),
                idMoneda: parseInt($("#tipoMoneda").val()),
                CompraDolarTC:parseFloat($("#dolar").inputmask('unmaskedvalue')),
                VentaDolatTC:parseFloat($("#dolarVenta").inputmask('unmaskedvalue')),
                CompraEuroTC:parseFloat($("#euro").inputmask('unmaskedvalue')),
                VentaEuroTC:parseFloat($("#euroVenta").inputmask('unmaskedvalue')),
                Monto: parseFloat(model[i].monto.toFixed(2)).toString().replace(".", ","),
                descripcion: model[i].descripcion
            };
            array.push(MJustificante);
        }
        return array;
    }
    function getCx(tipo) {
        var flag = false;
        var cx = $("#tipo").val();
        if (cx == 1 && tipo == 1)
            flag = true;

        if (cx == 2 && tipo == 2)
            flag = true;

        return flag;
    }
    function recuperarMonto(item) {
         var moneda = parseInt($('#tipoMoneda').val());
        if (moneda == 1)
            return item.montoBase
        if (moneda == 2)
            return item.montoDolar;
        if (moneda == 3)
            return item.montoEuro;

    }
        function recuperarDisponible(item) {
         var moneda = parseInt($('#tipoMoneda').val());
         if (moneda == 1)
                return item.disponibleBase;
        if (moneda == 2)
            return item.disponibleDolar;
        if (moneda == 3)
            return item.disponibleEuro;

    }
    function getTipo(tipo) {
        var id = parseInt(tipo);
        for ( i = 0; i < lineasTJustificante.length; i++) {
            if (lineasTJustificante[i].idTipoJustificante == id)
                return lineasTJustificante[i].nombre;
        }

    }
    function recalcularMonto(item) {

        var moneda = parseInt($('#tipoMoneda').val());
        var dolar = parseFloat($("#dolarVenta").inputmask('unmaskedvalue'));
        var euro = parseFloat($("#euroVenta").inputmask('unmaskedvalue'));

        if (moneda === 1 && item.idMoneda === 1)
            return item.monto;
        else if (moneda === 1 && item.idMoneda === 2)
            return item.monto * dolar;
        else if (moneda === 1 && item.idMoneda === 3)
            return item.monto * euro;
        else if (moneda === 2 && item.idMoneda === 1)
            return item.monto / dolar;
        else if (moneda === 2 && item.idMoneda === 2)
            return item.monto;
        else if (moneda === 2 && item.idMoneda === 3)
            return (item.monto * euro) / dolar;
        else if (moneda === 3 && item.idMoneda === 1)
            return item.monto / euro;
        else if (moneda === 3 && item.idMoneda === 2)
            return (item.monto * dolar) / euro;
        else if (moneda === 3 && item.idMoneda === 3)
            return item.monto;
    }


    function formatearFecha() {

        return '@Model.Fecha.Month' + "-" + '@Model.Fecha.Day' + "-" + '@Model.Fecha.Year' + " " + '@Model.Fecha.TimeOfDay';

    }

    function recuperarTotal(item) {
        if (item.idMoneda == 1)
            total = item.montoBase;
        else if (item.idMoneda == 2)
            total = item.montoDolar;

        else if (item.idMoneda == 3)
            total = item.montoEuro;


        $(".total").val(total);
    }
    function guardarAplicado(data, monto) {
         var moneda = parseInt($('#tipoMoneda').val());
        var dolar = parseFloat($("#dolarVenta").inputmask('unmaskedvalue'));
        var euro = parseFloat($("#euroVenta").inputmask('unmaskedvalue'));
        if (moneda == 1) {
                data.aplicadoBase = monto;
            data.aplicadoDolar = monto * dolar;
            data.aplicadoEuro = monto * euro;
        }
        if (moneda == 2) {
             data.aplicadoBase = monto * dolar;
            data.aplicadoDolar = monto;
            data.aplicadoEuro =  data.aplicadoBase * euro;
        }
         if (moneda == 3) {
             data.aplicadoBase = monto * euro;
            data.aplicadoDolar = data.aplicadoBase / dolar;
            data.aplicadoEuro =  monto;
        }

    }
    function recuperarFecha(_fecha) {
        var f = new Date(_fecha);
        return f.toLocaleString();
    }

    function recuperarTipoDocumento(id) {
        var idtipoDoc = 0;
       for (var i = 0; i < arrayMovimiento.length; i++) {
         if (arrayMovimiento[i].idMovimiento == id) {
           for (var j = 0; j < tipoDocumento.length; j++) {
               if (tipoDocumento[j].idTipoDocumento == arrayMovimiento[i].idTipoDocumento) {
                   return tipoDocumento[j].nombre;
               }
           }
         }
                
       }
      
    }
    function recuperarDocumento(id) {
       for (var i = 0; i < arrayMovimiento.length; i++) {
         if (arrayMovimiento[i].idMovimiento == id) {
               return arrayMovimiento[i].idDocumento;
               break;
         }
                
       }
      
    }

    function cargarTablaDocAplicados(data) {

        $('.filasAplicadoTotal').remove();
        contadorFila = 0;
        var aplicado = 0;
        for (var i = 0; i < data.length; i++) {
            aplicado += retornaMontoAlCambioDoc(data[i]);
            var idDoc = recuperarDocumento(data[i].idMovimientoHasta);
            var body = '<tr class="filasAplicadoTotal" id="fila' + contadorFila + '"><td style="padding-top:2rem;">' + recuperarTipoDocumento(data[i].idMovimientoHasta) + '</td>'
                + '<td style="padding-top:2rem;"><span>' + idDoc + '</span></td>'
                + '<td style="padding-top:2rem;" ><span id="pendiente' + i + '" class="currency">' + retornaMontoAlCambioDoc(data[i]) + '</span></td>'
                + '<td><button  class="btn btn-link" value="' + contadorFila + '" onclick="cargarModalEditAplicado(' + i + ')" ><i class="fas fa-edit"></i></button><button  class="btn btn-link" value="' + i + '" onclick="ver(' + idDoc + ')" ><i class="fas fa-eye"></i></button></td></tr>';
            $('.lineasTotalesForm').before(body);

        }
       var simbolo = "₡";
        if (parseInt($('#tipoMoneda').val()) === 2)
            simbolo = "$";
        else if (parseInt($('#tipoMoneda').val()) === 3)
            simbolo = "€";
         $(".currency").inputmask('currency', {
            prefix: simbolo,
            rightAlign: true
          });

          $(".moneda").inputmask('currency', {
           prefix: '',
           rightAlign: true,
           min: 0
       });


    }

    function ver(id) {
        window.open("@Url.Action("EditarFactura","Factura", new { id = "__id__" })".replace("__id__", id));
    }

    function getSaldoAplicable() {
        return saldoAplicable;
    }

    function setSaldoAplicable(monto) {
        saldoAplicable = monto;
    }

    function recuperarSaldo(data) {

         var moneda = parseInt($("#tipoMoneda").val());

        if (moneda == 1)
            return data.saldoBase;
                if (moneda == 2)
            return data.saldoDolar;
                if (moneda == 3)
            return data.saldoEuro;
    }
       function recuperarAplicado(data) {

         var moneda = parseInt($("#tipoMoneda").val());

        if (moneda == 1)
            return data.aplicadoBase;
                if (moneda == 2)
            return data.aplicadoDolar;
                if (moneda == 3)
            return data.aplicadoEuro;
    }

    function Guardar() {
         $.ajax({
                type: "post",
                dataType: "json",
             data: { viewModel: crearModeloEnlace()},
                url: '@Url.Action("CrearEnlace", "Nota")',
             success: function (data) {
                  getDocumentosEnlazados(2);
                },
                error: function (err, scnd) {
                    cargarAlert('@Lb["errorGeneral"]');
                    console.log(err.statusText);
                }
         });
    }

    function crearLineasEditadas() {
        var array = [];
        for (var i = 0; i < movimientosDetalle.length; i++) {
                if (movimientosDetalle[i].tipo ==2) {
                             var model = {
                                    num : movimientosDetalle[i].idDocumento,
                                    IdMovimientoDesde: parseInt($("#IdMovimiento").val()),
                                    IdMovimientoHasta: movimientosDetalle[i].idMovimiento,
                                    Aplicado: parseFloat($("#aplicadoFinal" + i).inputmask('unmaskedvalue')).toString().replace(".", ","),
                                    CompraDolarTC: parseFloat($("#dolar").inputmask('unmaskedvalue')),
                                    VentaDolarTC: parseFloat($("#dolarVenta").inputmask('unmaskedvalue')),
                                    CompraEuroTC: parseFloat($("#euro").inputmask('unmaskedvalue')),
                                    VentaEuroTC: parseFloat($("#euroVenta").inputmask('unmaskedvalue')),
                                    IdMoneda: parseInt($("#tipoMoneda").val()),
                             };
                                array.push(model);
                }
        }
        return array;
    }
    function GetReporte() {
                                       var esN = false;     
            for (var i = 0; i < tipoDocumento.length; i++) {
                if (parseInt($("#tipoDocumento option:selected").val()) == tipoDocumento[i].idTipoDocumento)
                    esN = tipoDocumento[i].esNota;             
            }
        var parametros = [];
             $.ajax({
              type: "get",
              dataType: "json",
              url: '@Url.Action("GetEmpresa", "GrupoEmpresarial", new { id = @Context.Session.GetInt32("idEmpresa")})',
                 success: function (data) {
                     parametros.push({ nombre: "idPuntoVenta", valor: data.idPuntoVenta.toString() });
                     if (!esN)
                         parametros.push({ nombre: "Direccion", valor: data.direccion.toString() });

           
             },
             error: function (err, scnd) {
                  cargarAlert('@Lb["errorGeneral"]');
                  console.log(err.statusText);
             }
             });
        if (esN) {
            parametros.push({ nombre: "IdNC", valor: '@Model.IdDocumento' });
            parametros.push({ nombre: "idMovimiento", valor: $("#IdMovimiento").val() });
            parametros.push({ nombre: "idEmpresa", valor: '@Context.Session.GetInt32("idEmpresa")' });
            var nombre = "Nota";
        } if (!esN) {
            parametros.push({ nombre: "idMovimiento", valor: $("#IdMovimiento").val() });
            var nombre = "Pago";
        }
        console.log(parametros);
       $.ajax({
            type: "POST",
            url: '@Url.Action("ReporteGeneral", "VistaReporte")',
            data: { NombreReporte: nombre, parametros: parametros, usaGrupo: false },
             success: function (data) {

                 var myWindow = window.open('', '', '');
                 var doc = myWindow.document;
                 doc.open();
                 doc.write(data);
                 doc.close();

             },
             error: function (err, scnd) {
                cargarAlert('@Lb["errorGeneral"]');
                console.log(err.statusText);
             }
        });

    }


</script>
